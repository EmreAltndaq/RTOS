
rtos_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  20000010  08004e40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a00  08004e40  00021a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016231  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa4  00000000  00000000  0003626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a17  00000000  00000000  0003b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013680  00000000  00000000  0003de7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095912  00000000  00000000  000514ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6e11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049fc  00000000  00000000  000e6e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d90 	.word	0x08004d90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004d90 	.word	0x08004d90

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa2c 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f818 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8ac 	bl	80002b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f86c 	bl	800023c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000164:	f002 f904 	bl	8002370 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <main+0x30>)
 800016a:	2100      	movs	r1, #0
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <main+0x34>)
 800016e:	f002 f965 	bl	800243c <osThreadNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a04      	ldr	r2, [pc, #16]	; (8000188 <main+0x38>)
 8000176:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000178:	f002 f92c 	bl	80023d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017c:	e7fe      	b.n	800017c <main+0x2c>
 800017e:	bf00      	nop
 8000180:	08004dec 	.word	0x08004dec
 8000184:	080002fd 	.word	0x080002fd
 8000188:	20001938 	.word	0x20001938

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	; 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f004 fdf0 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001d8:	2300      	movs	r3, #0
 80001da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 f8b7 	bl	8001354 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80001ec:	f000 f8c4 	bl	8000378 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fb22 	bl	8001854 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000216:	f000 f8af 	bl	8000378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021a:	2302      	movs	r3, #2
 800021c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fcdf 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000230:	f000 f8a2 	bl	8000378 <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3750      	adds	r7, #80	; 0x50
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MX_ADC1_Init+0x74>)
 800024e:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <MX_ADC1_Init+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <MX_ADC1_Init+0x74>)
 800025a:	2201      	movs	r2, #1
 800025c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000260:	2200      	movs	r2, #0
 8000262:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000266:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800026a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000274:	2201      	movs	r2, #1
 8000276:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <MX_ADC1_Init+0x74>)
 800027a:	f000 f9cb 	bl	8000614 <HAL_ADC_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f878 	bl	8000378 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000288:	2300      	movs	r3, #0
 800028a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fc73 	bl	8000b84 <HAL_ADC_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a4:	f000 f868 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20001940 	.word	0x20001940
 80002b4:	40012400 	.word	0x40012400

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002c4:	f043 0320 	orr.w	r3, r3, #32
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0320 	and.w	r3, r3, #32
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <MX_GPIO_Init+0x40>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	683b      	ldr	r3, [r7, #0]

}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000

080002fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000304:	4810      	ldr	r0, [pc, #64]	; (8000348 <StartDefaultTask+0x4c>)
 8000306:	f000 fa5d 	bl	80007c4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800030a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <StartDefaultTask+0x4c>)
 8000310:	f000 fb32 	bl	8000978 <HAL_ADC_PollForConversion>
	  adcVal1 = HAL_ADC_GetValue(&hadc1);
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <StartDefaultTask+0x4c>)
 8000316:	f000 fc29 	bl	8000b6c <HAL_ADC_GetValue>
 800031a:	4603      	mov	r3, r0
 800031c:	b29a      	uxth	r2, r3
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <StartDefaultTask+0x50>)
 8000320:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <StartDefaultTask+0x4c>)
 8000328:	f000 fb26 	bl	8000978 <HAL_ADC_PollForConversion>
	  adcVal2 = HAL_ADC_GetValue(&hadc1);
 800032c:	4806      	ldr	r0, [pc, #24]	; (8000348 <StartDefaultTask+0x4c>)
 800032e:	f000 fc1d 	bl	8000b6c <HAL_ADC_GetValue>
 8000332:	4603      	mov	r3, r0
 8000334:	b29a      	uxth	r2, r3
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <StartDefaultTask+0x54>)
 8000338:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <StartDefaultTask+0x4c>)
 800033c:	f000 faf0 	bl	8000920 <HAL_ADC_Stop>

    osDelay(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f002 f925 	bl	8002590 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000346:	e7dd      	b.n	8000304 <StartDefaultTask+0x8>
 8000348:	20001940 	.word	0x20001940
 800034c:	20001970 	.word	0x20001970
 8000350:	20001934 	.word	0x20001934

08000354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d101      	bne.n	800036a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000366:	f000 f939 	bl	80005dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40000800 	.word	0x40000800

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	e7fe      	b.n	8000380 <Error_Handler+0x8>
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_MspInit+0x68>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a17      	ldr	r2, [pc, #92]	; (80003ec <HAL_MspInit+0x68>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_MspInit+0x68>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_MspInit+0x68>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a11      	ldr	r2, [pc, #68]	; (80003ec <HAL_MspInit+0x68>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_MspInit+0x68>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	210f      	movs	r1, #15
 80003be:	f06f 0001 	mvn.w	r0, #1
 80003c2:	f000 fe18 	bl	8000ff6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <HAL_MspInit+0x6c>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_MspInit+0x6c>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_ADC_MspInit+0x6c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d121      	bne.n	8000458 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <HAL_ADC_MspInit+0x70>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a12      	ldr	r2, [pc, #72]	; (8000464 <HAL_ADC_MspInit+0x70>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <HAL_ADC_MspInit+0x70>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <HAL_ADC_MspInit+0x70>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <HAL_ADC_MspInit+0x70>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_ADC_MspInit+0x70>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000444:	2301      	movs	r3, #1
 8000446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000448:	2303      	movs	r3, #3
 800044a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <HAL_ADC_MspInit+0x74>)
 8000454:	f000 fdfa 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40012400 	.word	0x40012400
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800

0800046c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08c      	sub	sp, #48	; 0x30
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800047c:	2200      	movs	r2, #0
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	201e      	movs	r0, #30
 8000482:	f000 fdb8 	bl	8000ff6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000486:	201e      	movs	r0, #30
 8000488:	f000 fdd1 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <HAL_InitTick+0x9c>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	4a1d      	ldr	r2, [pc, #116]	; (8000508 <HAL_InitTick+0x9c>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	61d3      	str	r3, [r2, #28]
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_InitTick+0x9c>)
 800049a:	69db      	ldr	r3, [r3, #28]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a4:	f107 0210 	add.w	r2, r7, #16
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4611      	mov	r1, r2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fb4c 	bl	8001b4c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004b4:	f001 fb22 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80004b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004bc:	4a13      	ldr	r2, [pc, #76]	; (800050c <HAL_InitTick+0xa0>)
 80004be:	fba2 2303 	umull	r2, r3, r2, r3
 80004c2:	0c9b      	lsrs	r3, r3, #18
 80004c4:	3b01      	subs	r3, #1
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <HAL_InitTick+0xa4>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <HAL_InitTick+0xa8>)
 80004cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <HAL_InitTick+0xa4>)
 80004d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_InitTick+0xa4>)
 80004d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_InitTick+0xa4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_InitTick+0xa4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <HAL_InitTick+0xa4>)
 80004ea:	f001 fcf7 	bl	8001edc <HAL_TIM_Base_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d104      	bne.n	80004fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <HAL_InitTick+0xa4>)
 80004f6:	f001 fd49 	bl	8001f8c <HAL_TIM_Base_Start_IT>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e000      	b.n	8000500 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	3730      	adds	r7, #48	; 0x30
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	431bde83 	.word	0x431bde83
 8000510:	20001974 	.word	0x20001974
 8000514:	40000800 	.word	0x40000800

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800051c:	e7fe      	b.n	800051c <NMI_Handler+0x4>

0800051e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <MemManage_Handler+0x4>

0800052a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <BusFault_Handler+0x4>

08000530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <UsageFault_Handler+0x4>

08000536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
	...

08000544 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <TIM4_IRQHandler+0x10>)
 800054a:	f001 fd71 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20001974 	.word	0x20001974

08000558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000564:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000566:	e003      	b.n	8000570 <LoopCopyDataInit>

08000568 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800056a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800056c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800056e:	3104      	adds	r1, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000574:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000576:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000578:	d3f6      	bcc.n	8000568 <CopyDataInit>
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800057c:	e002      	b.n	8000584 <LoopFillZerobss>

0800057e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000580:	f842 3b04 	str.w	r3, [r2], #4

08000584 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000586:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000588:	d3f9      	bcc.n	800057e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800058a:	f7ff ffe5 	bl	8000558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800058e:	f004 fbc5 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fddd 	bl	8000150 <main>
  bx lr
 8000596:	4770      	bx	lr
  ldr r3, =_sidata
 8000598:	08004e30 	.word	0x08004e30
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005a0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80005a4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80005a8:	20001a00 	.word	0x20001a00

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_Init+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_Init+0x28>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 fd0d 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff ff50 	bl	800046c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005cc:	f7ff feda 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_IncTick+0x1c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_IncTick+0x20>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <HAL_IncTick+0x20>)
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	20000008 	.word	0x20000008
 80005fc:	200019bc 	.word	0x200019bc

08000600 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return uwTick;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <HAL_GetTick+0x10>)
 8000606:	681b      	ldr	r3, [r3, #0]
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	200019bc 	.word	0x200019bc

08000614 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e0be      	b.n	80007b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000640:	2b00      	cmp	r3, #0
 8000642:	d109      	bne.n	8000658 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff fece 	bl	80003f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 fbdd 	bl	8000e18 <ADC_ConversionStop_Disable>
 800065e:	4603      	mov	r3, r0
 8000660:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8099 	bne.w	80007a2 <HAL_ADC_Init+0x18e>
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8095 	bne.w	80007a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000680:	f023 0302 	bic.w	r3, r3, #2
 8000684:	f043 0202 	orr.w	r2, r3, #2
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000694:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7b1b      	ldrb	r3, [r3, #12]
 800069a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800069c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ac:	d003      	beq.n	80006b6 <HAL_ADC_Init+0xa2>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d102      	bne.n	80006bc <HAL_ADC_Init+0xa8>
 80006b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ba:	e000      	b.n	80006be <HAL_ADC_Init+0xaa>
 80006bc:	2300      	movs	r3, #0
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7d1b      	ldrb	r3, [r3, #20]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d119      	bne.n	8000700 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7b1b      	ldrb	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d109      	bne.n	80006e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	3b01      	subs	r3, #1
 80006da:	035a      	lsls	r2, r3, #13
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	4313      	orrs	r3, r2
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	e00b      	b.n	8000700 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ec:	f043 0220 	orr.w	r2, r3, #32
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f8:	f043 0201 	orr.w	r2, r3, #1
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	430a      	orrs	r2, r1
 8000712:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_ADC_Init+0x1a8>)
 800071c:	4013      	ands	r3, r2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	6812      	ldr	r2, [r2, #0]
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	430b      	orrs	r3, r1
 8000726:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000730:	d003      	beq.n	800073a <HAL_ADC_Init+0x126>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d104      	bne.n	8000744 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	3b01      	subs	r3, #1
 8000740:	051b      	lsls	r3, r3, #20
 8000742:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	430a      	orrs	r2, r1
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_ADC_Init+0x1ac>)
 8000760:	4013      	ands	r3, r2
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	429a      	cmp	r2, r3
 8000766:	d10b      	bne.n	8000780 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000772:	f023 0303 	bic.w	r3, r3, #3
 8000776:	f043 0201 	orr.w	r2, r3, #1
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800077e:	e018      	b.n	80007b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000784:	f023 0312 	bic.w	r3, r3, #18
 8000788:	f043 0210 	orr.w	r2, r3, #16
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	f043 0201 	orr.w	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007a0:	e007      	b.n	80007b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a6:	f043 0210 	orr.w	r2, r3, #16
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	ffe1f7fd 	.word	0xffe1f7fd
 80007c0:	ff1f0efe 	.word	0xff1f0efe

080007c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d101      	bne.n	80007de <HAL_ADC_Start+0x1a>
 80007da:	2302      	movs	r3, #2
 80007dc:	e098      	b.n	8000910 <HAL_ADC_Start+0x14c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 fac4 	bl	8000d74 <ADC_Enable>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8087 	bne.w	8000906 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a41      	ldr	r2, [pc, #260]	; (8000918 <HAL_ADC_Start+0x154>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d105      	bne.n	8000822 <HAL_ADC_Start+0x5e>
 8000816:	4b41      	ldr	r3, [pc, #260]	; (800091c <HAL_ADC_Start+0x158>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d115      	bne.n	800084e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000838:	2b00      	cmp	r3, #0
 800083a:	d026      	beq.n	800088a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000844:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800084c:	e01d      	b.n	800088a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <HAL_ADC_Start+0x158>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d004      	beq.n	800086e <HAL_ADC_Start+0xaa>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <HAL_ADC_Start+0x154>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10d      	bne.n	800088a <HAL_ADC_Start+0xc6>
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <HAL_ADC_Start+0x158>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000876:	2b00      	cmp	r3, #0
 8000878:	d007      	beq.n	800088a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f023 0206 	bic.w	r2, r3, #6
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a2:	e002      	b.n	80008aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f06f 0202 	mvn.w	r2, #2
 80008ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80008c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80008ca:	d113      	bne.n	80008f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008d0:	4a11      	ldr	r2, [pc, #68]	; (8000918 <HAL_ADC_Start+0x154>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d105      	bne.n	80008e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_ADC_Start+0x158>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d108      	bne.n	80008f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	e00c      	b.n	800090e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	e003      	b.n	800090e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40012800 	.word	0x40012800
 800091c:	40012400 	.word	0x40012400

08000920 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000932:	2b01      	cmp	r3, #1
 8000934:	d101      	bne.n	800093a <HAL_ADC_Stop+0x1a>
 8000936:	2302      	movs	r3, #2
 8000938:	e01a      	b.n	8000970 <HAL_ADC_Stop+0x50>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fa68 	bl	8000e18 <ADC_ConversionStop_Disable>
 8000948:	4603      	mov	r3, r0
 800094a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d109      	bne.n	8000966 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095a:	f023 0301 	bic.w	r3, r3, #1
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800098e:	f7ff fe37 	bl	8000600 <HAL_GetTick>
 8000992:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f043 0220 	orr.w	r2, r3, #32
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e0c8      	b.n	8000b4c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d12a      	bne.n	8000a1e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d123      	bne.n	8000a1e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80009d6:	e01a      	b.n	8000a0e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009de:	d016      	beq.n	8000a0e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d007      	beq.n	80009f6 <HAL_ADC_PollForConversion+0x7e>
 80009e6:	f7ff fe0b 	bl	8000600 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d20b      	bcs.n	8000a0e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fa:	f043 0204 	orr.w	r2, r3, #4
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e09e      	b.n	8000b4c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0dd      	beq.n	80009d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a1c:	e06c      	b.n	8000af8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a1e:	4b4d      	ldr	r3, [pc, #308]	; (8000b54 <HAL_ADC_PollForConversion+0x1dc>)
 8000a20:	681c      	ldr	r4, [r3, #0]
 8000a22:	2002      	movs	r0, #2
 8000a24:	f001 f996 	bl	8001d54 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6919      	ldr	r1, [r3, #16]
 8000a34:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <HAL_ADC_PollForConversion+0x1e0>)
 8000a36:	400b      	ands	r3, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d118      	bne.n	8000a6e <HAL_ADC_PollForConversion+0xf6>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68d9      	ldr	r1, [r3, #12]
 8000a42:	4b46      	ldr	r3, [pc, #280]	; (8000b5c <HAL_ADC_PollForConversion+0x1e4>)
 8000a44:	400b      	ands	r3, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d111      	bne.n	8000a6e <HAL_ADC_PollForConversion+0xf6>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6919      	ldr	r1, [r3, #16]
 8000a50:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <HAL_ADC_PollForConversion+0x1e8>)
 8000a52:	400b      	ands	r3, r1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d108      	bne.n	8000a6a <HAL_ADC_PollForConversion+0xf2>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68d9      	ldr	r1, [r3, #12]
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <HAL_ADC_PollForConversion+0x1ec>)
 8000a60:	400b      	ands	r3, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_ADC_PollForConversion+0xf2>
 8000a66:	2314      	movs	r3, #20
 8000a68:	e020      	b.n	8000aac <HAL_ADC_PollForConversion+0x134>
 8000a6a:	2329      	movs	r3, #41	; 0x29
 8000a6c:	e01e      	b.n	8000aac <HAL_ADC_PollForConversion+0x134>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6919      	ldr	r1, [r3, #16]
 8000a74:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <HAL_ADC_PollForConversion+0x1e8>)
 8000a76:	400b      	ands	r3, r1
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d106      	bne.n	8000a8a <HAL_ADC_PollForConversion+0x112>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68d9      	ldr	r1, [r3, #12]
 8000a82:	4b38      	ldr	r3, [pc, #224]	; (8000b64 <HAL_ADC_PollForConversion+0x1ec>)
 8000a84:	400b      	ands	r3, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00d      	beq.n	8000aa6 <HAL_ADC_PollForConversion+0x12e>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6919      	ldr	r1, [r3, #16]
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <HAL_ADC_PollForConversion+0x1f0>)
 8000a92:	400b      	ands	r3, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d108      	bne.n	8000aaa <HAL_ADC_PollForConversion+0x132>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68d9      	ldr	r1, [r3, #12]
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <HAL_ADC_PollForConversion+0x1f0>)
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_ADC_PollForConversion+0x132>
 8000aa6:	2354      	movs	r3, #84	; 0x54
 8000aa8:	e000      	b.n	8000aac <HAL_ADC_PollForConversion+0x134>
 8000aaa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000aac:	fb02 f303 	mul.w	r3, r2, r3
 8000ab0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ab2:	e01d      	b.n	8000af0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aba:	d016      	beq.n	8000aea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <HAL_ADC_PollForConversion+0x15a>
 8000ac2:	f7ff fd9d 	bl	8000600 <HAL_GetTick>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d20b      	bcs.n	8000aea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f043 0204 	orr.w	r2, r3, #4
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e030      	b.n	8000b4c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8dd      	bhi.n	8000ab4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f06f 0212 	mvn.w	r2, #18
 8000b00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b1c:	d115      	bne.n	8000b4a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d111      	bne.n	8000b4a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	24924924 	.word	0x24924924
 8000b5c:	00924924 	.word	0x00924924
 8000b60:	12492492 	.word	0x12492492
 8000b64:	00492492 	.word	0x00492492
 8000b68:	00249249 	.word	0x00249249

08000b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d101      	bne.n	8000ba4 <HAL_ADC_ConfigChannel+0x20>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e0dc      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x1da>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b06      	cmp	r3, #6
 8000bb2:	d81c      	bhi.n	8000bee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3b05      	subs	r3, #5
 8000bc6:	221f      	movs	r2, #31
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4019      	ands	r1, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	3b05      	subs	r3, #5
 8000be0:	fa00 f203 	lsl.w	r2, r0, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34
 8000bec:	e03c      	b.n	8000c68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b0c      	cmp	r3, #12
 8000bf4:	d81c      	bhi.n	8000c30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	3b23      	subs	r3, #35	; 0x23
 8000c08:	221f      	movs	r2, #31
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	4019      	ands	r1, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	3b23      	subs	r3, #35	; 0x23
 8000c22:	fa00 f203 	lsl.w	r2, r0, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c2e:	e01b      	b.n	8000c68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b41      	subs	r3, #65	; 0x41
 8000c42:	221f      	movs	r2, #31
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b41      	subs	r3, #65	; 0x41
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b09      	cmp	r3, #9
 8000c6e:	d91c      	bls.n	8000caa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68d9      	ldr	r1, [r3, #12]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	3b1e      	subs	r3, #30
 8000c82:	2207      	movs	r2, #7
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4019      	ands	r1, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6898      	ldr	r0, [r3, #8]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	3b1e      	subs	r3, #30
 8000c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	e019      	b.n	8000cde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6919      	ldr	r1, [r3, #16]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	2207      	movs	r2, #7
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4019      	ands	r1, r3
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	6898      	ldr	r0, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b10      	cmp	r3, #16
 8000ce4:	d003      	beq.n	8000cee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cea:	2b11      	cmp	r3, #17
 8000cec:	d132      	bne.n	8000d54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d125      	bne.n	8000d44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d126      	bne.n	8000d54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d14:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d11a      	bne.n	8000d54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_ADC_ConfigChannel+0x1e8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d24:	fba2 2303 	umull	r2, r3, r2, r3
 8000d28:	0c9a      	lsrs	r2, r3, #18
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d34:	e002      	b.n	8000d3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f9      	bne.n	8000d36 <HAL_ADC_ConfigChannel+0x1b2>
 8000d42:	e007      	b.n	8000d54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f043 0220 	orr.w	r2, r3, #32
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40012400 	.word	0x40012400
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	431bde83 	.word	0x431bde83

08000d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d039      	beq.n	8000e06 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0201 	orr.w	r2, r2, #1
 8000da0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <ADC_Enable+0x9c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <ADC_Enable+0xa0>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000db0:	e002      	b.n	8000db8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f9      	bne.n	8000db2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dbe:	f7ff fc1f 	bl	8000600 <HAL_GetTick>
 8000dc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dc4:	e018      	b.n	8000df8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dc6:	f7ff fc1b 	bl	8000600 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d911      	bls.n	8000df8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f043 0210 	orr.w	r2, r3, #16
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e007      	b.n	8000e08 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1df      	bne.n	8000dc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83

08000e18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d127      	bne.n	8000e82 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e42:	f7ff fbdd 	bl	8000600 <HAL_GetTick>
 8000e46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e48:	e014      	b.n	8000e74 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e4a:	f7ff fbd9 	bl	8000600 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d90d      	bls.n	8000e74 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0210 	orr.w	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e007      	b.n	8000e84 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d0e3      	beq.n	8000e4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4906      	ldr	r1, [pc, #24]	; (8000f24 <__NVIC_EnableIRQ+0x34>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff4f 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff64 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ffb2 	bl	8000f7c <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff81 	bl	8000f28 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff57 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b08b      	sub	sp, #44	; 0x2c
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105e:	e169      	b.n	8001334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001060:	2201      	movs	r2, #1
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8158 	bne.w	800132e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a9a      	ldr	r2, [pc, #616]	; (80012ec <HAL_GPIO_Init+0x2a0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d05e      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 8001088:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2a0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d875      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 800108e:	4a98      	ldr	r2, [pc, #608]	; (80012f0 <HAL_GPIO_Init+0x2a4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d058      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 8001094:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <HAL_GPIO_Init+0x2a4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d86f      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 800109a:	4a96      	ldr	r2, [pc, #600]	; (80012f4 <HAL_GPIO_Init+0x2a8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d052      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010a0:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <HAL_GPIO_Init+0x2a8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d869      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010a6:	4a94      	ldr	r2, [pc, #592]	; (80012f8 <HAL_GPIO_Init+0x2ac>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d04c      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010ac:	4a92      	ldr	r2, [pc, #584]	; (80012f8 <HAL_GPIO_Init+0x2ac>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d863      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010b2:	4a92      	ldr	r2, [pc, #584]	; (80012fc <HAL_GPIO_Init+0x2b0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d046      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
 80010b8:	4a90      	ldr	r2, [pc, #576]	; (80012fc <HAL_GPIO_Init+0x2b0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d85d      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d82a      	bhi.n	8001118 <HAL_GPIO_Init+0xcc>
 80010c2:	2b12      	cmp	r3, #18
 80010c4:	d859      	bhi.n	800117a <HAL_GPIO_Init+0x12e>
 80010c6:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <HAL_GPIO_Init+0x80>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	08001147 	.word	0x08001147
 80010d0:	08001121 	.word	0x08001121
 80010d4:	08001133 	.word	0x08001133
 80010d8:	08001175 	.word	0x08001175
 80010dc:	0800117b 	.word	0x0800117b
 80010e0:	0800117b 	.word	0x0800117b
 80010e4:	0800117b 	.word	0x0800117b
 80010e8:	0800117b 	.word	0x0800117b
 80010ec:	0800117b 	.word	0x0800117b
 80010f0:	0800117b 	.word	0x0800117b
 80010f4:	0800117b 	.word	0x0800117b
 80010f8:	0800117b 	.word	0x0800117b
 80010fc:	0800117b 	.word	0x0800117b
 8001100:	0800117b 	.word	0x0800117b
 8001104:	0800117b 	.word	0x0800117b
 8001108:	0800117b 	.word	0x0800117b
 800110c:	0800117b 	.word	0x0800117b
 8001110:	08001129 	.word	0x08001129
 8001114:	0800113d 	.word	0x0800113d
 8001118:	4a79      	ldr	r2, [pc, #484]	; (8001300 <HAL_GPIO_Init+0x2b4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d013      	beq.n	8001146 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111e:	e02c      	b.n	800117a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e029      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	3304      	adds	r3, #4
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e024      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	3308      	adds	r3, #8
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e01f      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	330c      	adds	r3, #12
 8001142:	623b      	str	r3, [r7, #32]
          break;
 8001144:	e01a      	b.n	800117c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114e:	2304      	movs	r3, #4
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e013      	b.n	800117c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d105      	bne.n	8001168 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800115c:	2308      	movs	r3, #8
 800115e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	611a      	str	r2, [r3, #16]
          break;
 8001166:	e009      	b.n	800117c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	615a      	str	r2, [r3, #20]
          break;
 8001172:	e003      	b.n	800117c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x130>
          break;
 800117a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2bff      	cmp	r3, #255	; 0xff
 8001180:	d801      	bhi.n	8001186 <HAL_GPIO_Init+0x13a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	e001      	b.n	800118a <HAL_GPIO_Init+0x13e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3304      	adds	r3, #4
 800118a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2bff      	cmp	r3, #255	; 0xff
 8001190:	d802      	bhi.n	8001198 <HAL_GPIO_Init+0x14c>
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	e002      	b.n	800119e <HAL_GPIO_Init+0x152>
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	3b08      	subs	r3, #8
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	210f      	movs	r1, #15
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	6a39      	ldr	r1, [r7, #32]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80b1 	beq.w	800132e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e4:	4a48      	ldr	r2, [pc, #288]	; (8001308 <HAL_GPIO_Init+0x2bc>)
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a40      	ldr	r2, [pc, #256]	; (800130c <HAL_GPIO_Init+0x2c0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d013      	beq.n	8001238 <HAL_GPIO_Init+0x1ec>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3f      	ldr	r2, [pc, #252]	; (8001310 <HAL_GPIO_Init+0x2c4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d00d      	beq.n	8001234 <HAL_GPIO_Init+0x1e8>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <HAL_GPIO_Init+0x2c8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d007      	beq.n	8001230 <HAL_GPIO_Init+0x1e4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <HAL_GPIO_Init+0x2cc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d101      	bne.n	800122c <HAL_GPIO_Init+0x1e0>
 8001228:	2303      	movs	r3, #3
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 800122c:	2304      	movs	r3, #4
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001230:	2302      	movs	r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1ee>
 8001238:	2300      	movs	r3, #0
 800123a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124a:	492f      	ldr	r1, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x2bc>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_GPIO_Init+0x2d0>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	492c      	ldr	r1, [pc, #176]	; (800131c <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_GPIO_Init+0x2d0>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4928      	ldr	r1, [pc, #160]	; (800131c <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_GPIO_Init+0x2d0>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4922      	ldr	r1, [pc, #136]	; (800131c <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_GPIO_Init+0x2d0>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	491e      	ldr	r1, [pc, #120]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	4918      	ldr	r1, [pc, #96]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4914      	ldr	r1, [pc, #80]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d021      	beq.n	8001320 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	490e      	ldr	r1, [pc, #56]	; (800131c <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
 80012e8:	e021      	b.n	800132e <HAL_GPIO_Init+0x2e2>
 80012ea:	bf00      	nop
 80012ec:	10320000 	.word	0x10320000
 80012f0:	10310000 	.word	0x10310000
 80012f4:	10220000 	.word	0x10220000
 80012f8:	10210000 	.word	0x10210000
 80012fc:	10120000 	.word	0x10120000
 8001300:	10110000 	.word	0x10110000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40011000 	.word	0x40011000
 8001318:	40011400 	.word	0x40011400
 800131c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_GPIO_Init+0x304>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	43db      	mvns	r3, r3
 8001328:	4909      	ldr	r1, [pc, #36]	; (8001350 <HAL_GPIO_Init+0x304>)
 800132a:	4013      	ands	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	3301      	adds	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	f47f ae8e 	bne.w	8001060 <HAL_GPIO_Init+0x14>
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	372c      	adds	r7, #44	; 0x2c
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e26c      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8087 	beq.w	8001482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b04      	cmp	r3, #4
 800137e:	d00c      	beq.n	800139a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001380:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 030c 	and.w	r3, r3, #12
 8001388:	2b08      	cmp	r3, #8
 800138a:	d112      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06c      	beq.n	8001480 <HAL_RCC_OscConfig+0x12c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d168      	bne.n	8001480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e246      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x76>
 80013bc:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a7f      	ldr	r2, [pc, #508]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e02e      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0xbc>
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xd4>
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff f8e6 	bl	8000600 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff f8e2 	bl	8000600 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1fa      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xe4>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff f8d2 	bl	8000600 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff f8ce 	bl	8000600 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1e6      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x10c>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
 80014a6:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1ba      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4939      	ldr	r1, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff f887 	bl	8000600 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff f883 	bl	8000600 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e19b      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4927      	ldr	r1, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x270>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff f866 	bl	8000600 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff f862 	bl	8000600 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e17a      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d03a      	beq.n	80015d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d019      	beq.n	800159e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001570:	f7ff f846 	bl	8000600 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff f842 	bl	8000600 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e15a      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fb08 	bl	8001bac <RCC_Delay>
 800159c:	e01c      	b.n	80015d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_OscConfig+0x274>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff f82c 	bl	8000600 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015aa:	e00f      	b.n	80015cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff f828 	bl	8000600 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d908      	bls.n	80015cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e140      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	42420000 	.word	0x42420000
 80015c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e9      	bne.n	80015ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a6 	beq.w	8001732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ea:	4b97      	ldr	r3, [pc, #604]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b94      	ldr	r3, [pc, #592]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a93      	ldr	r2, [pc, #588]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b91      	ldr	r3, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b8e      	ldr	r3, [pc, #568]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a8a      	ldr	r2, [pc, #552]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7fe ffe9 	bl	8000600 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7fe ffe5 	bl	8000600 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0fd      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x4f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x312>
 8001658:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e02d      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x334>
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a75      	ldr	r2, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4b73      	ldr	r3, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a72      	ldr	r2, [pc, #456]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	e01c      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x356>
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a6c      	ldr	r2, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6213      	str	r3, [r2, #32]
 80016a8:	e00b      	b.n	80016c2 <HAL_RCC_OscConfig+0x36e>
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b64      	ldr	r3, [pc, #400]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a63      	ldr	r2, [pc, #396]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d015      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7fe ff99 	bl	8000600 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7fe ff95 	bl	8000600 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0ab      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ee      	beq.n	80016d2 <HAL_RCC_OscConfig+0x37e>
 80016f4:	e014      	b.n	8001720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7fe ff83 	bl	8000600 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7fe ff7f 	bl	8000600 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e095      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d105      	bne.n	8001732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a47      	ldr	r2, [pc, #284]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8081 	beq.w	800183e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d061      	beq.n	800180c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d146      	bne.n	80017de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7fe ff53 	bl	8000600 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7fe ff4f 	bl	8000600 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e067      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	492d      	ldr	r1, [pc, #180]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a19      	ldr	r1, [r3, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	430b      	orrs	r3, r1
 80017aa:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7fe ff23 	bl	8000600 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7fe ff1f 	bl	8000600 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e037      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x46a>
 80017dc:	e02f      	b.n	800183e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_RCC_OscConfig+0x4fc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7fe ff0c 	bl	8000600 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7fe ff08 	bl	8000600 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e020      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x498>
 800180a:	e018      	b.n	800183e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	42420060 	.word	0x42420060

08001854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4965      	ldr	r1, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7fe fe5c 	bl	8000600 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7fe fe58 	bl	8000600 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4922      	ldr	r1, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd32 	bl	800046c <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08004e10 	.word	0x08004e10
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b490      	push	{r4, r7}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a30:	1d3c      	adds	r4, r7, #4
 8001a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a38:	f240 2301 	movw	r3, #513	; 0x201
 8001a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x40>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x46>
 8001a66:	e02d      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6a:	623b      	str	r3, [r7, #32]
      break;
 8001a6c:	e02d      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c5b      	lsrs	r3, r3, #17
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	fb02 f203 	mul.w	r2, r2, r3
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e004      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	623b      	str	r3, [r7, #32]
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac6:	623b      	str	r3, [r7, #32]
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc90      	pop	{r4, r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	08004db4 	.word	0x08004db4
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	003d0900 	.word	0x003d0900

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff2 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08004e20 	.word	0x08004e20

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08004e20 	.word	0x08004e20

08001b4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0207 	and.w	r2, r3, #7
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40022000 	.word	0x40022000

08001bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RCC_Delay+0x34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <RCC_Delay+0x38>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc8:	bf00      	nop
  }
  while (Delay --);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <RCC_Delay+0x1c>
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d07d      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c08:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	61d3      	str	r3, [r2, #28]
 8001c20:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7fe fcda 	bl	8000600 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7fe fcd6 	bl	8000600 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e06d      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02e      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d027      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c96:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d014      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe fca5 	bl	8000600 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe fca1 	bl	8000600 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e036      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4917      	ldr	r1, [pc, #92]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	490b      	ldr	r1, [pc, #44]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420440 	.word	0x42420440

08001d54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b08d      	sub	sp, #52	; 0x34
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001d5e:	f107 040c 	add.w	r4, r7, #12
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	f240 2301 	movw	r3, #513	; 0x201
 8001d6c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d00a      	beq.n	8001d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	f200 8091 	bhi.w	8001eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d04c      	beq.n	8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d07c      	beq.n	8001e96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d9c:	e089      	b.n	8001eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001da4:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8082 	beq.w	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dc4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d018      	beq.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c5b      	lsrs	r3, r3, #17
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001df0:	4a37      	ldr	r2, [pc, #220]	; (8001ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	e004      	b.n	8001e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e18:	d102      	bne.n	8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e1e:	e04a      	b.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e2e:	e042      	b.n	8001eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d108      	bne.n	8001e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e52:	e01f      	b.n	8001e94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001e6c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e72:	e00f      	b.n	8001e94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e7e:	d11c      	bne.n	8001eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001e8c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e92:	e012      	b.n	8001eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001e94:	e011      	b.n	8001eba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e96:	f7ff fe45 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0b9b      	lsrs	r3, r3, #14
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001eb0:	e004      	b.n	8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e002      	b.n	8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001eba:	bf00      	nop
    }
  }
  return (frequency);
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3734      	adds	r7, #52	; 0x34
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	08004dc4 	.word	0x08004dc4
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	003d0900 	.word	0x003d0900
 8001ed8:	aaaaaaab 	.word	0xaaaaaaab

08001edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f839 	bl	8001f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 f9b4 	bl	8002288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d001      	beq.n	8001fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e03a      	b.n	800201a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_TIM_Base_Start_IT+0x98>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x58>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d009      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x58>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_TIM_Base_Start_IT+0x9c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x58>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_TIM_Base_Start_IT+0xa0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d010      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002006:	e007      	b.n	8002018 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0202 	mvn.w	r2, #2
 800205c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8ed 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8e0 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8ef 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0204 	mvn.w	r2, #4
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8c3 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8b6 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8c5 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0208 	mvn.w	r2, #8
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f899 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f88c 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f89b 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b10      	cmp	r3, #16
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f86f 	bl	8002252 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f862 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f871 	bl	8002264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe f8d0 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8bf 	bl	800235e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f835 	bl	8002276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b20      	cmp	r3, #32
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b20      	cmp	r3, #32
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0220 	mvn.w	r2, #32
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f88a 	bl	800234c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a29      	ldr	r2, [pc, #164]	; (8002340 <TIM_Base_SetConfig+0xb8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00b      	beq.n	80022b8 <TIM_Base_SetConfig+0x30>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a6:	d007      	beq.n	80022b8 <TIM_Base_SetConfig+0x30>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a26      	ldr	r2, [pc, #152]	; (8002344 <TIM_Base_SetConfig+0xbc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0x30>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a25      	ldr	r2, [pc, #148]	; (8002348 <TIM_Base_SetConfig+0xc0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d108      	bne.n	80022ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <TIM_Base_SetConfig+0xb8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_Base_SetConfig+0x62>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <TIM_Base_SetConfig+0xbc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <TIM_Base_SetConfig+0xc0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <TIM_Base_SetConfig+0xb8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800

0800234c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002376:	f3ef 8305 	mrs	r3, IPSR
 800237a:	60bb      	str	r3, [r7, #8]
  return(result);
 800237c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10f      	bne.n	80023a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002382:	f3ef 8310 	mrs	r3, PRIMASK
 8002386:	607b      	str	r3, [r7, #4]
  return(result);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <osKernelInitialize+0x32>
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <osKernelInitialize+0x60>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d109      	bne.n	80023aa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002396:	f3ef 8311 	mrs	r3, BASEPRI
 800239a:	603b      	str	r3, [r7, #0]
  return(result);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023a2:	f06f 0305 	mvn.w	r3, #5
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e00c      	b.n	80023c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <osKernelInitialize+0x60>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <osKernelInitialize+0x60>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e002      	b.n	80023c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	2000002c 	.word	0x2000002c

080023d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023da:	f3ef 8305 	mrs	r3, IPSR
 80023de:	60bb      	str	r3, [r7, #8]
  return(result);
 80023e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ea:	607b      	str	r3, [r7, #4]
  return(result);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <osKernelStart+0x32>
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <osKernelStart+0x64>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d109      	bne.n	800240e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023fa:	f3ef 8311 	mrs	r3, BASEPRI
 80023fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002406:	f06f 0305 	mvn.w	r3, #5
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e00e      	b.n	800242c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <osKernelStart+0x64>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <osKernelStart+0x64>)
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800241c:	f001 f878 	bl	8003510 <vTaskStartScheduler>
      stat = osOK;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e002      	b.n	800242c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000002c 	.word	0x2000002c

0800243c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af04      	add	r7, sp, #16
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800244c:	f3ef 8305 	mrs	r3, IPSR
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8094 	bne.w	8002582 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245a:	f3ef 8310 	mrs	r3, PRIMASK
 800245e:	623b      	str	r3, [r7, #32]
  return(result);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 808d 	bne.w	8002582 <osThreadNew+0x146>
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <osThreadNew+0x150>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d106      	bne.n	800247e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002470:	f3ef 8311 	mrs	r3, BASEPRI
 8002474:	61fb      	str	r3, [r7, #28]
  return(result);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8082 	bne.w	8002582 <osThreadNew+0x146>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d07e      	beq.n	8002582 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002488:	2318      	movs	r3, #24
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800248c:	2300      	movs	r3, #0
 800248e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002490:	f107 031b 	add.w	r3, r7, #27
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d045      	beq.n	800252e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <osThreadNew+0x74>
        name = attr->name;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <osThreadNew+0x9a>
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b38      	cmp	r3, #56	; 0x38
 80024c8:	d805      	bhi.n	80024d6 <osThreadNew+0x9a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <osThreadNew+0x9e>
        return (NULL);
 80024d6:	2300      	movs	r3, #0
 80024d8:	e054      	b.n	8002584 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <osThreadNew+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b5b      	cmp	r3, #91	; 0x5b
 80024f8:	d90a      	bls.n	8002510 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <osThreadNew+0xd4>
        mem = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
 800250e:	e010      	b.n	8002532 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10c      	bne.n	8002532 <osThreadNew+0xf6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <osThreadNew+0xf6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <osThreadNew+0xf6>
          mem = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
 800252c:	e001      	b.n	8002532 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	2b01      	cmp	r3, #1
 8002536:	d110      	bne.n	800255a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002540:	9202      	str	r2, [sp, #8]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fe12 	bl	8003178 <xTaskCreateStatic>
 8002554:	4603      	mov	r3, r0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e013      	b.n	8002582 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d110      	bne.n	8002582 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	b29a      	uxth	r2, r3
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fe5c 	bl	8003230 <xTaskCreate>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <osThreadNew+0x146>
          hTask = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002582:	697b      	ldr	r3, [r7, #20]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3738      	adds	r7, #56	; 0x38
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000002c 	.word	0x2000002c

08002590 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002598:	f3ef 8305 	mrs	r3, IPSR
 800259c:	613b      	str	r3, [r7, #16]
  return(result);
 800259e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a4:	f3ef 8310 	mrs	r3, PRIMASK
 80025a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <osDelay+0x34>
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <osDelay+0x58>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d109      	bne.n	80025cc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025b8:	f3ef 8311 	mrs	r3, BASEPRI
 80025bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <osDelay+0x3c>
    stat = osErrorISR;
 80025c4:	f06f 0305 	mvn.w	r3, #5
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e007      	b.n	80025dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 ff66 	bl	80034a8 <vTaskDelay>
    }
  }

  return (stat);
 80025dc:	697b      	ldr	r3, [r7, #20]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000002c 	.word	0x2000002c

080025ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a06      	ldr	r2, [pc, #24]	; (8002614 <vApplicationGetIdleTaskMemory+0x28>)
 80025fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <vApplicationGetIdleTaskMemory+0x2c>)
 8002602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	20000030 	.word	0x20000030
 8002618:	2000008c 	.word	0x2000008c

0800261c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <vApplicationGetTimerTaskMemory+0x2c>)
 800262c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <vApplicationGetTimerTaskMemory+0x30>)
 8002632:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	2000028c 	.word	0x2000028c
 800264c:	200002e8 	.word	0x200002e8

08002650 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0208 	add.w	r2, r3, #8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002668:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f103 0208 	add.w	r2, r3, #8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 0208 	add.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002702:	d103      	bne.n	800270c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e00c      	b.n	8002726 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3308      	adds	r3, #8
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	e002      	b.n	800271a <vListInsert+0x2e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	d2f6      	bcs.n	8002714 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6892      	ldr	r2, [r2, #8]
 8002772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	429a      	cmp	r2, r3
 8002786:	d103      	bne.n	8002790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
	...

080027b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027d6:	bf00      	nop
 80027d8:	e7fe      	b.n	80027d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027da:	f001 ffc7 	bl	800476c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	441a      	add	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	3b01      	subs	r3, #1
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	441a      	add	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	22ff      	movs	r2, #255	; 0xff
 8002826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d114      	bne.n	800285a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01a      	beq.n	800286e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3310      	adds	r3, #16
 800283c:	4618      	mov	r0, r3
 800283e:	f001 f8f1 	bl	8003a24 <xTaskRemoveFromEventList>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d012      	beq.n	800286e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <xQueueGenericReset+0xcc>)
 800284a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	e009      	b.n	800286e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3310      	adds	r3, #16
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fef6 	bl	8002650 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fef1 	bl	8002650 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800286e:	f001 ffad 	bl	80047cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <xQueueGenericCreateStatic+0x52>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <xQueueGenericCreateStatic+0x56>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <xQueueGenericCreateStatic+0x58>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	623b      	str	r3, [r7, #32]
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <xQueueGenericCreateStatic+0x7e>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <xQueueGenericCreateStatic+0x82>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <xQueueGenericCreateStatic+0x84>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	61fb      	str	r3, [r7, #28]
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800291e:	2350      	movs	r3, #80	; 0x50
 8002920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d00a      	beq.n	800293e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	61bb      	str	r3, [r7, #24]
}
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002950:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f805 	bl	800296e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002966:	4618      	mov	r0, r3
 8002968:	3730      	adds	r7, #48	; 0x30
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e002      	b.n	8002990 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800299c:	2101      	movs	r1, #1
 800299e:	69b8      	ldr	r0, [r7, #24]
 80029a0:	f7ff ff06 	bl	80027b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029c2:	2300      	movs	r3, #0
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xQueueGenericSend+0x32>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <xQueueGenericSend+0x40>
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <xQueueGenericSend+0x44>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <xQueueGenericSend+0x46>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <xQueueGenericSend+0x60>
	__asm volatile
 80029fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a10:	bf00      	nop
 8002a12:	e7fe      	b.n	8002a12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d103      	bne.n	8002a22 <xQueueGenericSend+0x6e>
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <xQueueGenericSend+0x72>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <xQueueGenericSend+0x74>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	623b      	str	r3, [r7, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a42:	f001 f9b1 	bl	8003da8 <xTaskGetSchedulerState>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <xQueueGenericSend+0x9e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericSend+0xa2>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericSend+0xa4>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61fb      	str	r3, [r7, #28]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a72:	f001 fe7b 	bl	800476c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <xQueueGenericSend+0xd4>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d129      	bne.n	8002adc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a8e:	f000 fa07 	bl	8002ea0 <prvCopyDataToQueue>
 8002a92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 ffbf 	bl	8003a24 <xTaskRemoveFromEventList>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <xQueueGenericSend+0x1f8>)
 8002aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	e00a      	b.n	8002ad4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ac4:	4b39      	ldr	r3, [pc, #228]	; (8002bac <xQueueGenericSend+0x1f8>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ad4:	f001 fe7a 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e063      	b.n	8002ba4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ae2:	f001 fe73 	bl	80047cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e05c      	b.n	8002ba4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fff9 	bl	8003aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002afe:	f001 fe65 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b02:	f000 fd6b 	bl	80035dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b06:	f001 fe31 	bl	800476c <vPortEnterCritical>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b16:	d103      	bne.n	8002b20 <xQueueGenericSend+0x16c>
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2c:	d103      	bne.n	8002b36 <xQueueGenericSend+0x182>
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b36:	f001 fe49 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b3a:	1d3a      	adds	r2, r7, #4
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 ffe8 	bl	8003b18 <xTaskCheckForTimeOut>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d124      	bne.n	8002b98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b50:	f000 fa9e 	bl	8003090 <prvIsQueueFull>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 ff0e 	bl	8003984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6a:	f000 fa29 	bl	8002fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b6e:	f000 fd43 	bl	80035f8 <xTaskResumeAll>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f47f af7c 	bne.w	8002a72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <xQueueGenericSend+0x1f8>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	e772      	b.n	8002a72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b8e:	f000 fa17 	bl	8002fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b92:	f000 fd31 	bl	80035f8 <xTaskResumeAll>
 8002b96:	e76c      	b.n	8002a72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9a:	f000 fa11 	bl	8002fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b9e:	f000 fd2b 	bl	80035f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ba2:	2300      	movs	r3, #0
		}
	}
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <xQueueGenericSendFromISR+0x3c>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xQueueGenericSendFromISR+0x40>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <xQueueGenericSendFromISR+0x42>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	623b      	str	r3, [r7, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <xQueueGenericSendFromISR+0x6a>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSendFromISR+0x6e>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericSendFromISR+0x70>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c3a:	f001 fe59 	bl	80048f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	61ba      	str	r2, [r7, #24]
 8002c54:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c56:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <xQueueGenericSendFromISR+0xbc>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d12c      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7c:	f000 f910 	bl	8002ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d112      	bne.n	8002cb0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	3324      	adds	r3, #36	; 0x24
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fec4 	bl	8003a24 <xTaskRemoveFromEventList>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002cc4:	e001      	b.n	8002cca <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3738      	adds	r7, #56	; 0x38
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xQueueReceive+0x30>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	623b      	str	r3, [r7, #32]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <xQueueReceive+0x3e>
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <xQueueReceive+0x42>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <xQueueReceive+0x44>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueReceive+0x5e>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61fb      	str	r3, [r7, #28]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d3e:	f001 f833 	bl	8003da8 <xTaskGetSchedulerState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xQueueReceive+0x6e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <xQueueReceive+0x72>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <xQueueReceive+0x74>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <xQueueReceive+0x8e>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61bb      	str	r3, [r7, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d6e:	f001 fcfd 	bl	800476c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01f      	beq.n	8002dbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d82:	f000 f8f7 	bl	8002f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00f      	beq.n	8002db6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	3310      	adds	r3, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fe42 	bl	8003a24 <xTaskRemoveFromEventList>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <xQueueReceive+0x1bc>)
 8002da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002db6:	f001 fd09 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e069      	b.n	8002e92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dc4:	f001 fd02 	bl	80047cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e062      	b.n	8002e92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fe88 	bl	8003aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002de0:	f001 fcf4 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002de4:	f000 fbfa 	bl	80035dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002de8:	f001 fcc0 	bl	800476c <vPortEnterCritical>
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df8:	d103      	bne.n	8002e02 <xQueueReceive+0x122>
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0e:	d103      	bne.n	8002e18 <xQueueReceive+0x138>
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e18:	f001 fcd8 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e1c:	1d3a      	adds	r2, r7, #4
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fe77 	bl	8003b18 <xTaskCheckForTimeOut>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d123      	bne.n	8002e78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 f917 	bl	8003064 <prvIsQueueEmpty>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	3324      	adds	r3, #36	; 0x24
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fd9d 	bl	8003984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4c:	f000 f8b8 	bl	8002fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e50:	f000 fbd2 	bl	80035f8 <xTaskResumeAll>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d189      	bne.n	8002d6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <xQueueReceive+0x1bc>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	e780      	b.n	8002d6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e6e:	f000 f8a7 	bl	8002fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e72:	f000 fbc1 	bl	80035f8 <xTaskResumeAll>
 8002e76:	e77a      	b.n	8002d6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7a:	f000 f8a1 	bl	8002fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e7e:	f000 fbbb 	bl	80035f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e84:	f000 f8ee 	bl	8003064 <prvIsQueueEmpty>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f43f af6f 	beq.w	8002d6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3730      	adds	r7, #48	; 0x30
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d14d      	bne.n	8002f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 ff8a 	bl	8003de4 <xTaskPriorityDisinherit>
 8002ed0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	e043      	b.n	8002f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d119      	bne.n	8002f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6898      	ldr	r0, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	f001 ff3a 	bl	8004d64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	441a      	add	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d32b      	bcc.n	8002f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e026      	b.n	8002f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68d8      	ldr	r0, [r3, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	f001 ff20 	bl	8004d64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d207      	bcs.n	8002f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	425b      	negs	r3, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d105      	bne.n	8002f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f6a:	697b      	ldr	r3, [r7, #20]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	441a      	add	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d303      	bcc.n	8002fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	f001 fed6 	bl	8004d64 <memcpy>
	}
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fc8:	f001 fbd0 	bl	800476c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fd4:	e011      	b.n	8002ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d012      	beq.n	8003004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3324      	adds	r3, #36	; 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fd1e 	bl	8003a24 <xTaskRemoveFromEventList>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fee:	f000 fdf5 	bl	8003bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	dce9      	bgt.n	8002fd6 <prvUnlockQueue+0x16>
 8003002:	e000      	b.n	8003006 <prvUnlockQueue+0x46>
					break;
 8003004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800300e:	f001 fbdd 	bl	80047cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003012:	f001 fbab 	bl	800476c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800301c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800301e:	e011      	b.n	8003044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fcf9 	bl	8003a24 <xTaskRemoveFromEventList>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003038:	f000 fdd0 	bl	8003bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800303c:	7bbb      	ldrb	r3, [r7, #14]
 800303e:	3b01      	subs	r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003048:	2b00      	cmp	r3, #0
 800304a:	dce9      	bgt.n	8003020 <prvUnlockQueue+0x60>
 800304c:	e000      	b.n	8003050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800304e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	22ff      	movs	r2, #255	; 0xff
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003058:	f001 fbb8 	bl	80047cc <vPortExitCritical>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800306c:	f001 fb7e 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e001      	b.n	8003082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003082:	f001 fba3 	bl	80047cc <vPortExitCritical>

	return xReturn;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003098:	f001 fb68 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d102      	bne.n	80030ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e001      	b.n	80030b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030b2:	f001 fb8b 	bl	80047cc <vPortExitCritical>

	return xReturn;
 80030b6:	68fb      	ldr	r3, [r7, #12]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e014      	b.n	80030fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <vQueueAddToRegistry+0x4c>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030dc:	490b      	ldr	r1, [pc, #44]	; (800310c <vQueueAddToRegistry+0x4c>)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <vQueueAddToRegistry+0x4c>)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030f2:	e006      	b.n	8003102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b07      	cmp	r3, #7
 80030fe:	d9e7      	bls.n	80030d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	200019c0 	.word	0x200019c0

08003110 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003120:	f001 fb24 	bl	800476c <vPortEnterCritical>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800312a:	b25b      	sxtb	r3, r3
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003130:	d103      	bne.n	800313a <vQueueWaitForMessageRestricted+0x2a>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003140:	b25b      	sxtb	r3, r3
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003146:	d103      	bne.n	8003150 <vQueueWaitForMessageRestricted+0x40>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003150:	f001 fb3c 	bl	80047cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3324      	adds	r3, #36	; 0x24
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc31 	bl	80039cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff28 	bl	8002fc0 <prvUnlockQueue>
	}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	; 0x38
 800317c:	af04      	add	r7, sp, #16
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <xTaskCreateStatic+0x46>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	61fb      	str	r3, [r7, #28]
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031be:	235c      	movs	r3, #92	; 0x5c
 80031c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b5c      	cmp	r3, #92	; 0x5c
 80031c6:	d00a      	beq.n	80031de <xTaskCreateStatic+0x66>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	61bb      	str	r3, [r7, #24]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01e      	beq.n	8003222 <xTaskCreateStatic+0xaa>
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01b      	beq.n	8003222 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031fc:	2300      	movs	r3, #0
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f850 	bl	80032ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800321a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321c:	f000 f8d4 	bl	80033c8 <prvAddNewTaskToReadyList>
 8003220:	e001      	b.n	8003226 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003226:	697b      	ldr	r3, [r7, #20]
	}
 8003228:	4618      	mov	r0, r3
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	; 0x30
 8003234:	af04      	add	r7, sp, #16
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fb91 	bl	800496c <pvPortMalloc>
 800324a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00e      	beq.n	8003270 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003252:	205c      	movs	r0, #92	; 0x5c
 8003254:	f001 fb8a 	bl	800496c <pvPortMalloc>
 8003258:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
 8003266:	e005      	b.n	8003274 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003268:	6978      	ldr	r0, [r7, #20]
 800326a:	f001 fc43 	bl	8004af4 <vPortFree>
 800326e:	e001      	b.n	8003274 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	2300      	movs	r3, #0
 8003286:	9303      	str	r3, [sp, #12]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f80e 	bl	80032ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329e:	69f8      	ldr	r0, [r7, #28]
 80032a0:	f000 f892 	bl	80033c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	e002      	b.n	80032b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032b0:	69bb      	ldr	r3, [r7, #24]
	}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	21a5      	movs	r1, #165	; 0xa5
 80032d4:	f001 fd54 	bl	8004d80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032e2:	3b01      	subs	r3, #1
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	617b      	str	r3, [r7, #20]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e012      	b.n	800333e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	7819      	ldrb	r1, [r3, #0]
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	3334      	adds	r3, #52	; 0x34
 8003328:	460a      	mov	r2, r1
 800332a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d9e9      	bls.n	8003318 <prvInitialiseNewTask+0x5e>
 8003344:	e000      	b.n	8003348 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003346:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b37      	cmp	r3, #55	; 0x37
 8003354:	d901      	bls.n	800335a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003356:	2337      	movs	r3, #55	; 0x37
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2200      	movs	r2, #0
 800336a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3304      	adds	r3, #4
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f98c 	bl	800268e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	3318      	adds	r3, #24
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f987 	bl	800268e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003384:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	69b8      	ldr	r0, [r7, #24]
 80033aa:	f001 f8ef 	bl	800458c <pxPortInitialiseStack>
 80033ae:	4602      	mov	r2, r0
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c0:	bf00      	nop
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033d0:	f001 f9cc 	bl	800476c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <prvAddNewTaskToReadyList+0xc4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	4a2c      	ldr	r2, [pc, #176]	; (800348c <prvAddNewTaskToReadyList+0xc4>)
 80033dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <prvAddNewTaskToReadyList+0xc8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <prvAddNewTaskToReadyList+0xc8>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <prvAddNewTaskToReadyList+0xc4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d110      	bne.n	8003416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033f4:	f000 fc16 	bl	8003c24 <prvInitialiseTaskLists>
 80033f8:	e00d      	b.n	8003416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <prvAddNewTaskToReadyList+0xcc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <prvAddNewTaskToReadyList+0xc8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	429a      	cmp	r2, r3
 800340e:	d802      	bhi.n	8003416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003410:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <prvAddNewTaskToReadyList+0xc8>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <prvAddNewTaskToReadyList+0xd0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <prvAddNewTaskToReadyList+0xd0>)
 800341e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <prvAddNewTaskToReadyList+0xd0>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <prvAddNewTaskToReadyList+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d903      	bls.n	800343c <prvAddNewTaskToReadyList+0x74>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	4a18      	ldr	r2, [pc, #96]	; (800349c <prvAddNewTaskToReadyList+0xd4>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <prvAddNewTaskToReadyList+0xd8>)
 800344a:	441a      	add	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7ff f927 	bl	80026a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003458:	f001 f9b8 	bl	80047cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <prvAddNewTaskToReadyList+0xcc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <prvAddNewTaskToReadyList+0xc8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	429a      	cmp	r2, r3
 8003470:	d207      	bcs.n	8003482 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <prvAddNewTaskToReadyList+0xdc>)
 8003474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000bbc 	.word	0x20000bbc
 8003490:	200006e8 	.word	0x200006e8
 8003494:	20000bc8 	.word	0x20000bc8
 8003498:	20000bd8 	.word	0x20000bd8
 800349c:	20000bc4 	.word	0x20000bc4
 80034a0:	200006ec 	.word	0x200006ec
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d017      	beq.n	80034ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <vTaskDelay+0x60>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <vTaskDelay+0x30>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	60bb      	str	r3, [r7, #8]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034d8:	f000 f880 	bl	80035dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034dc:	2100      	movs	r1, #0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fcee 	bl	8003ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034e4:	f000 f888 	bl	80035f8 <xTaskResumeAll>
 80034e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <vTaskDelay+0x64>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000be4 	.word	0x20000be4
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800351e:	463a      	mov	r2, r7
 8003520:	1d39      	adds	r1, r7, #4
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff f860 	bl	80025ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	9202      	str	r2, [sp, #8]
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2300      	movs	r3, #0
 800353c:	460a      	mov	r2, r1
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <vTaskStartScheduler+0xb4>)
 8003540:	4821      	ldr	r0, [pc, #132]	; (80035c8 <vTaskStartScheduler+0xb8>)
 8003542:	f7ff fe19 	bl	8003178 <xTaskCreateStatic>
 8003546:	4603      	mov	r3, r0
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <vTaskStartScheduler+0xbc>)
 800354a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <vTaskStartScheduler+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e001      	b.n	800355e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d102      	bne.n	800356a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003564:	f000 fd00 	bl	8003f68 <xTimerCreateTimerTask>
 8003568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d116      	bne.n	800359e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	613b      	str	r3, [r7, #16]
}
 8003582:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <vTaskStartScheduler+0xc0>)
 8003586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800358a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <vTaskStartScheduler+0xc4>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <vTaskStartScheduler+0xc8>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003598:	f001 f876 	bl	8004688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800359c:	e00e      	b.n	80035bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a4:	d10a      	bne.n	80035bc <vTaskStartScheduler+0xac>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	60fb      	str	r3, [r7, #12]
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <vTaskStartScheduler+0xaa>
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	08004dd4 	.word	0x08004dd4
 80035c8:	08003bf5 	.word	0x08003bf5
 80035cc:	20000be0 	.word	0x20000be0
 80035d0:	20000bdc 	.word	0x20000bdc
 80035d4:	20000bc8 	.word	0x20000bc8
 80035d8:	20000bc0 	.word	0x20000bc0

080035dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000be4 	.word	0x20000be4

080035f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <xTaskResumeAll+0x118>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <xTaskResumeAll+0x2c>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	603b      	str	r3, [r7, #0]
}
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003624:	f001 f8a2 	bl	800476c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <xTaskResumeAll+0x118>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a38      	ldr	r2, [pc, #224]	; (8003710 <xTaskResumeAll+0x118>)
 8003630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <xTaskResumeAll+0x118>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d162      	bne.n	8003700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <xTaskResumeAll+0x11c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d05e      	beq.n	8003700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003642:	e02f      	b.n	80036a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <xTaskResumeAll+0x120>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3318      	adds	r3, #24
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f883 	bl	800275c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3304      	adds	r3, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f87e 	bl	800275c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <xTaskResumeAll+0x124>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d903      	bls.n	8003674 <xTaskResumeAll+0x7c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <xTaskResumeAll+0x124>)
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <xTaskResumeAll+0x128>)
 8003682:	441a      	add	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f7ff f80b 	bl	80026a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <xTaskResumeAll+0x12c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <xTaskResumeAll+0x130>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <xTaskResumeAll+0x120>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cb      	bne.n	8003644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036b2:	f000 fb55 	bl	8003d60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <xTaskResumeAll+0x134>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036c2:	f000 f845 	bl	8003750 <xTaskIncrementTick>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <xTaskResumeAll+0x130>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f1      	bne.n	80036c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <xTaskResumeAll+0x134>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <xTaskResumeAll+0x130>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <xTaskResumeAll+0x138>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003700:	f001 f864 	bl	80047cc <vPortExitCritical>

	return xAlreadyYielded;
 8003704:	68bb      	ldr	r3, [r7, #8]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000be4 	.word	0x20000be4
 8003714:	20000bbc 	.word	0x20000bbc
 8003718:	20000b7c 	.word	0x20000b7c
 800371c:	20000bc4 	.word	0x20000bc4
 8003720:	200006ec 	.word	0x200006ec
 8003724:	200006e8 	.word	0x200006e8
 8003728:	20000bd0 	.word	0x20000bd0
 800372c:	20000bcc 	.word	0x20000bcc
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <xTaskGetTickCount+0x18>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	20000bc0 	.word	0x20000bc0

08003750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <xTaskIncrementTick+0x150>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 808e 	bne.w	8003880 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <xTaskIncrementTick+0x154>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <xTaskIncrementTick+0x154>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d120      	bne.n	80037ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <xTaskIncrementTick+0x158>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <xTaskIncrementTick+0x48>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskIncrementTick+0x46>
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <xTaskIncrementTick+0x158>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4a41      	ldr	r2, [pc, #260]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a3f      	ldr	r2, [pc, #252]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	f000 fad3 	bl	8003d60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d34e      	bcc.n	8003862 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c4:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xTaskIncrementTick+0x82>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xTaskIncrementTick+0x84>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037de:	601a      	str	r2, [r3, #0]
					break;
 80037e0:	e03f      	b.n	8003862 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d203      	bcs.n	8003802 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037fa:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]
						break;
 8003800:	e02f      	b.n	8003862 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe ffa8 	bl	800275c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3318      	adds	r3, #24
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe ff9f 	bl	800275c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d903      	bls.n	8003832 <xTaskIncrementTick+0xe2>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <xTaskIncrementTick+0x16c>)
 8003840:	441a      	add	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe ff2c 	bl	80026a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d3b3      	bcc.n	80037c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003860:	e7b0      	b.n	80037c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4914      	ldr	r1, [pc, #80]	; (80038bc <xTaskIncrementTick+0x16c>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d907      	bls.n	800388a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e004      	b.n	800388a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003888:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskIncrementTick+0x178>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000be4 	.word	0x20000be4
 80038a4:	20000bc0 	.word	0x20000bc0
 80038a8:	20000b74 	.word	0x20000b74
 80038ac:	20000b78 	.word	0x20000b78
 80038b0:	20000bd4 	.word	0x20000bd4
 80038b4:	20000bdc 	.word	0x20000bdc
 80038b8:	20000bc4 	.word	0x20000bc4
 80038bc:	200006ec 	.word	0x200006ec
 80038c0:	200006e8 	.word	0x200006e8
 80038c4:	20000bcc 	.word	0x20000bcc
 80038c8:	20000bd0 	.word	0x20000bd0

080038cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <vTaskSwitchContext+0xa4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038da:	4b26      	ldr	r3, [pc, #152]	; (8003974 <vTaskSwitchContext+0xa8>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e0:	e041      	b.n	8003966 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <vTaskSwitchContext+0xa8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <vTaskSwitchContext+0xac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e010      	b.n	8003912 <vTaskSwitchContext+0x46>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <vTaskSwitchContext+0x40>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	607b      	str	r3, [r7, #4]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <vTaskSwitchContext+0x3e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b01      	subs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	491a      	ldr	r1, [pc, #104]	; (800397c <vTaskSwitchContext+0xb0>)
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0e4      	beq.n	80038f0 <vTaskSwitchContext+0x24>
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <vTaskSwitchContext+0xb0>)
 8003932:	4413      	add	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3308      	adds	r3, #8
 8003948:	429a      	cmp	r2, r3
 800394a:	d104      	bne.n	8003956 <vTaskSwitchContext+0x8a>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <vTaskSwitchContext+0xb4>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4a05      	ldr	r2, [pc, #20]	; (8003978 <vTaskSwitchContext+0xac>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	20000be4 	.word	0x20000be4
 8003974:	20000bd0 	.word	0x20000bd0
 8003978:	20000bc4 	.word	0x20000bc4
 800397c:	200006ec 	.word	0x200006ec
 8003980:	200006e8 	.word	0x200006e8

08003984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60fb      	str	r3, [r7, #12]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <vTaskPlaceOnEventList+0x44>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3318      	adds	r3, #24
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fe9a 	bl	80026ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039b8:	2101      	movs	r1, #1
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f000 fa80 	bl	8003ec0 <prvAddCurrentTaskToDelayedList>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200006e8 	.word	0x200006e8

080039cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	617b      	str	r3, [r7, #20]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <vTaskPlaceOnEventListRestricted+0x54>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3318      	adds	r3, #24
 80039fa:	4619      	mov	r1, r3
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7fe fe52 	bl	80026a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f000 fa55 	bl	8003ec0 <prvAddCurrentTaskToDelayedList>
	}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200006e8 	.word	0x200006e8

08003a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60fb      	str	r3, [r7, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3318      	adds	r3, #24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fe81 	bl	800275c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <xTaskRemoveFromEventList+0xb0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d11d      	bne.n	8003a9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fe78 	bl	800275c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <xTaskRemoveFromEventList+0xb4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d903      	bls.n	8003a80 <xTaskRemoveFromEventList+0x5c>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <xTaskRemoveFromEventList+0xb4>)
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <xTaskRemoveFromEventList+0xb8>)
 8003a8e:	441a      	add	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f7fe fe05 	bl	80026a6 <vListInsertEnd>
 8003a9c:	e005      	b.n	8003aaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <xTaskRemoveFromEventList+0xbc>)
 8003aa6:	f7fe fdfe 	bl	80026a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <xTaskRemoveFromEventList+0xc0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d905      	bls.n	8003ac4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <xTaskRemoveFromEventList+0xc4>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e001      	b.n	8003ac8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ac8:	697b      	ldr	r3, [r7, #20]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000be4 	.word	0x20000be4
 8003ad8:	20000bc4 	.word	0x20000bc4
 8003adc:	200006ec 	.word	0x200006ec
 8003ae0:	20000b7c 	.word	0x20000b7c
 8003ae4:	200006e8 	.word	0x200006e8
 8003ae8:	20000bd0 	.word	0x20000bd0

08003aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <vTaskInternalSetTimeOutState+0x24>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <vTaskInternalSetTimeOutState+0x28>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	605a      	str	r2, [r3, #4]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000bd4 	.word	0x20000bd4
 8003b14:	20000bc0 	.word	0x20000bc0

08003b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60fb      	str	r3, [r7, #12]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b5a:	f000 fe07 	bl	800476c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <xTaskCheckForTimeOut+0xbc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b76:	d102      	bne.n	8003b7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	e023      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <xTaskCheckForTimeOut+0xc0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d007      	beq.n	8003b9a <xTaskCheckForTimeOut+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e015      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d20b      	bcs.n	8003bbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff9b 	bl	8003aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	e004      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bc6:	f000 fe01 	bl	80047cc <vPortExitCritical>

	return xReturn;
 8003bca:	69fb      	ldr	r3, [r7, #28]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000bc0 	.word	0x20000bc0
 8003bd8:	20000bd4 	.word	0x20000bd4

08003bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <vTaskMissedYield+0x14>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000bd0 	.word	0x20000bd0

08003bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bfc:	f000 f852 	bl	8003ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <prvIdleTask+0x28>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d9f9      	bls.n	8003bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <prvIdleTask+0x2c>)
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c18:	e7f0      	b.n	8003bfc <prvIdleTask+0x8>
 8003c1a:	bf00      	nop
 8003c1c:	200006ec 	.word	0x200006ec
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e00c      	b.n	8003c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <prvInitialiseTaskLists+0x60>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fd06 	bl	8002650 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3301      	adds	r3, #1
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b37      	cmp	r3, #55	; 0x37
 8003c4e:	d9ef      	bls.n	8003c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <prvInitialiseTaskLists+0x64>)
 8003c52:	f7fe fcfd 	bl	8002650 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c56:	480d      	ldr	r0, [pc, #52]	; (8003c8c <prvInitialiseTaskLists+0x68>)
 8003c58:	f7fe fcfa 	bl	8002650 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <prvInitialiseTaskLists+0x6c>)
 8003c5e:	f7fe fcf7 	bl	8002650 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c62:	480c      	ldr	r0, [pc, #48]	; (8003c94 <prvInitialiseTaskLists+0x70>)
 8003c64:	f7fe fcf4 	bl	8002650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c68:	480b      	ldr	r0, [pc, #44]	; (8003c98 <prvInitialiseTaskLists+0x74>)
 8003c6a:	f7fe fcf1 	bl	8002650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <prvInitialiseTaskLists+0x78>)
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <prvInitialiseTaskLists+0x64>)
 8003c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvInitialiseTaskLists+0x7c>)
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <prvInitialiseTaskLists+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	200006ec 	.word	0x200006ec
 8003c88:	20000b4c 	.word	0x20000b4c
 8003c8c:	20000b60 	.word	0x20000b60
 8003c90:	20000b7c 	.word	0x20000b7c
 8003c94:	20000b90 	.word	0x20000b90
 8003c98:	20000ba8 	.word	0x20000ba8
 8003c9c:	20000b74 	.word	0x20000b74
 8003ca0:	20000b78 	.word	0x20000b78

08003ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003caa:	e019      	b.n	8003ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cac:	f000 fd5e 	bl	800476c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <prvCheckTasksWaitingTermination+0x50>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fd4d 	bl	800275c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <prvCheckTasksWaitingTermination+0x54>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <prvCheckTasksWaitingTermination+0x54>)
 8003cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cd6:	f000 fd79 	bl	80047cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f810 	bl	8003d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e1      	bne.n	8003cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000b90 	.word	0x20000b90
 8003cf8:	20000bbc 	.word	0x20000bbc
 8003cfc:	20000ba4 	.word	0x20000ba4

08003d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 feec 	bl	8004af4 <vPortFree>
				vPortFree( pxTCB );
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fee9 	bl	8004af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d22:	e018      	b.n	8003d56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d103      	bne.n	8003d36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fee0 	bl	8004af4 <vPortFree>
	}
 8003d34:	e00f      	b.n	8003d56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d00a      	beq.n	8003d56 <prvDeleteTCB+0x56>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <prvDeleteTCB+0x54>
	}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <prvResetNextTaskUnblockTime+0x40>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <prvResetNextTaskUnblockTime+0x14>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <prvResetNextTaskUnblockTime+0x16>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <prvResetNextTaskUnblockTime+0x44>)
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d82:	e008      	b.n	8003d96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <prvResetNextTaskUnblockTime+0x40>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <prvResetNextTaskUnblockTime+0x44>)
 8003d94:	6013      	str	r3, [r2, #0]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	20000b74 	.word	0x20000b74
 8003da4:	20000bdc 	.word	0x20000bdc

08003da8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <xTaskGetSchedulerState+0x34>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003db6:	2301      	movs	r3, #1
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	e008      	b.n	8003dce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <xTaskGetSchedulerState+0x38>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	e001      	b.n	8003dce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dce:	687b      	ldr	r3, [r7, #4]
	}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000bc8 	.word	0x20000bc8
 8003de0:	20000be4 	.word	0x20000be4

08003de4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d056      	beq.n	8003ea8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	; (8003eb4 <xTaskPriorityDisinherit+0xd0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d00a      	beq.n	8003e1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60bb      	str	r3, [r7, #8]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d02c      	beq.n	8003ea8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d128      	bne.n	8003ea8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fc7e 	bl	800275c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <xTaskPriorityDisinherit+0xd4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d903      	bls.n	8003e88 <xTaskPriorityDisinherit+0xa4>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <xTaskPriorityDisinherit+0xd4>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <xTaskPriorityDisinherit+0xd8>)
 8003e96:	441a      	add	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fc01 	bl	80026a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ea8:	697b      	ldr	r3, [r7, #20]
	}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200006e8 	.word	0x200006e8
 8003eb8:	20000bc4 	.word	0x20000bc4
 8003ebc:	200006ec 	.word	0x200006ec

08003ec0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed0:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fc40 	bl	800275c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee2:	d10a      	bne.n	8003efa <prvAddCurrentTaskToDelayedList+0x3a>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4819      	ldr	r0, [pc, #100]	; (8003f58 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ef4:	f7fe fbd7 	bl	80026a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ef8:	e026      	b.n	8003f48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d209      	bcs.n	8003f26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f7fe fbe4 	bl	80026ec <vListInsert>
}
 8003f24:	e010      	b.n	8003f48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fe fbda 	bl	80026ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d202      	bcs.n	8003f48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000bc0 	.word	0x20000bc0
 8003f54:	200006e8 	.word	0x200006e8
 8003f58:	20000ba8 	.word	0x20000ba8
 8003f5c:	20000b78 	.word	0x20000b78
 8003f60:	20000b74 	.word	0x20000b74
 8003f64:	20000bdc 	.word	0x20000bdc

08003f68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f72:	f000 facb 	bl	800450c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <xTimerCreateTimerTask+0x80>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d021      	beq.n	8003fc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	f107 0108 	add.w	r1, r7, #8
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fb43 	bl	800261c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	9202      	str	r2, [sp, #8]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	4910      	ldr	r1, [pc, #64]	; (8003fec <xTimerCreateTimerTask+0x84>)
 8003faa:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <xTimerCreateTimerTask+0x88>)
 8003fac:	f7ff f8e4 	bl	8003178 <xTaskCreateStatic>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <xTimerCreateTimerTask+0x8c>)
 8003fb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <xTimerCreateTimerTask+0x8c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	613b      	str	r3, [r7, #16]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000c18 	.word	0x20000c18
 8003fec:	08004ddc 	.word	0x08004ddc
 8003ff0:	08004115 	.word	0x08004115
 8003ff4:	20000c1c 	.word	0x20000c1c

08003ff8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	623b      	str	r3, [r7, #32]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <xTimerGenericCommand+0x98>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02a      	beq.n	8004084 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b05      	cmp	r3, #5
 800403e:	dc18      	bgt.n	8004072 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004040:	f7ff feb2 	bl	8003da8 <xTaskGetSchedulerState>
 8004044:	4603      	mov	r3, r0
 8004046:	2b02      	cmp	r3, #2
 8004048:	d109      	bne.n	800405e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <xTimerGenericCommand+0x98>)
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f107 0110 	add.w	r1, r7, #16
 8004052:	2300      	movs	r3, #0
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	f7fe fcad 	bl	80029b4 <xQueueGenericSend>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24
 800405c:	e012      	b.n	8004084 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <xTimerGenericCommand+0x98>)
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f107 0110 	add.w	r1, r7, #16
 8004066:	2300      	movs	r3, #0
 8004068:	2200      	movs	r2, #0
 800406a:	f7fe fca3 	bl	80029b4 <xQueueGenericSend>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24
 8004070:	e008      	b.n	8004084 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <xTimerGenericCommand+0x98>)
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f107 0110 	add.w	r1, r7, #16
 800407a:	2300      	movs	r3, #0
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	f7fe fd97 	bl	8002bb0 <xQueueGenericSendFromISR>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004086:	4618      	mov	r0, r3
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000c18 	.word	0x20000c18

08004094 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <prvProcessExpiredTimer+0x7c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fb55 	bl	800275c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d122      	bne.n	8004100 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	18d1      	adds	r1, r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	6978      	ldr	r0, [r7, #20]
 80040c8:	f000 f8c8 	bl	800425c <prvInsertTimerInActiveList>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040d2:	2300      	movs	r3, #0
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2300      	movs	r3, #0
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	2100      	movs	r1, #0
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	f7ff ff8b 	bl	8003ff8 <xTimerGenericCommand>
 80040e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	4798      	blx	r3
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000c10 	.word	0x20000c10

08004114 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f857 	bl	80041d4 <prvGetNextExpireTime>
 8004126:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4619      	mov	r1, r3
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f803 	bl	8004138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004132:	f000 f8d5 	bl	80042e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004136:	e7f1      	b.n	800411c <prvTimerTask+0x8>

08004138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004142:	f7ff fa4b 	bl	80035dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f866 	bl	800421c <prvSampleTimeNow>
 8004150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d130      	bne.n	80041ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <prvProcessTimerOrBlockTask+0x3c>
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	429a      	cmp	r2, r3
 8004164:	d806      	bhi.n	8004174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004166:	f7ff fa47 	bl	80035f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff91 	bl	8004094 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004172:	e024      	b.n	80041be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <prvProcessTimerOrBlockTask+0x90>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <prvProcessTimerOrBlockTask+0x94>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	f7fe ffb9 	bl	8003110 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800419e:	f7ff fa2b 	bl	80035f8 <xTaskResumeAll>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <prvProcessTimerOrBlockTask+0x98>)
 80041aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	f3bf 8f6f 	isb	sy
}
 80041b8:	e001      	b.n	80041be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041ba:	f7ff fa1d 	bl	80035f8 <xTaskResumeAll>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000c14 	.word	0x20000c14
 80041cc:	20000c18 	.word	0x20000c18
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <prvGetNextExpireTime+0x44>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <prvGetNextExpireTime+0x44>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e001      	b.n	800420a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000c10 	.word	0x20000c10

0800421c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004224:	f7ff fa86 	bl	8003734 <xTaskGetTickCount>
 8004228:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <prvSampleTimeNow+0x3c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d205      	bcs.n	8004240 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004234:	f000 f908 	bl	8004448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e002      	b.n	8004246 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <prvSampleTimeNow+0x3c>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000c20 	.word	0x20000c20

0800425c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d812      	bhi.n	80042a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e01b      	b.n	80042ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <prvInsertTimerInActiveList+0x7c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe fa23 	bl	80026ec <vListInsert>
 80042a6:	e012      	b.n	80042ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d206      	bcs.n	80042be <prvInsertTimerInActiveList+0x62>
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e007      	b.n	80042ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <prvInsertTimerInActiveList+0x80>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fe fa0f 	bl	80026ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042ce:	697b      	ldr	r3, [r7, #20]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000c14 	.word	0x20000c14
 80042dc:	20000c10 	.word	0x20000c10

080042e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	; 0x38
 80042e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042e6:	e09d      	b.n	8004424 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da18      	bge.n	8004320 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	3304      	adds	r3, #4
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	61fb      	str	r3, [r7, #28]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	6850      	ldr	r0, [r2, #4]
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	6892      	ldr	r2, [r2, #8]
 800431c:	4611      	mov	r1, r2
 800431e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db7d      	blt.n	8004422 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fa10 	bl	800275c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800433c:	463b      	mov	r3, r7
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff6c 	bl	800421c <prvSampleTimeNow>
 8004344:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b09      	cmp	r3, #9
 800434a:	d86b      	bhi.n	8004424 <prvProcessReceivedCommands+0x144>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <prvProcessReceivedCommands+0x74>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	0800437d 	.word	0x0800437d
 8004358:	0800437d 	.word	0x0800437d
 800435c:	0800437d 	.word	0x0800437d
 8004360:	08004425 	.word	0x08004425
 8004364:	080043d9 	.word	0x080043d9
 8004368:	08004411 	.word	0x08004411
 800436c:	0800437d 	.word	0x0800437d
 8004370:	0800437d 	.word	0x0800437d
 8004374:	08004425 	.word	0x08004425
 8004378:	080043d9 	.word	0x080043d9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	18d1      	adds	r1, r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438a:	f7ff ff67 	bl	800425c <prvInsertTimerInActiveList>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d047      	beq.n	8004424 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d13f      	bne.n	8004424 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	441a      	add	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2300      	movs	r3, #0
 80043b2:	2100      	movs	r1, #0
 80043b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b6:	f7ff fe1f 	bl	8003ff8 <xTimerGenericCommand>
 80043ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d130      	bne.n	8004424 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61bb      	str	r3, [r7, #24]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	617b      	str	r3, [r7, #20]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	18d1      	adds	r1, r2, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440a:	f7ff ff27 	bl	800425c <prvInsertTimerInActiveList>
					break;
 800440e:	e009      	b.n	8004424 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441c:	f000 fb6a 	bl	8004af4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004420:	e000      	b.n	8004424 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004422:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvProcessReceivedCommands+0x164>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	1d39      	adds	r1, r7, #4
 800442a:	2200      	movs	r2, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe fc57 	bl	8002ce0 <xQueueReceive>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af57 	bne.w	80042e8 <prvProcessReceivedCommands+0x8>
	}
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	3730      	adds	r7, #48	; 0x30
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000c18 	.word	0x20000c18

08004448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444e:	e045      	b.n	80044dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <prvSwitchTimerLists+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <prvSwitchTimerLists+0xbc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe f977 	bl	800275c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d12e      	bne.n	80044dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	429a      	cmp	r2, r3
 800448e:	d90e      	bls.n	80044ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <prvSwitchTimerLists+0xbc>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe f920 	bl	80026ec <vListInsert>
 80044ac:	e016      	b.n	80044dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044ae:	2300      	movs	r3, #0
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	2100      	movs	r1, #0
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff fd9d 	bl	8003ff8 <xTimerGenericCommand>
 80044be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <prvSwitchTimerLists+0x94>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	603b      	str	r3, [r7, #0]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <prvSwitchTimerLists+0xbc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1b4      	bne.n	8004450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <prvSwitchTimerLists+0xbc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <prvSwitchTimerLists+0xc0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <prvSwitchTimerLists+0xbc>)
 80044f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <prvSwitchTimerLists+0xc0>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000c10 	.word	0x20000c10
 8004508:	20000c14 	.word	0x20000c14

0800450c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004512:	f000 f92b 	bl	800476c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d120      	bne.n	8004560 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800451e:	4814      	ldr	r0, [pc, #80]	; (8004570 <prvCheckForValidListAndQueue+0x64>)
 8004520:	f7fe f896 	bl	8002650 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004524:	4813      	ldr	r0, [pc, #76]	; (8004574 <prvCheckForValidListAndQueue+0x68>)
 8004526:	f7fe f893 	bl	8002650 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <prvCheckForValidListAndQueue+0x6c>)
 800452c:	4a10      	ldr	r2, [pc, #64]	; (8004570 <prvCheckForValidListAndQueue+0x64>)
 800452e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <prvCheckForValidListAndQueue+0x70>)
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <prvCheckForValidListAndQueue+0x68>)
 8004534:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004536:	2300      	movs	r3, #0
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <prvCheckForValidListAndQueue+0x74>)
 800453c:	4a11      	ldr	r2, [pc, #68]	; (8004584 <prvCheckForValidListAndQueue+0x78>)
 800453e:	2110      	movs	r1, #16
 8004540:	200a      	movs	r0, #10
 8004542:	f7fe f99d 	bl	8002880 <xQueueGenericCreateStatic>
 8004546:	4603      	mov	r3, r0
 8004548:	4a08      	ldr	r2, [pc, #32]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 800454a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <prvCheckForValidListAndQueue+0x60>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	490b      	ldr	r1, [pc, #44]	; (8004588 <prvCheckForValidListAndQueue+0x7c>)
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fdb0 	bl	80030c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004560:	f000 f934 	bl	80047cc <vPortExitCritical>
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000c18 	.word	0x20000c18
 8004570:	20000be8 	.word	0x20000be8
 8004574:	20000bfc 	.word	0x20000bfc
 8004578:	20000c10 	.word	0x20000c10
 800457c:	20000c14 	.word	0x20000c14
 8004580:	20000cc4 	.word	0x20000cc4
 8004584:	20000c24 	.word	0x20000c24
 8004588:	08004de4 	.word	0x08004de4

0800458c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b04      	subs	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3b04      	subs	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3b04      	subs	r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <pxPortInitialiseStack+0x54>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b14      	subs	r3, #20
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b20      	subs	r3, #32
 80045d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045d4:	68fb      	ldr	r3, [r7, #12]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	080045e5 	.word	0x080045e5

080045e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <prvTaskExitError+0x54>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f6:	d00a      	beq.n	800460e <prvTaskExitError+0x2a>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <prvTaskExitError+0x28>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
}
 8004620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004622:	bf00      	nop
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0fc      	beq.n	8004624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000000c 	.word	0x2000000c
 800463c:	00000000 	.word	0x00000000

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	f04e 0e0d 	orr.w	lr, lr, #13
 800465e:	4770      	bx	lr

08004660 <pxCurrentTCBConst2>:
 8004660:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004668:	4806      	ldr	r0, [pc, #24]	; (8004684 <prvPortStartFirstTask+0x1c>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	b662      	cpsie	i
 8004674:	b661      	cpsie	f
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	df00      	svc	0
 8004680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004682:	bf00      	nop
 8004684:	e000ed08 	.word	0xe000ed08

08004688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468e:	4b32      	ldr	r3, [pc, #200]	; (8004758 <xPortStartScheduler+0xd0>)
 8004690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <xPortStartScheduler+0xd4>)
 80046b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <xPortStartScheduler+0xd8>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046bc:	e009      	b.n	80046d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <xPortStartScheduler+0xd8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a26      	ldr	r2, [pc, #152]	; (8004760 <xPortStartScheduler+0xd8>)
 80046c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d0ef      	beq.n	80046be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <xPortStartScheduler+0xd8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00a      	beq.n	8004700 <xPortStartScheduler+0x78>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <xPortStartScheduler+0xd8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <xPortStartScheduler+0xd8>)
 8004708:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <xPortStartScheduler+0xd8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <xPortStartScheduler+0xd8>)
 8004714:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <xPortStartScheduler+0xdc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <xPortStartScheduler+0xdc>)
 8004724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <xPortStartScheduler+0xdc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <xPortStartScheduler+0xdc>)
 8004730:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004734:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004736:	f000 f8b9 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <xPortStartScheduler+0xe0>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004740:	f7ff ff92 	bl	8004668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004744:	f7ff f8c2 	bl	80038cc <vTaskSwitchContext>
	prvTaskExitError();
 8004748:	f7ff ff4c 	bl	80045e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000e400 	.word	0xe000e400
 800475c:	20000d14 	.word	0x20000d14
 8004760:	20000d18 	.word	0x20000d18
 8004764:	e000ed20 	.word	0xe000ed20
 8004768:	2000000c 	.word	0x2000000c

0800476c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <vPortEnterCritical+0x58>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <vPortEnterCritical+0x58>)
 800478e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <vPortEnterCritical+0x58>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10f      	bne.n	80047b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <vPortEnterCritical+0x5c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <vPortEnterCritical+0x4a>
	}
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <vPortExitCritical+0x4c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <vPortExitCritical+0x24>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <vPortExitCritical+0x4c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <vPortExitCritical+0x4c>)
 80047f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <vPortExitCritical+0x4c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <vPortExitCritical+0x42>
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f383 8811 	msr	BASEPRI, r3
}
 800480c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	2000000c 	.word	0x2000000c
 800481c:	00000000 	.word	0x00000000

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004830:	6010      	str	r0, [r2, #0]
 8004832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004836:	f04f 0050 	mov.w	r0, #80	; 0x50
 800483a:	f380 8811 	msr	BASEPRI, r0
 800483e:	f7ff f845 	bl	80038cc <vTaskSwitchContext>
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004856:	f380 8809 	msr	PSP, r0
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	4770      	bx	lr

08004860 <pxCurrentTCBConst>:
 8004860:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7fe ff65 	bl	8003750 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SysTick_Handler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	e000e010 	.word	0xe000e010
 80048e0:	e000e018 	.word	0xe000e018
 80048e4:	20000000 	.word	0x20000000
 80048e8:	10624dd3 	.word	0x10624dd3
 80048ec:	e000e014 	.word	0xe000e014

080048f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d914      	bls.n	800492c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <vPortValidateInterruptPriority+0x6c>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <vPortValidateInterruptPriority+0x70>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	7afa      	ldrb	r2, [r7, #11]
 8004912:	429a      	cmp	r2, r3
 8004914:	d20a      	bcs.n	800492c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	607b      	str	r3, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800492c:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <vPortValidateInterruptPriority+0x74>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <vPortValidateInterruptPriority+0x78>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d90a      	bls.n	8004952 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	603b      	str	r3, [r7, #0]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <vPortValidateInterruptPriority+0x60>
	}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	e000e3f0 	.word	0xe000e3f0
 8004960:	20000d14 	.word	0x20000d14
 8004964:	e000ed0c 	.word	0xe000ed0c
 8004968:	20000d18 	.word	0x20000d18

0800496c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004978:	f7fe fe30 	bl	80035dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800497c:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <pvPortMalloc+0x174>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004984:	f000 f910 	bl	8004ba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004988:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <pvPortMalloc+0x178>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 808e 	bne.w	8004ab2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01d      	beq.n	80049d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800499c:	2208      	movs	r2, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	3308      	adds	r3, #8
 80049b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <pvPortMalloc+0x6c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	617b      	str	r3, [r7, #20]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d069      	beq.n	8004ab2 <pvPortMalloc+0x146>
 80049de:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <pvPortMalloc+0x17c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d864      	bhi.n	8004ab2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049e8:	4b40      	ldr	r3, [pc, #256]	; (8004aec <pvPortMalloc+0x180>)
 80049ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <pvPortMalloc+0x180>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f2:	e004      	b.n	80049fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d903      	bls.n	8004a10 <pvPortMalloc+0xa4>
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f1      	bne.n	80049f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a10:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <pvPortMalloc+0x174>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d04b      	beq.n	8004ab2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2208      	movs	r2, #8
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	2308      	movs	r3, #8
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d91f      	bls.n	8004a7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <pvPortMalloc+0xf8>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	613b      	str	r3, [r7, #16]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f000 f8f8 	bl	8004c6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <pvPortMalloc+0x184>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d203      	bcs.n	8004a9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <pvPortMalloc+0x184>)
 8004a9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <pvPortMalloc+0x178>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ab2:	f7fe fda1 	bl	80035f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <pvPortMalloc+0x16a>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <pvPortMalloc+0x168>
	return pvReturn;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001924 	.word	0x20001924
 8004ae4:	20001930 	.word	0x20001930
 8004ae8:	20001928 	.word	0x20001928
 8004aec:	2000191c 	.word	0x2000191c
 8004af0:	2000192c 	.word	0x2000192c

08004af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d048      	beq.n	8004b98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b06:	2308      	movs	r3, #8
 8004b08:	425b      	negs	r3, r3
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <vPortFree+0xac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <vPortFree+0x44>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60fb      	str	r3, [r7, #12]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <vPortFree+0x62>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60bb      	str	r3, [r7, #8]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <vPortFree+0xac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d019      	beq.n	8004b98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d115      	bne.n	8004b98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <vPortFree+0xac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	401a      	ands	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b7c:	f7fe fd2e 	bl	80035dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <vPortFree+0xb0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vPortFree+0xb0>)
 8004b8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b8e:	6938      	ldr	r0, [r7, #16]
 8004b90:	f000 f86c 	bl	8004c6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b94:	f7fe fd30 	bl	80035f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20001930 	.word	0x20001930
 8004ba4:	20001928 	.word	0x20001928

08004ba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvHeapInit+0xac>)
 8004bb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <prvHeapInit+0xac>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <prvHeapInit+0xb0>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <prvHeapInit+0xb0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <prvHeapInit+0xb4>)
 8004c08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <prvHeapInit+0xb4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvHeapInit+0xb4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <prvHeapInit+0xb8>)
 8004c36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <prvHeapInit+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <prvHeapInit+0xc0>)
 8004c42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000d1c 	.word	0x20000d1c
 8004c58:	2000191c 	.word	0x2000191c
 8004c5c:	20001924 	.word	0x20001924
 8004c60:	2000192c 	.word	0x2000192c
 8004c64:	20001928 	.word	0x20001928
 8004c68:	20001930 	.word	0x20001930

08004c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <prvInsertBlockIntoFreeList+0xa8>)
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e002      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x14>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d8f7      	bhi.n	8004c7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d108      	bne.n	8004cae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d118      	bne.n	8004cf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d00d      	beq.n	8004cea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e008      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e003      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d002      	beq.n	8004d0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	2000191c 	.word	0x2000191c
 8004d18:	20001924 	.word	0x20001924

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	2600      	movs	r6, #0
 8004d20:	4d0c      	ldr	r5, [pc, #48]	; (8004d54 <__libc_init_array+0x38>)
 8004d22:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	10a4      	asrs	r4, r4, #2
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	f000 f830 	bl	8004d90 <_init>
 8004d30:	2600      	movs	r6, #0
 8004d32:	4d0a      	ldr	r5, [pc, #40]	; (8004d5c <__libc_init_array+0x40>)
 8004d34:	4c0a      	ldr	r4, [pc, #40]	; (8004d60 <__libc_init_array+0x44>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004e28 	.word	0x08004e28
 8004d58:	08004e28 	.word	0x08004e28
 8004d5c:	08004e28 	.word	0x08004e28
 8004d60:	08004e2c 	.word	0x08004e2c

08004d64 <memcpy>:
 8004d64:	440a      	add	r2, r1
 8004d66:	4291      	cmp	r1, r2
 8004d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d6c:	d100      	bne.n	8004d70 <memcpy+0xc>
 8004d6e:	4770      	bx	lr
 8004d70:	b510      	push	{r4, lr}
 8004d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d76:	4291      	cmp	r1, r2
 8004d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d7c:	d1f9      	bne.n	8004d72 <memcpy+0xe>
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <memset>:
 8004d80:	4603      	mov	r3, r0
 8004d82:	4402      	add	r2, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr
