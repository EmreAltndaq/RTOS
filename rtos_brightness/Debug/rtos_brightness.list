
rtos_brightness.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006800  08006800  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006800  08006800  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006800  08006800  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000074  0800687c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac8  0800687c  00021ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ff7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003395  00000000  00000000  00038094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001971d  00000000  00000000  0003d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aaf  00000000  00000000  00056f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f29  00000000  00000000  0006b9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001028ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a0  00000000  00000000  00102940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080066c4 	.word	0x080066c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080066c4 	.word	0x080066c4

08000150 <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
 
void Delay(uint32_t nCount)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000158:	e002      	b.n	8000160 <Delay+0x10>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	3b01      	subs	r3, #1
 800015e:	607b      	str	r3, [r7, #4]
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d1f9      	bne.n	800015a <Delay+0xa>
}
 8000166:	bf00      	nop
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr

08000172 <lcd_delay>:
void lcd_delay(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	af00      	add	r7, sp, #0
 Delay(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f7ff ffe9 	bl	8000150 <Delay>
}
 800017e:	bf00      	nop
 8000180:	bd80      	pop	{r7, pc}
	...

08000184 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 800018e:	4b57      	ldr	r3, [pc, #348]	; (80002ec <lcd_cmd+0x168>)
 8000190:	2204      	movs	r2, #4
 8000192:	615a      	str	r2, [r3, #20]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000194:	4b55      	ldr	r3, [pc, #340]	; (80002ec <lcd_cmd+0x168>)
 8000196:	2202      	movs	r2, #2
 8000198:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800019a:	4b54      	ldr	r3, [pc, #336]	; (80002ec <lcd_cmd+0x168>)
 800019c:	2210      	movs	r2, #16
 800019e:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80001a0:	4b52      	ldr	r3, [pc, #328]	; (80002ec <lcd_cmd+0x168>)
 80001a2:	2220      	movs	r2, #32
 80001a4:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80001a6:	4b51      	ldr	r3, [pc, #324]	; (80002ec <lcd_cmd+0x168>)
 80001a8:	2240      	movs	r2, #64	; 0x40
 80001aa:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80001ac:	4b4f      	ldr	r3, [pc, #316]	; (80002ec <lcd_cmd+0x168>)
 80001ae:	2280      	movs	r2, #128	; 0x80
 80001b0:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80001b2:	f7ff ffde 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80001b6:	4b4d      	ldr	r3, [pc, #308]	; (80002ec <lcd_cmd+0x168>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a4c      	ldr	r2, [pc, #304]	; (80002ec <lcd_cmd+0x168>)
 80001bc:	f043 0302 	orr.w	r3, r3, #2
 80001c0:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 0310 	and.w	r3, r3, #16
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d003      	beq.n	80001d4 <lcd_cmd+0x50>
 80001cc:	4b47      	ldr	r3, [pc, #284]	; (80002ec <lcd_cmd+0x168>)
 80001ce:	2210      	movs	r2, #16
 80001d0:	611a      	str	r2, [r3, #16]
 80001d2:	e003      	b.n	80001dc <lcd_cmd+0x58>
 80001d4:	4b45      	ldr	r3, [pc, #276]	; (80002ec <lcd_cmd+0x168>)
 80001d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001da:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	f003 0320 	and.w	r3, r3, #32
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d003      	beq.n	80001ee <lcd_cmd+0x6a>
 80001e6:	4b41      	ldr	r3, [pc, #260]	; (80002ec <lcd_cmd+0x168>)
 80001e8:	2220      	movs	r2, #32
 80001ea:	611a      	str	r2, [r3, #16]
 80001ec:	e003      	b.n	80001f6 <lcd_cmd+0x72>
 80001ee:	4b3f      	ldr	r3, [pc, #252]	; (80002ec <lcd_cmd+0x168>)
 80001f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001f4:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d003      	beq.n	8000208 <lcd_cmd+0x84>
 8000200:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <lcd_cmd+0x168>)
 8000202:	2240      	movs	r2, #64	; 0x40
 8000204:	611a      	str	r2, [r3, #16]
 8000206:	e003      	b.n	8000210 <lcd_cmd+0x8c>
 8000208:	4b38      	ldr	r3, [pc, #224]	; (80002ec <lcd_cmd+0x168>)
 800020a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800020e:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	da03      	bge.n	8000220 <lcd_cmd+0x9c>
 8000218:	4b34      	ldr	r3, [pc, #208]	; (80002ec <lcd_cmd+0x168>)
 800021a:	2280      	movs	r2, #128	; 0x80
 800021c:	611a      	str	r2, [r3, #16]
 800021e:	e003      	b.n	8000228 <lcd_cmd+0xa4>
 8000220:	4b32      	ldr	r3, [pc, #200]	; (80002ec <lcd_cmd+0x168>)
 8000222:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000226:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000228:	f7ff ffa3 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800022c:	4b2f      	ldr	r3, [pc, #188]	; (80002ec <lcd_cmd+0x168>)
 800022e:	2202      	movs	r2, #2
 8000230:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000232:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <lcd_cmd+0x168>)
 8000234:	2210      	movs	r2, #16
 8000236:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000238:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <lcd_cmd+0x168>)
 800023a:	2220      	movs	r2, #32
 800023c:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800023e:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <lcd_cmd+0x168>)
 8000240:	2240      	movs	r2, #64	; 0x40
 8000242:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <lcd_cmd+0x168>)
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 800024a:	f7ff ff92 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800024e:	4b27      	ldr	r3, [pc, #156]	; (80002ec <lcd_cmd+0x168>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	4a26      	ldr	r2, [pc, #152]	; (80002ec <lcd_cmd+0x168>)
 8000254:	f043 0302 	orr.w	r3, r3, #2
 8000258:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <lcd_cmd+0xe8>
 8000264:	4b21      	ldr	r3, [pc, #132]	; (80002ec <lcd_cmd+0x168>)
 8000266:	2210      	movs	r2, #16
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	e003      	b.n	8000274 <lcd_cmd+0xf0>
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <lcd_cmd+0x168>)
 800026e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000272:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 0302 	and.w	r3, r3, #2
 800027a:	2b00      	cmp	r3, #0
 800027c:	d003      	beq.n	8000286 <lcd_cmd+0x102>
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <lcd_cmd+0x168>)
 8000280:	2220      	movs	r2, #32
 8000282:	611a      	str	r2, [r3, #16]
 8000284:	e003      	b.n	800028e <lcd_cmd+0x10a>
 8000286:	4b19      	ldr	r3, [pc, #100]	; (80002ec <lcd_cmd+0x168>)
 8000288:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800028c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 0304 	and.w	r3, r3, #4
 8000294:	2b00      	cmp	r3, #0
 8000296:	d003      	beq.n	80002a0 <lcd_cmd+0x11c>
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <lcd_cmd+0x168>)
 800029a:	2240      	movs	r2, #64	; 0x40
 800029c:	611a      	str	r2, [r3, #16]
 800029e:	e003      	b.n	80002a8 <lcd_cmd+0x124>
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <lcd_cmd+0x168>)
 80002a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80002a6:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	f003 0308 	and.w	r3, r3, #8
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <lcd_cmd+0x136>
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <lcd_cmd+0x168>)
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	e003      	b.n	80002c2 <lcd_cmd+0x13e>
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <lcd_cmd+0x168>)
 80002bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80002c0:	611a      	str	r2, [r3, #16]

 lcd_delay();
 80002c2:	f7ff ff56 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <lcd_cmd+0x168>)
 80002c8:	2202      	movs	r2, #2
 80002ca:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <lcd_cmd+0x168>)
 80002ce:	2210      	movs	r2, #16
 80002d0:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <lcd_cmd+0x168>)
 80002d4:	2220      	movs	r2, #32
 80002d6:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <lcd_cmd+0x168>)
 80002da:	2240      	movs	r2, #64	; 0x40
 80002dc:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002de:	4b03      	ldr	r3, [pc, #12]	; (80002ec <lcd_cmd+0x168>)
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	615a      	str	r2, [r3, #20]
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010800 	.word	0x40010800

080002f0 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80002fa:	4b59      	ldr	r3, [pc, #356]	; (8000460 <lcd_char_cp+0x170>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a58      	ldr	r2, [pc, #352]	; (8000460 <lcd_char_cp+0x170>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	60d3      	str	r3, [r2, #12]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000306:	4b56      	ldr	r3, [pc, #344]	; (8000460 <lcd_char_cp+0x170>)
 8000308:	2202      	movs	r2, #2
 800030a:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800030c:	4b54      	ldr	r3, [pc, #336]	; (8000460 <lcd_char_cp+0x170>)
 800030e:	2210      	movs	r2, #16
 8000310:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000312:	4b53      	ldr	r3, [pc, #332]	; (8000460 <lcd_char_cp+0x170>)
 8000314:	2220      	movs	r2, #32
 8000316:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000318:	4b51      	ldr	r3, [pc, #324]	; (8000460 <lcd_char_cp+0x170>)
 800031a:	2240      	movs	r2, #64	; 0x40
 800031c:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800031e:	4b50      	ldr	r3, [pc, #320]	; (8000460 <lcd_char_cp+0x170>)
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000324:	f7ff ff25 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000328:	4b4d      	ldr	r3, [pc, #308]	; (8000460 <lcd_char_cp+0x170>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a4c      	ldr	r2, [pc, #304]	; (8000460 <lcd_char_cp+0x170>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 0310 	and.w	r3, r3, #16
 800033a:	2b00      	cmp	r3, #0
 800033c:	d003      	beq.n	8000346 <lcd_char_cp+0x56>
 800033e:	4b48      	ldr	r3, [pc, #288]	; (8000460 <lcd_char_cp+0x170>)
 8000340:	2210      	movs	r2, #16
 8000342:	611a      	str	r2, [r3, #16]
 8000344:	e003      	b.n	800034e <lcd_char_cp+0x5e>
 8000346:	4b46      	ldr	r3, [pc, #280]	; (8000460 <lcd_char_cp+0x170>)
 8000348:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800034c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	2b00      	cmp	r3, #0
 8000356:	d003      	beq.n	8000360 <lcd_char_cp+0x70>
 8000358:	4b41      	ldr	r3, [pc, #260]	; (8000460 <lcd_char_cp+0x170>)
 800035a:	2220      	movs	r2, #32
 800035c:	611a      	str	r2, [r3, #16]
 800035e:	e003      	b.n	8000368 <lcd_char_cp+0x78>
 8000360:	4b3f      	ldr	r3, [pc, #252]	; (8000460 <lcd_char_cp+0x170>)
 8000362:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000366:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <lcd_char_cp+0x8a>
 8000372:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <lcd_char_cp+0x170>)
 8000374:	2240      	movs	r2, #64	; 0x40
 8000376:	611a      	str	r2, [r3, #16]
 8000378:	e003      	b.n	8000382 <lcd_char_cp+0x92>
 800037a:	4b39      	ldr	r3, [pc, #228]	; (8000460 <lcd_char_cp+0x170>)
 800037c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000380:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	da03      	bge.n	8000392 <lcd_char_cp+0xa2>
 800038a:	4b35      	ldr	r3, [pc, #212]	; (8000460 <lcd_char_cp+0x170>)
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	611a      	str	r2, [r3, #16]
 8000390:	e003      	b.n	800039a <lcd_char_cp+0xaa>
 8000392:	4b33      	ldr	r3, [pc, #204]	; (8000460 <lcd_char_cp+0x170>)
 8000394:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000398:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 800039a:	f7ff feea 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <lcd_char_cp+0x170>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003a4:	4b2e      	ldr	r3, [pc, #184]	; (8000460 <lcd_char_cp+0x170>)
 80003a6:	2210      	movs	r2, #16
 80003a8:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <lcd_char_cp+0x170>)
 80003ac:	2220      	movs	r2, #32
 80003ae:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003b0:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <lcd_char_cp+0x170>)
 80003b2:	2240      	movs	r2, #64	; 0x40
 80003b4:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b6:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <lcd_char_cp+0x170>)
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 80003bc:	f7ff fed9 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <lcd_char_cp+0x170>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <lcd_char_cp+0x170>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d003      	beq.n	80003de <lcd_char_cp+0xee>
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <lcd_char_cp+0x170>)
 80003d8:	2210      	movs	r2, #16
 80003da:	611a      	str	r2, [r3, #16]
 80003dc:	e003      	b.n	80003e6 <lcd_char_cp+0xf6>
 80003de:	4b20      	ldr	r3, [pc, #128]	; (8000460 <lcd_char_cp+0x170>)
 80003e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003e4:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d003      	beq.n	80003f8 <lcd_char_cp+0x108>
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <lcd_char_cp+0x170>)
 80003f2:	2220      	movs	r2, #32
 80003f4:	611a      	str	r2, [r3, #16]
 80003f6:	e003      	b.n	8000400 <lcd_char_cp+0x110>
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <lcd_char_cp+0x170>)
 80003fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003fe:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <lcd_char_cp+0x122>
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <lcd_char_cp+0x170>)
 800040c:	2240      	movs	r2, #64	; 0x40
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	e003      	b.n	800041a <lcd_char_cp+0x12a>
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <lcd_char_cp+0x170>)
 8000414:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000418:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	2b00      	cmp	r3, #0
 8000422:	d003      	beq.n	800042c <lcd_char_cp+0x13c>
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <lcd_char_cp+0x170>)
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	e003      	b.n	8000434 <lcd_char_cp+0x144>
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <lcd_char_cp+0x170>)
 800042e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000432:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000434:	f7ff fe9d 	bl	8000172 <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <lcd_char_cp+0x170>)
 800043a:	2202      	movs	r2, #2
 800043c:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <lcd_char_cp+0x170>)
 8000440:	2210      	movs	r2, #16
 8000442:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <lcd_char_cp+0x170>)
 8000446:	2220      	movs	r2, #32
 8000448:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <lcd_char_cp+0x170>)
 800044c:	2240      	movs	r2, #64	; 0x40
 800044e:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <lcd_char_cp+0x170>)
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	615a      	str	r2, [r3, #20]
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010800 	.word	0x40010800

08000464 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 while(*out_char)
 800046c:	e008      	b.n	8000480 <lcd_out_cp+0x1c>
 {
  lcd_delay();
 800046e:	f7ff fe80 	bl	8000172 <lcd_delay>
  lcd_char_cp(*out_char++);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	1c5a      	adds	r2, r3, #1
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff38 	bl	80002f0 <lcd_char_cp>
 while(*out_char)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f2      	bne.n	800046e <lcd_out_cp+0xa>
 }
 lcd_delay();
 8000488:	f7ff fe73 	bl	8000172 <lcd_delay>
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{  
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	460b      	mov	r3, r1
 80004a0:	71bb      	strb	r3, [r7, #6]
 80004a2:	4613      	mov	r3, r2
 80004a4:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 80004a6:	20fa      	movs	r0, #250	; 0xfa
 80004a8:	f000 fcd2 	bl	8000e50 <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f7ff fe69 	bl	8000184 <lcd_cmd>
    HAL_Delay(50);
 80004b2:	2032      	movs	r0, #50	; 0x32
 80004b4:	f000 fccc 	bl	8000e50 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	4313      	orrs	r3, r2
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	797b      	ldrb	r3, [r7, #5]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fe59 	bl	8000184 <lcd_cmd>
    HAL_Delay(50);
 80004d2:	2032      	movs	r0, #50	; 0x32
 80004d4:	f000 fcbc 	bl	8000e50 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80004d8:	2006      	movs	r0, #6
 80004da:	f7ff fe53 	bl	8000184 <lcd_cmd>
    HAL_Delay(50);
 80004de:	2032      	movs	r0, #50	; 0x32
 80004e0:	f000 fcb6 	bl	8000e50 <HAL_Delay>
    lcd_cmd(0x0E);
 80004e4:	200e      	movs	r0, #14
 80004e6:	f7ff fe4d 	bl	8000184 <lcd_cmd>
    HAL_Delay(50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f000 fcb0 	bl	8000e50 <HAL_Delay>
    lcd_cmd(0x0C);
 80004f0:	200c      	movs	r0, #12
 80004f2:	f7ff fe47 	bl	8000184 <lcd_cmd>
    HAL_Delay(50);
 80004f6:	2032      	movs	r0, #50	; 0x32
 80004f8:	f000 fcaa 	bl	8000e50 <HAL_Delay>
    lcd_cmd(0x01);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff fe41 	bl	8000184 <lcd_cmd>
    HAL_Delay(100);
 8000502:	2064      	movs	r0, #100	; 0x64
 8000504:	f000 fca4 	bl	8000e50 <HAL_Delay>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{ 
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d106      	bne.n	8000534 <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	337f      	adds	r3, #127	; 0x7f
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe29 	bl	8000184 <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 } 
}
 8000532:	e008      	b.n	8000546 <lcd_gotoxy+0x36>
 else if(row == 2)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d105      	bne.n	8000546 <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	3b41      	subs	r3, #65	; 0x41
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe1f 	bl	8000184 <lcd_cmd>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	603a      	str	r2, [r7, #0]
 8000558:	71fb      	strb	r3, [r7, #7]
 800055a:	460b      	mov	r3, r1
 800055c:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffd3 	bl	8000510 <lcd_gotoxy>
 lcd_out_cp(out_char);
 800056a:	6838      	ldr	r0, [r7, #0]
 800056c:	f7ff ff7a 	bl	8000464 <lcd_out_cp>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <lcd_clear>:
void lcd_clear(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    
 lcd_cmd(_CLEAR);
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff fe01 	bl	8000184 <lcd_cmd>
    HAL_Delay(2);
 8000582:	2002      	movs	r0, #2
 8000584:	f000 fc64 	bl	8000e50 <HAL_Delay>
    
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fc2c 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f836 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f94e 	bl	8000838 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059c:	f000 f88a 	bl	80006b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005a0:	f000 f8c6 	bl	8000730 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f002 ff4a 	bl	800343c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of adcRead */
  adcReadHandle = osThreadNew(adc, NULL, &adcRead_attributes);
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <main+0x54>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0x58>)
 80005ae:	f002 ffab 	bl	8003508 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <main+0x5c>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of ledBrightness */
  ledBrightnessHandle = osThreadNew(brightness, NULL, &ledBrightness_attributes);
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <main+0x60>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0x64>)
 80005be:	f002 ffa3 	bl	8003508 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <main+0x68>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of showDisplay */
  showDisplayHandle = osThreadNew(show, NULL, &showDisplay_attributes);
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <main+0x6c>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <main+0x70>)
 80005ce:	f002 ff9b 	bl	8003508 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <main+0x74>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f002 ff62 	bl	80034a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x50>
 80005de:	bf00      	nop
 80005e0:	08006748 	.word	0x08006748
 80005e4:	080008b5 	.word	0x080008b5
 80005e8:	20001a28 	.word	0x20001a28
 80005ec:	0800676c 	.word	0x0800676c
 80005f0:	080008f1 	.word	0x080008f1
 80005f4:	200019a4 	.word	0x200019a4
 80005f8:	08006790 	.word	0x08006790
 80005fc:	0800091d 	.word	0x0800091d
 8000600:	20001a24 	.word	0x20001a24

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fc22 	bl	8005e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000650:	2300      	movs	r3, #0
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fad5 	bl	8001c08 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000664:	f000 fa1e 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd40 	bl	8002108 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800068e:	f000 fa09 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000692:	2302      	movs	r3, #2
 8000694:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fefd 	bl	800249c <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006a8:	f000 f9fc 	bl	8000aa4 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_ADC1_Init+0x74>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <MX_ADC1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_ADC1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_ADC1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_ADC1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_ADC1_Init+0x74>)
 80006de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_ADC1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_ADC1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_ADC1_Init+0x74>)
 80006f2:	f000 fbd1 	bl	8000e98 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9d2 	bl	8000aa4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2301      	movs	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC1_Init+0x74>)
 8000712:	f000 fe79 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800071c:	f000 f9c2 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200019a8 	.word	0x200019a8
 800072c:	40012400 	.word	0x40012400

08000730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b092      	sub	sp, #72	; 0x48
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f005 fb7e 	bl	8005e5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_TIM1_Init+0x100>)
 8000762:	4a34      	ldr	r2, [pc, #208]	; (8000834 <MX_TIM1_Init+0x104>)
 8000764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_TIM1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_TIM1_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_TIM1_Init+0x100>)
 8000774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_TIM1_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_TIM1_Init+0x100>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_TIM1_Init+0x100>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	4828      	ldr	r0, [pc, #160]	; (8000830 <MX_TIM1_Init+0x100>)
 800078e:	f002 f8a9 	bl	80028e4 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000798:	f000 f984 	bl	8000aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a8:	4619      	mov	r1, r3
 80007aa:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_TIM1_Init+0x100>)
 80007ac:	f002 fd84 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007b6:	f000 f975 	bl	8000aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	; 0x60
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_TIM1_Init+0x100>)
 80007e0:	f002 fa7a 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007ea:	f000 f95b 	bl	8000aa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM1_Init+0x100>)
 8000812:	f002 fdaf 	bl	8003374 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800081c:	f000 f942 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM1_Init+0x100>)
 8000822:	f000 f9d7 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3748      	adds	r7, #72	; 0x48
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200019dc 	.word	0x200019dc
 8000834:	40012c00 	.word	0x40012c00

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_GPIO_Init+0x74>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a16      	ldr	r2, [pc, #88]	; (80008ac <MX_GPIO_Init+0x74>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_GPIO_Init+0x74>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_GPIO_Init+0x74>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <MX_GPIO_Init+0x74>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_GPIO_Init+0x74>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 800087c:	2200      	movs	r2, #0
 800087e:	21f6      	movs	r1, #246	; 0xf6
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <MX_GPIO_Init+0x78>)
 8000882:	f001 f9a9 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000886:	23f6      	movs	r3, #246	; 0xf6
 8000888:	60bb      	str	r3, [r7, #8]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2302      	movs	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0x78>)
 800089e:	f001 f817 	bl	80018d0 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <adc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_adc */
void adc(void *argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <adc+0x34>)
 80008be:	f000 fbc3 	bl	8001048 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80008c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c6:	4808      	ldr	r0, [pc, #32]	; (80008e8 <adc+0x34>)
 80008c8:	f000 fc98 	bl	80011fc <HAL_ADC_PollForConversion>
	  adcVal = HAL_ADC_GetValue(&hadc1);
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <adc+0x34>)
 80008ce:	f000 fd8f 	bl	80013f0 <HAL_ADC_GetValue>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <adc+0x38>)
 80008d8:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <adc+0x34>)
 80008dc:	f000 fc62 	bl	80011a4 <HAL_ADC_Stop>
	  osDelay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f002 febb 	bl	800365c <osDelay>
	  HAL_ADC_Start(&hadc1);
 80008e6:	e7e9      	b.n	80008bc <adc+0x8>
 80008e8:	200019a8 	.word	0x200019a8
 80008ec:	200019d8 	.word	0x200019d8

080008f0 <brightness>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_brightness */
void brightness(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN brightness */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <brightness+0x24>)
 80008fc:	f002 f842 	bl	8002984 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adcVal);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <brightness+0x28>)
 8000902:	881a      	ldrh	r2, [r3, #0]
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <brightness+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	635a      	str	r2, [r3, #52]	; 0x34

    osDelay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f002 fea6 	bl	800365c <osDelay>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adcVal);
 8000910:	e7f6      	b.n	8000900 <brightness+0x10>
 8000912:	bf00      	nop
 8000914:	200019dc 	.word	0x200019dc
 8000918:	200019d8 	.word	0x200019d8

0800091c <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000924:	2208      	movs	r2, #8
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff fdb3 	bl	8000494 <lcd_init>
	char val[16] = " ";
 800092e:	2320      	movs	r3, #32
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
	int map;

  /* Infinite loop */
  for(;;)
  {
	  	if ((adcVal/10) < 204) {
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <show+0x158>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000946:	d202      	bcs.n	800094e <show+0x32>
	  		map = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	e078      	b.n	8000a40 <show+0x124>
	  	}
	  	else if ((adcVal/10) >= 204 && (adcVal/10) < 408) {
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <show+0x158>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8000956:	d307      	bcc.n	8000968 <show+0x4c>
 8000958:	4b46      	ldr	r3, [pc, #280]	; (8000a74 <show+0x158>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000960:	d202      	bcs.n	8000968 <show+0x4c>
	  		map = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e06b      	b.n	8000a40 <show+0x124>
	  	}
	  	else if ((adcVal/10) >= 408 && (adcVal/10) < 612) {
 8000968:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <show+0x158>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000970:	d308      	bcc.n	8000984 <show+0x68>
 8000972:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <show+0x158>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	f241 72e7 	movw	r2, #6119	; 0x17e7
 800097a:	4293      	cmp	r3, r2
 800097c:	d802      	bhi.n	8000984 <show+0x68>
	  		map = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e05d      	b.n	8000a40 <show+0x124>
	  	}
	  	else if ((adcVal/10) >= 612 && (adcVal/10) < 816) {
 8000984:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <show+0x158>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	f241 72e7 	movw	r2, #6119	; 0x17e7
 800098c:	4293      	cmp	r3, r2
 800098e:	d907      	bls.n	80009a0 <show+0x84>
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <show+0x158>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	f5b3 5fff 	cmp.w	r3, #8160	; 0x1fe0
 8000998:	d202      	bcs.n	80009a0 <show+0x84>
	  		map = 3;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e04f      	b.n	8000a40 <show+0x124>
	  	}
	  	else if ((adcVal/10) >= 816 && (adcVal/10) < 1020) {
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <show+0x158>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f5b3 5fff 	cmp.w	r3, #8160	; 0x1fe0
 80009a8:	d308      	bcc.n	80009bc <show+0xa0>
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <show+0x158>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	f242 72d7 	movw	r2, #10199	; 0x27d7
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d802      	bhi.n	80009bc <show+0xa0>
	  		map = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	e041      	b.n	8000a40 <show+0x124>
	  	}
	  	else if ((adcVal/10) >= 1020 && (adcVal/10) < 1224) {
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <show+0x158>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	f242 72d7 	movw	r2, #10199	; 0x27d7
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d908      	bls.n	80009da <show+0xbe>
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <show+0x158>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	f642 72cf 	movw	r2, #12239	; 0x2fcf
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d802      	bhi.n	80009da <show+0xbe>
	  			map = 5;
 80009d4:	2305      	movs	r3, #5
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	e032      	b.n	8000a40 <show+0x124>
	  		}
	  	else if ((adcVal/10) >= 1224 && (adcVal/10) < 1428) {
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <show+0x158>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	f642 72cf 	movw	r2, #12239	; 0x2fcf
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d908      	bls.n	80009f8 <show+0xdc>
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <show+0x158>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	f243 72c7 	movw	r2, #14279	; 0x37c7
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d802      	bhi.n	80009f8 <show+0xdc>
	  			map = 6;
 80009f2:	2306      	movs	r3, #6
 80009f4:	61fb      	str	r3, [r7, #28]
 80009f6:	e023      	b.n	8000a40 <show+0x124>
	  		}
	  	else if ((adcVal/10) >= 1428 && (adcVal/10) < 1632) {
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <show+0x158>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	f243 72c7 	movw	r2, #14279	; 0x37c7
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d907      	bls.n	8000a14 <show+0xf8>
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <show+0x158>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8000a0c:	d202      	bcs.n	8000a14 <show+0xf8>
	  			map = 7;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e015      	b.n	8000a40 <show+0x124>
	  		}
	  	else if ((adcVal/10) >= 1632 && (adcVal/10) < 1836) {
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <show+0x158>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 8000a1c:	d308      	bcc.n	8000a30 <show+0x114>
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <show+0x158>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	f244 72b7 	movw	r2, #18359	; 0x47b7
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d802      	bhi.n	8000a30 <show+0x114>
	  			map = 8;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	e007      	b.n	8000a40 <show+0x124>
	  		}
	  	else if ((adcVal/10) >= 1836) {
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <show+0x158>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	f244 72b7 	movw	r2, #18359	; 0x47b7
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d901      	bls.n	8000a40 <show+0x124>
	  				map = 9;
 8000a3c:	2309      	movs	r3, #9
 8000a3e:	61fb      	str	r3, [r7, #28]
	  			}
	lcd_print(1, 1, "İTÜ RAKE");
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <show+0x15c>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fd82 	bl	800054e <lcd_print>
	sprintf(val,"%d",map);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <show+0x160>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fa0a 	bl	8005e6c <siprintf>
	lcd_print(2, 1, val);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fd74 	bl	800054e <lcd_print>
	lcd_clear();
 8000a66:	f7ff fd87 	bl	8000578 <lcd_clear>
    osDelay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f002 fdf6 	bl	800365c <osDelay>
	  	if ((adcVal/10) < 204) {
 8000a70:	e765      	b.n	800093e <show+0x22>
 8000a72:	bf00      	nop
 8000a74:	200019d8 	.word	0x200019d8
 8000a78:	08006700 	.word	0x08006700
 8000a7c:	0800670c 	.word	0x0800670c

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 f9c1 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40000800 	.word	0x40000800

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_MspInit+0x68>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_MspInit+0x68>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_MspInit+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x68>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_MspInit+0x68>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x68>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fec4 	bl	800187a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_MspInit+0x6c>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_MspInit+0x6c>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_ADC_MspInit+0x6c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d121      	bne.n	8000b84 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_ADC_MspInit+0x70>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_ADC_MspInit+0x74>)
 8000b80:	f000 fea6 	bl	80018d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40012400 	.word	0x40012400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800

08000b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_PWM_MspInit+0x34>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8000bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40012c00 	.word	0x40012c00
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_TIM_MspPostInit+0x5c>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d118      	bne.n	8000c26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_TIM_MspPostInit+0x60>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_TIM_MspPostInit+0x64>)
 8000c22:	f000 fe55 	bl	80018d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	201e      	movs	r0, #30
 8000c52:	f000 fe12 	bl	800187a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c56:	201e      	movs	r0, #30
 8000c58:	f000 fe2b 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_InitTick+0x9c>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_InitTick+0x9c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	61d3      	str	r3, [r2, #28]
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_InitTick+0x9c>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 0210 	add.w	r2, r7, #16
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fbbe 	bl	8002400 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c84:	f001 fb94 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8000c88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_InitTick+0xa0>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_InitTick+0xa8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000cba:	f001 fd69 	bl	8002790 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d104      	bne.n	8000cce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000cc6:	f001 fdbb 	bl	8002840 <HAL_TIM_Base_Start_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3730      	adds	r7, #48	; 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	20001a2c 	.word	0x20001a2c
 8000ce4:	40000800 	.word	0x40000800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM4_IRQHandler+0x10>)
 8000d1a:	f001 fed5 	bl	8002ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20001a2c 	.word	0x20001a2c

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f005 f848 	bl	8005dec <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20005000 	.word	0x20005000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	20001ac8 	.word	0x20001ac8

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000da0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc6:	f7ff ffe5 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f005 f815 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff fbdd 	bl	800058c <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r3, =_sidata
 8000dd4:	08006808 	.word	0x08006808
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ddc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000de0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000de4:	20001ac8 	.word	0x20001ac8

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 fd31 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff1a 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fe52 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x1c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x20>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_IncTick+0x20>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20001a74 	.word	0x20001a74

08000e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <HAL_GetTick+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20001a74 	.word	0x20001a74

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff fff0 	bl	8000e3c <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffe0 	bl	8000e3c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008

08000e98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0be      	b.n	8001038 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d109      	bne.n	8000edc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fe22 	bl	8000b20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fbdd 	bl	800169c <ADC_ConversionStop_Disable>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8099 	bne.w	8001026 <HAL_ADC_Init+0x18e>
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 8095 	bne.w	8001026 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f04:	f023 0302 	bic.w	r3, r3, #2
 8000f08:	f043 0202 	orr.w	r2, r3, #2
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7b1b      	ldrb	r3, [r3, #12]
 8000f1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f30:	d003      	beq.n	8000f3a <HAL_ADC_Init+0xa2>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d102      	bne.n	8000f40 <HAL_ADC_Init+0xa8>
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	e000      	b.n	8000f42 <HAL_ADC_Init+0xaa>
 8000f40:	2300      	movs	r3, #0
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7d1b      	ldrb	r3, [r3, #20]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d119      	bne.n	8000f84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7b1b      	ldrb	r3, [r3, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d109      	bne.n	8000f6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	035a      	lsls	r2, r3, #13
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e00b      	b.n	8000f84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f043 0220 	orr.w	r2, r3, #32
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_ADC_Init+0x1a8>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb4:	d003      	beq.n	8000fbe <HAL_ADC_Init+0x126>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d104      	bne.n	8000fc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	051b      	lsls	r3, r3, #20
 8000fc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_ADC_Init+0x1ac>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10b      	bne.n	8001004 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f023 0303 	bic.w	r3, r3, #3
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001002:	e018      	b.n	8001036 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f023 0312 	bic.w	r3, r3, #18
 800100c:	f043 0210 	orr.w	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	f043 0201 	orr.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001024:	e007      	b.n	8001036 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102a:	f043 0210 	orr.w	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001036:	7dfb      	ldrb	r3, [r7, #23]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	ffe1f7fd 	.word	0xffe1f7fd
 8001044:	ff1f0efe 	.word	0xff1f0efe

08001048 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Start+0x1a>
 800105e:	2302      	movs	r3, #2
 8001060:	e098      	b.n	8001194 <HAL_ADC_Start+0x14c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fac4 	bl	80015f8 <ADC_Enable>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 8087 	bne.w	800118a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a41      	ldr	r2, [pc, #260]	; (800119c <HAL_ADC_Start+0x154>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d105      	bne.n	80010a6 <HAL_ADC_Start+0x5e>
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_ADC_Start+0x158>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d115      	bne.n	80010d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d026      	beq.n	800110e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d0:	e01d      	b.n	800110e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <HAL_ADC_Start+0x158>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d004      	beq.n	80010f2 <HAL_ADC_Start+0xaa>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <HAL_ADC_Start+0x154>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10d      	bne.n	800110e <HAL_ADC_Start+0xc6>
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_ADC_Start+0x158>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001106:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f023 0206 	bic.w	r2, r3, #6
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
 8001126:	e002      	b.n	800112e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f06f 0202 	mvn.w	r2, #2
 800113e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800114a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800114e:	d113      	bne.n	8001178 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_ADC_Start+0x154>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d105      	bne.n	8001166 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_Start+0x158>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	e00c      	b.n	8001192 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	e003      	b.n	8001192 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40012800 	.word	0x40012800
 80011a0:	40012400 	.word	0x40012400

080011a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Stop+0x1a>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e01a      	b.n	80011f4 <HAL_ADC_Stop+0x50>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa68 	bl	800169c <ADC_ConversionStop_Disable>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	f043 0201 	orr.w	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001212:	f7ff fe13 	bl	8000e3c <HAL_GetTick>
 8001216:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f043 0220 	orr.w	r2, r3, #32
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0c8      	b.n	80013d0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d12a      	bne.n	80012a2 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	d123      	bne.n	80012a2 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800125a:	e01a      	b.n	8001292 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001262:	d016      	beq.n	8001292 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_ADC_PollForConversion+0x7e>
 800126a:	f7ff fde7 	bl	8000e3c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d20b      	bcs.n	8001292 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0204 	orr.w	r2, r3, #4
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e09e      	b.n	80013d0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0dd      	beq.n	800125c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012a0:	e06c      	b.n	800137c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012a2:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <HAL_ADC_PollForConversion+0x1dc>)
 80012a4:	681c      	ldr	r4, [r3, #0]
 80012a6:	2002      	movs	r0, #2
 80012a8:	f001 f9ae 	bl	8002608 <HAL_RCCEx_GetPeriphCLKFreq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <HAL_ADC_PollForConversion+0x1e0>)
 80012ba:	400b      	ands	r3, r1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d118      	bne.n	80012f2 <HAL_ADC_PollForConversion+0xf6>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68d9      	ldr	r1, [r3, #12]
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_ADC_PollForConversion+0x1e4>)
 80012c8:	400b      	ands	r3, r1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d111      	bne.n	80012f2 <HAL_ADC_PollForConversion+0xf6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6919      	ldr	r1, [r3, #16]
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_ADC_PollForConversion+0x1e8>)
 80012d6:	400b      	ands	r3, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <HAL_ADC_PollForConversion+0xf2>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68d9      	ldr	r1, [r3, #12]
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_ADC_PollForConversion+0x1ec>)
 80012e4:	400b      	ands	r3, r1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_PollForConversion+0xf2>
 80012ea:	2314      	movs	r3, #20
 80012ec:	e020      	b.n	8001330 <HAL_ADC_PollForConversion+0x134>
 80012ee:	2329      	movs	r3, #41	; 0x29
 80012f0:	e01e      	b.n	8001330 <HAL_ADC_PollForConversion+0x134>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6919      	ldr	r1, [r3, #16]
 80012f8:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_ADC_PollForConversion+0x1e8>)
 80012fa:	400b      	ands	r3, r1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <HAL_ADC_PollForConversion+0x112>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d9      	ldr	r1, [r3, #12]
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_ADC_PollForConversion+0x1ec>)
 8001308:	400b      	ands	r3, r1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00d      	beq.n	800132a <HAL_ADC_PollForConversion+0x12e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6919      	ldr	r1, [r3, #16]
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_ADC_PollForConversion+0x1f0>)
 8001316:	400b      	ands	r3, r1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <HAL_ADC_PollForConversion+0x132>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68d9      	ldr	r1, [r3, #12]
 8001322:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_ADC_PollForConversion+0x1f0>)
 8001324:	400b      	ands	r3, r1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_PollForConversion+0x132>
 800132a:	2354      	movs	r3, #84	; 0x54
 800132c:	e000      	b.n	8001330 <HAL_ADC_PollForConversion+0x134>
 800132e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001336:	e01d      	b.n	8001374 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800133e:	d016      	beq.n	800136e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_PollForConversion+0x15a>
 8001346:	f7ff fd79 	bl	8000e3c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d20b      	bcs.n	800136e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f043 0204 	orr.w	r2, r3, #4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e030      	b.n	80013d0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8dd      	bhi.n	8001338 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f06f 0212 	mvn.w	r2, #18
 8001384:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800139c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d111      	bne.n	80013ce <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	24924924 	.word	0x24924924
 80013e0:	00924924 	.word	0x00924924
 80013e4:	12492492 	.word	0x12492492
 80013e8:	00492492 	.word	0x00492492
 80013ec:	00249249 	.word	0x00249249

080013f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x20>
 8001424:	2302      	movs	r3, #2
 8001426:	e0dc      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x1da>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d81c      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
 8001470:	e03c      	b.n	80014ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d81c      	bhi.n	80014b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b23      	subs	r3, #35	; 0x23
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	4019      	ands	r1, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b23      	subs	r3, #35	; 0x23
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
 80014b2:	e01b      	b.n	80014ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3b41      	subs	r3, #65	; 0x41
 80014c6:	221f      	movs	r2, #31
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4019      	ands	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b41      	subs	r3, #65	; 0x41
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d91c      	bls.n	800152e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68d9      	ldr	r1, [r3, #12]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	3b1e      	subs	r3, #30
 8001506:	2207      	movs	r2, #7
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	4019      	ands	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6898      	ldr	r0, [r3, #8]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	3b1e      	subs	r3, #30
 8001520:	fa00 f203 	lsl.w	r2, r0, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	e019      	b.n	8001562 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6919      	ldr	r1, [r3, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	2207      	movs	r2, #7
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	4019      	ands	r1, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6898      	ldr	r0, [r3, #8]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d003      	beq.n	8001572 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800156e:	2b11      	cmp	r3, #17
 8001570:	d132      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d125      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d126      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001598:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d11a      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9a      	lsrs	r2, r3, #18
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x1b2>
 80015c6:	e007      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f043 0220 	orr.w	r2, r3, #32
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40012400 	.word	0x40012400
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83

080015f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d039      	beq.n	800168a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <ADC_Enable+0x9c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <ADC_Enable+0xa0>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001634:	e002      	b.n	800163c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001642:	f7ff fbfb 	bl	8000e3c <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001648:	e018      	b.n	800167c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800164a:	f7ff fbf7 	bl	8000e3c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d911      	bls.n	800167c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f043 0210 	orr.w	r2, r3, #16
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e007      	b.n	800168c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d1df      	bne.n	800164a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	431bde83 	.word	0x431bde83

0800169c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d127      	bne.n	8001706 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016c6:	f7ff fbb9 	bl	8000e3c <HAL_GetTick>
 80016ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016cc:	e014      	b.n	80016f8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016ce:	f7ff fbb5 	bl	8000e3c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d90d      	bls.n	80016f8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f043 0210 	orr.w	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e007      	b.n	8001708 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d0e3      	beq.n	80016ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <__NVIC_EnableIRQ+0x34>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff4f 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff64 	bl	8001758 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ffb2 	bl	8001800 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff81 	bl	80017ac <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff57 	bl	8001774 <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b08b      	sub	sp, #44	; 0x2c
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e169      	b.n	8001bb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e4:	2201      	movs	r2, #1
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8158 	bne.w	8001bb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a9a      	ldr	r2, [pc, #616]	; (8001b70 <HAL_GPIO_Init+0x2a0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d05e      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 800190c:	4a98      	ldr	r2, [pc, #608]	; (8001b70 <HAL_GPIO_Init+0x2a0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d875      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001912:	4a98      	ldr	r2, [pc, #608]	; (8001b74 <HAL_GPIO_Init+0x2a4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d058      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001918:	4a96      	ldr	r2, [pc, #600]	; (8001b74 <HAL_GPIO_Init+0x2a4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d86f      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800191e:	4a96      	ldr	r2, [pc, #600]	; (8001b78 <HAL_GPIO_Init+0x2a8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d052      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001924:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <HAL_GPIO_Init+0x2a8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d869      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800192a:	4a94      	ldr	r2, [pc, #592]	; (8001b7c <HAL_GPIO_Init+0x2ac>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d04c      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <HAL_GPIO_Init+0x2ac>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d863      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001936:	4a92      	ldr	r2, [pc, #584]	; (8001b80 <HAL_GPIO_Init+0x2b0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d046      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 800193c:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <HAL_GPIO_Init+0x2b0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d85d      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d82a      	bhi.n	800199c <HAL_GPIO_Init+0xcc>
 8001946:	2b12      	cmp	r3, #18
 8001948:	d859      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <HAL_GPIO_Init+0x80>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019a5 	.word	0x080019a5
 8001958:	080019b7 	.word	0x080019b7
 800195c:	080019f9 	.word	0x080019f9
 8001960:	080019ff 	.word	0x080019ff
 8001964:	080019ff 	.word	0x080019ff
 8001968:	080019ff 	.word	0x080019ff
 800196c:	080019ff 	.word	0x080019ff
 8001970:	080019ff 	.word	0x080019ff
 8001974:	080019ff 	.word	0x080019ff
 8001978:	080019ff 	.word	0x080019ff
 800197c:	080019ff 	.word	0x080019ff
 8001980:	080019ff 	.word	0x080019ff
 8001984:	080019ff 	.word	0x080019ff
 8001988:	080019ff 	.word	0x080019ff
 800198c:	080019ff 	.word	0x080019ff
 8001990:	080019ff 	.word	0x080019ff
 8001994:	080019ad 	.word	0x080019ad
 8001998:	080019c1 	.word	0x080019c1
 800199c:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <HAL_GPIO_Init+0x2b4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a2:	e02c      	b.n	80019fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e029      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	3304      	adds	r3, #4
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e024      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	3308      	adds	r3, #8
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e01f      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	330c      	adds	r3, #12
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e01a      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d2:	2304      	movs	r3, #4
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e013      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	611a      	str	r2, [r3, #16]
          break;
 80019ea:	e009      	b.n	8001a00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ec:	2308      	movs	r3, #8
 80019ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	615a      	str	r2, [r3, #20]
          break;
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          break;
 80019fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	; 0xff
 8001a04:	d801      	bhi.n	8001a0a <HAL_GPIO_Init+0x13a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	e001      	b.n	8001a0e <HAL_GPIO_Init+0x13e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d802      	bhi.n	8001a1c <HAL_GPIO_Init+0x14c>
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x152>
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3b08      	subs	r3, #8
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	210f      	movs	r1, #15
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	6a39      	ldr	r1, [r7, #32]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80b1 	beq.w	8001bb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a40      	ldr	r2, [pc, #256]	; (8001b90 <HAL_GPIO_Init+0x2c0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d013      	beq.n	8001abc <HAL_GPIO_Init+0x1ec>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3f      	ldr	r2, [pc, #252]	; (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_GPIO_Init+0x1e8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	; (8001b98 <HAL_GPIO_Init+0x2c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d007      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	; (8001b9c <HAL_GPIO_Init+0x2cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_GPIO_Init+0x1e0>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e006      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e004      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001abc:	2300      	movs	r3, #0
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	f002 0203 	and.w	r2, r2, #3
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ace:	492f      	ldr	r1, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4928      	ldr	r1, [pc, #160]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4922      	ldr	r1, [pc, #136]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	491e      	ldr	r1, [pc, #120]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4918      	ldr	r1, [pc, #96]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4914      	ldr	r1, [pc, #80]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d021      	beq.n	8001ba4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
 8001b6c:	e021      	b.n	8001bb2 <HAL_GPIO_Init+0x2e2>
 8001b6e:	bf00      	nop
 8001b70:	10320000 	.word	0x10320000
 8001b74:	10310000 	.word	0x10310000
 8001b78:	10220000 	.word	0x10220000
 8001b7c:	10210000 	.word	0x10210000
 8001b80:	10120000 	.word	0x10120000
 8001b84:	10110000 	.word	0x10110000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40011400 	.word	0x40011400
 8001ba0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f47f ae8e 	bne.w	80018e4 <HAL_GPIO_Init+0x14>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	372c      	adds	r7, #44	; 0x2c
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e26c      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e246      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f8aa 	bl	8000e3c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f8a6 	bl	8000e3c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1fa      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f896 	bl	8000e3c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f892 	bl	8000e3c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1e6      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1ba      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f84b 	bl	8000e3c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f847 	bl	8000e3c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e19b      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f82a 	bl	8000e3c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f826 	bl	8000e3c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f80a 	bl	8000e3c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f806 	bl	8000e3c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fb08 	bl	8002460 <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fff0 	bl	8000e3c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe ffec 	bl	8000e3c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e140      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b97      	ldr	r3, [pc, #604]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b94      	ldr	r3, [pc, #592]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a93      	ldr	r2, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7fe ffad 	bl	8000e3c <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe ffa9 	bl	8000e3c <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0fd      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a72      	ldr	r2, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a6c      	ldr	r2, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ff5d 	bl	8000e3c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe ff59 	bl	8000e3c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ab      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ff47 	bl	8000e3c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe ff43 	bl	8000e3c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e095      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8081 	beq.w	80020f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe ff17 	bl	8000e3c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe ff13 	bl	8000e3c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e067      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	492d      	ldr	r1, [pc, #180]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	4927      	ldr	r1, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fee7 	bl	8000e3c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fee3 	bl	8000e3c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e037      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e02f      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fed0 	bl	8000e3c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fecc 	bl	8000e3c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	42420060 	.word	0x42420060

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fe20 	bl	8000e3c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fe1c 	bl	8000e3c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fcc0 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080067b4 	.word	0x080067b4
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e4:	1d3c      	adds	r4, r7, #4
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	f240 2301 	movw	r3, #513	; 0x201
 80022f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x46>
 800231a:	e02d      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e02d      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800232e:	4413      	add	r3, r2
 8002330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0c5b      	lsrs	r3, r3, #17
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800234e:	4413      	add	r3, r2
 8002350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	fb02 f203 	mul.w	r2, r2, r3
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	623b      	str	r3, [r7, #32]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	623b      	str	r3, [r7, #32]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6a3b      	ldr	r3, [r7, #32]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc90      	pop	{r4, r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08006710 	.word	0x08006710
 8002390:	40021000 	.word	0x40021000
 8002394:	007a1200 	.word	0x007a1200
 8002398:	003d0900 	.word	0x003d0900

0800239c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_RCC_GetHCLKFreq+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff2 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	080067c4 	.word	0x080067c4

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffde 	bl	800239c <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	080067c4 	.word	0x080067c4

08002400 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	220f      	movs	r2, #15
 800240e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_RCC_GetClockConfig+0x58>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetClockConfig+0x5c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0207 	and.w	r2, r3, #7
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	20000000 	.word	0x20000000
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d07d      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a4b      	ldr	r2, [pc, #300]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d118      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f0:	4b43      	ldr	r3, [pc, #268]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a42      	ldr	r2, [pc, #264]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fc9e 	bl	8000e3c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fc9a 	bl	8000e3c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e06d      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02e      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d027      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d014      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fc69 	bl	8000e3c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fc65 	bl	8000e3c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e036      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	490b      	ldr	r1, [pc, #44]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40007000 	.word	0x40007000
 8002604:	42420440 	.word	0x42420440

08002608 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08d      	sub	sp, #52	; 0x34
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002610:	4b5a      	ldr	r3, [pc, #360]	; (800277c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002612:	f107 040c 	add.w	r4, r7, #12
 8002616:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800261c:	f240 2301 	movw	r3, #513	; 0x201
 8002620:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	2300      	movs	r3, #0
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b10      	cmp	r3, #16
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b10      	cmp	r3, #16
 8002640:	f200 8091 	bhi.w	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d04c      	beq.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d07c      	beq.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002650:	e089      	b.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002652:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002658:	4b49      	ldr	r3, [pc, #292]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8082 	beq.w	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	0c9b      	lsrs	r3, r3, #18
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002672:	4413      	add	r3, r2
 8002674:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002678:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d018      	beq.n	80026b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002684:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0c5b      	lsrs	r3, r3, #17
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002692:	4413      	add	r3, r2
 8002694:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026a4:	4a37      	ldr	r2, [pc, #220]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	e004      	b.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	4a33      	ldr	r2, [pc, #204]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026cc:	d102      	bne.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026d2:	e04a      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4a2c      	ldr	r2, [pc, #176]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026e2:	e042      	b.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d108      	bne.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
 8002706:	e01f      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002712:	d109      	bne.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002720:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
 8002726:	e00f      	b.n	8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002732:	d11c      	bne.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002740:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002746:	e012      	b.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002748:	e011      	b.n	800276e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800274a:	f7ff fe45 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0b9b      	lsrs	r3, r3, #14
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002764:	e004      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002766:	bf00      	nop
 8002768:	e002      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800276a:	bf00      	nop
 800276c:	e000      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800276e:	bf00      	nop
    }
  }
  return (frequency);
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002772:	4618      	mov	r0, r3
 8002774:	3734      	adds	r7, #52	; 0x34
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	08006720 	.word	0x08006720
 8002780:	40021000 	.word	0x40021000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	003d0900 	.word	0x003d0900
 800278c:	aaaaaaab 	.word	0xaaaaaaab

08002790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e041      	b.n	8002826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f839 	bl	800282e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f000 fb64 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e03a      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d009      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIM_Base_Start_IT+0x9c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x58>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d010      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ba:	e007      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe f944 	bl	8000b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 faba 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_TIM_PWM_Start+0x24>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e022      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d109      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x3e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e015      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d109      	bne.n	80029dc <HAL_TIM_PWM_Start+0x58>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e008      	b.n	80029ee <HAL_TIM_PWM_Start+0x6a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e05e      	b.n	8002ab4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0x82>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	e013      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0x92>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xa2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a24:	e003      	b.n	8002a2e <HAL_TIM_PWM_Start+0xaa>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	6839      	ldr	r1, [r7, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fc1a 	bl	8003270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_PWM_Start+0x138>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_TIM_PWM_Start+0x138>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_TIM_PWM_Start+0xfa>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_PWM_Start+0xfa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_TIM_PWM_Start+0x13c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_PWM_Start+0xfa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_TIM_PWM_Start+0x140>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d010      	beq.n	8002ab2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800

08002ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0202 	mvn.w	r2, #2
 8002af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9ab 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f99e 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f9ad 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0204 	mvn.w	r2, #4
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f981 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f974 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f983 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0208 	mvn.w	r2, #8
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f957 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f94a 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f959 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0210 	mvn.w	r2, #16
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f92d 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f920 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f92f 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0201 	mvn.w	r2, #1
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd ff1a 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fbd8 	bl	8003428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8f3 	bl	8002e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0220 	mvn.w	r2, #32
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fba3 	bl	8003416 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0ac      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	f200 809f 	bhi.w	8002e40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002e41 	.word	0x08002e41
 8002d10:	08002e41 	.word	0x08002e41
 8002d14:	08002e41 	.word	0x08002e41
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002e41 	.word	0x08002e41
 8002d20:	08002e41 	.word	0x08002e41
 8002d24:	08002e41 	.word	0x08002e41
 8002d28:	08002dbf 	.word	0x08002dbf
 8002d2c:	08002e41 	.word	0x08002e41
 8002d30:	08002e41 	.word	0x08002e41
 8002d34:	08002e41 	.word	0x08002e41
 8002d38:	08002dff 	.word	0x08002dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f90c 	bl	8002f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	619a      	str	r2, [r3, #24]
      break;
 8002d7a:	e062      	b.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f952 	bl	800302c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
      break;
 8002dbc:	e041      	b.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f99b 	bl	8003100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0204 	bic.w	r2, r2, #4
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	61da      	str	r2, [r3, #28]
      break;
 8002dfc:	e021      	b.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f9e5 	bl	80031d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <TIM_Base_SetConfig+0xbc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x30>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <TIM_Base_SetConfig+0xc0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d007      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <TIM_Base_SetConfig+0xbc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <TIM_Base_SetConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <TIM_Base_SetConfig+0xc0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d108      	bne.n	8002f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <TIM_Base_SetConfig+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	615a      	str	r2, [r3, #20]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0201 	bic.w	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 0302 	bic.w	r3, r3, #2
 8002fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <TIM_OC1_SetConfig+0xc8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10c      	bne.n	8002fd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0308 	bic.w	r3, r3, #8
 8002fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a13      	ldr	r2, [pc, #76]	; (8003028 <TIM_OC1_SetConfig+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d111      	bne.n	8003002 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00

0800302c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0210 	bic.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0320 	bic.w	r3, r3, #32
 8003076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <TIM_OC2_SetConfig+0xd0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10d      	bne.n	80030a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <TIM_OC2_SetConfig+0xd0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d113      	bne.n	80030d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00

08003100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10d      	bne.n	800317a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <TIM_OC4_SetConfig+0x98>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00

08003270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2201      	movs	r2, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e046      	b.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d009      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10c      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800

08003374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e03d      	b.n	800340c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
	...

0800343c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003442:	f3ef 8305 	mrs	r3, IPSR
 8003446:	60bb      	str	r3, [r7, #8]
  return(result);
 8003448:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	607b      	str	r3, [r7, #4]
  return(result);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <osKernelInitialize+0x32>
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <osKernelInitialize+0x60>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d109      	bne.n	8003476 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003462:	f3ef 8311 	mrs	r3, BASEPRI
 8003466:	603b      	str	r3, [r7, #0]
  return(result);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800346e:	f06f 0305 	mvn.w	r3, #5
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e00c      	b.n	8003490 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <osKernelInitialize+0x60>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <osKernelInitialize+0x60>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e002      	b.n	8003490 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800348e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000094 	.word	0x20000094

080034a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a6:	f3ef 8305 	mrs	r3, IPSR
 80034aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80034ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	607b      	str	r3, [r7, #4]
  return(result);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <osKernelStart+0x32>
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <osKernelStart+0x64>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d109      	bne.n	80034da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034c6:	f3ef 8311 	mrs	r3, BASEPRI
 80034ca:	603b      	str	r3, [r7, #0]
  return(result);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <osKernelStart+0x3a>
    stat = osErrorISR;
 80034d2:	f06f 0305 	mvn.w	r3, #5
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e00e      	b.n	80034f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <osKernelStart+0x64>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <osKernelStart+0x64>)
 80034e4:	2202      	movs	r2, #2
 80034e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034e8:	f001 f878 	bl	80045dc <vTaskStartScheduler>
      stat = osOK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034f8:	68fb      	ldr	r3, [r7, #12]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000094 	.word	0x20000094

08003508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b092      	sub	sp, #72	; 0x48
 800350c:	af04      	add	r7, sp, #16
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003518:	f3ef 8305 	mrs	r3, IPSR
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 8094 	bne.w	800364e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	623b      	str	r3, [r7, #32]
  return(result);
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 808d 	bne.w	800364e <osThreadNew+0x146>
 8003534:	4b48      	ldr	r3, [pc, #288]	; (8003658 <osThreadNew+0x150>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d106      	bne.n	800354a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800353c:	f3ef 8311 	mrs	r3, BASEPRI
 8003540:	61fb      	str	r3, [r7, #28]
  return(result);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8082 	bne.w	800364e <osThreadNew+0x146>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d07e      	beq.n	800364e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003554:	2318      	movs	r3, #24
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003558:	2300      	movs	r3, #0
 800355a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800355c:	f107 031b 	add.w	r3, r7, #27
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d045      	beq.n	80035fa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <osThreadNew+0x74>
        name = attr->name;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <osThreadNew+0x9a>
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b38      	cmp	r3, #56	; 0x38
 8003594:	d805      	bhi.n	80035a2 <osThreadNew+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <osThreadNew+0x9e>
        return (NULL);
 80035a2:	2300      	movs	r3, #0
 80035a4:	e054      	b.n	8003650 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <osThreadNew+0xd4>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b5b      	cmp	r3, #91	; 0x5b
 80035c4:	d90a      	bls.n	80035dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <osThreadNew+0xd4>
        mem = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035da:	e010      	b.n	80035fe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10c      	bne.n	80035fe <osThreadNew+0xf6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <osThreadNew+0xf6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <osThreadNew+0xf6>
          mem = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f8:	e001      	b.n	80035fe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	2b01      	cmp	r3, #1
 8003602:	d110      	bne.n	8003626 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800360c:	9202      	str	r2, [sp, #8]
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003618:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fe12 	bl	8004244 <xTaskCreateStatic>
 8003620:	4603      	mov	r3, r0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e013      	b.n	800364e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d110      	bne.n	800364e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	b29a      	uxth	r2, r3
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fe5c 	bl	80042fc <xTaskCreate>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <osThreadNew+0x146>
          hTask = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800364e:	697b      	ldr	r3, [r7, #20]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3738      	adds	r7, #56	; 0x38
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000094 	.word	0x20000094

0800365c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003664:	f3ef 8305 	mrs	r3, IPSR
 8003668:	613b      	str	r3, [r7, #16]
  return(result);
 800366a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003670:	f3ef 8310 	mrs	r3, PRIMASK
 8003674:	60fb      	str	r3, [r7, #12]
  return(result);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <osDelay+0x34>
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <osDelay+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d109      	bne.n	8003698 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003684:	f3ef 8311 	mrs	r3, BASEPRI
 8003688:	60bb      	str	r3, [r7, #8]
  return(result);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <osDelay+0x3c>
    stat = osErrorISR;
 8003690:	f06f 0305 	mvn.w	r3, #5
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e007      	b.n	80036a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 ff66 	bl	8004574 <vTaskDelay>
    }
  }

  return (stat);
 80036a8:	697b      	ldr	r3, [r7, #20]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000094 	.word	0x20000094

080036b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <vApplicationGetIdleTaskMemory+0x28>)
 80036c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80036ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2280      	movs	r2, #128	; 0x80
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	20000098 	.word	0x20000098
 80036e4:	200000f4 	.word	0x200000f4

080036e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <vApplicationGetTimerTaskMemory+0x2c>)
 80036f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a06      	ldr	r2, [pc, #24]	; (8003718 <vApplicationGetTimerTaskMemory+0x30>)
 80036fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	200002f4 	.word	0x200002f4
 8003718:	20000350 	.word	0x20000350

0800371c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0208 	add.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 0208 	add.w	r2, r3, #8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f103 0208 	add.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ce:	d103      	bne.n	80037d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e00c      	b.n	80037f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3308      	adds	r3, #8
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e002      	b.n	80037e6 <vListInsert+0x2e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d2f6      	bcs.n	80037e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6892      	ldr	r2, [r2, #8]
 800383e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6852      	ldr	r2, [r2, #4]
 8003848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d103      	bne.n	800385c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	1e5a      	subs	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
	...

0800387c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038a6:	f001 ffc9 	bl	800583c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	441a      	add	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	3b01      	subs	r3, #1
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	441a      	add	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	22ff      	movs	r2, #255	; 0xff
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d114      	bne.n	8003926 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01a      	beq.n	800393a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3310      	adds	r3, #16
 8003908:	4618      	mov	r0, r3
 800390a:	f001 f8f1 	bl	8004af0 <xTaskRemoveFromEventList>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <xQueueGenericReset+0xcc>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	e009      	b.n	800393a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3310      	adds	r3, #16
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fef6 	bl	800371c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3324      	adds	r3, #36	; 0x24
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fef1 	bl	800371c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800393a:	f001 ffaf 	bl	800589c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	; 0x38
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <xQueueGenericCreateStatic+0x52>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <xQueueGenericCreateStatic+0x56>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <xQueueGenericCreateStatic+0x58>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <xQueueGenericCreateStatic+0x7e>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xQueueGenericCreateStatic+0x82>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueGenericCreateStatic+0x84>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61fb      	str	r3, [r7, #28]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ea:	2350      	movs	r3, #80	; 0x50
 80039ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b50      	cmp	r3, #80	; 0x50
 80039f2:	d00a      	beq.n	8003a0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61bb      	str	r3, [r7, #24]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f805 	bl	8003a3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e002      	b.n	8003a5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a68:	2101      	movs	r1, #1
 8003a6a:	69b8      	ldr	r0, [r7, #24]
 8003a6c:	f7ff ff06 	bl	800387c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d103      	bne.n	8003ac0 <xQueueGenericSend+0x40>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <xQueueGenericSend+0x44>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <xQueueGenericSend+0x46>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSend+0x6e>
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <xQueueGenericSend+0x72>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericSend+0x74>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	623b      	str	r3, [r7, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b0e:	f001 f9b1 	bl	8004e74 <xTaskGetSchedulerState>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <xQueueGenericSend+0x9e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0xa2>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0xa4>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	61fb      	str	r3, [r7, #28]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b3e:	f001 fe7d 	bl	800583c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <xQueueGenericSend+0xd4>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d129      	bne.n	8003ba8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b5a:	f000 fa07 	bl	8003f6c <prvCopyDataToQueue>
 8003b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ffbf 	bl	8004af0 <xTaskRemoveFromEventList>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	e00a      	b.n	8003ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ba0:	f001 fe7c 	bl	800589c <vPortExitCritical>
				return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e063      	b.n	8003c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bae:	f001 fe75 	bl	800589c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e05c      	b.n	8003c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fff9 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bca:	f001 fe67 	bl	800589c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bce:	f000 fd6b 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd2:	f001 fe33 	bl	800583c <vPortEnterCritical>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be2:	d103      	bne.n	8003bec <xQueueGenericSend+0x16c>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSend+0x182>
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c02:	f001 fe4b 	bl	800589c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c06:	1d3a      	adds	r2, r7, #4
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffe8 	bl	8004be4 <xTaskCheckForTimeOut>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d124      	bne.n	8003c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c1c:	f000 fa9e 	bl	800415c <prvIsQueueFull>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	3310      	adds	r3, #16
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ff0e 	bl	8004a50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c36:	f000 fa29 	bl	800408c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c3a:	f000 fd43 	bl	80046c4 <xTaskResumeAll>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f47f af7c 	bne.w	8003b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <xQueueGenericSend+0x1f8>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	e772      	b.n	8003b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5a:	f000 fa17 	bl	800408c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c5e:	f000 fd31 	bl	80046c4 <xTaskResumeAll>
 8003c62:	e76c      	b.n	8003b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa11 	bl	800408c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6a:	f000 fd2b 	bl	80046c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c6e:	2300      	movs	r3, #0
		}
	}
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3738      	adds	r7, #56	; 0x38
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08e      	sub	sp, #56	; 0x38
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <xQueueGenericSendFromISR+0x3c>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <xQueueGenericSendFromISR+0x40>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <xQueueGenericSendFromISR+0x42>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d103      	bne.n	8003ce6 <xQueueGenericSendFromISR+0x6a>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <xQueueGenericSendFromISR+0x6e>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <xQueueGenericSendFromISR+0x70>
 8003cea:	2300      	movs	r3, #0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61fb      	str	r3, [r7, #28]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d06:	f001 fe5b 	bl	80059c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61ba      	str	r2, [r7, #24]
 8003d20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <xQueueGenericSendFromISR+0xbc>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d12c      	bne.n	8003d92 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d48:	f000 f910 	bl	8003f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d54:	d112      	bne.n	8003d7c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fec4 	bl	8004af0 <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d90:	e001      	b.n	8003d96 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3738      	adds	r7, #56	; 0x38
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xQueueReceive+0x30>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	623b      	str	r3, [r7, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <xQueueReceive+0x3e>
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <xQueueReceive+0x42>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueReceive+0x44>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xQueueReceive+0x5e>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0a:	f001 f833 	bl	8004e74 <xTaskGetSchedulerState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <xQueueReceive+0x6e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <xQueueReceive+0x72>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <xQueueReceive+0x74>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xQueueReceive+0x8e>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	61bb      	str	r3, [r7, #24]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3a:	f001 fcff 	bl	800583c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01f      	beq.n	8003e8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4e:	f000 f8f7 	bl	8004040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	3310      	adds	r3, #16
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fe42 	bl	8004af0 <xTaskRemoveFromEventList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <xQueueReceive+0x1bc>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e82:	f001 fd0b 	bl	800589c <vPortExitCritical>
				return pdPASS;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e069      	b.n	8003f5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e90:	f001 fd04 	bl	800589c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e062      	b.n	8003f5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e9e:	f107 0310 	add.w	r3, r7, #16
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fe88 	bl	8004bb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eac:	f001 fcf6 	bl	800589c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eb0:	f000 fbfa 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eb4:	f001 fcc2 	bl	800583c <vPortEnterCritical>
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec4:	d103      	bne.n	8003ece <xQueueReceive+0x122>
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eda:	d103      	bne.n	8003ee4 <xQueueReceive+0x138>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	f001 fcda 	bl	800589c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ee8:	1d3a      	adds	r2, r7, #4
 8003eea:	f107 0310 	add.w	r3, r7, #16
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fe77 	bl	8004be4 <xTaskCheckForTimeOut>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d123      	bne.n	8003f44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efe:	f000 f917 	bl	8004130 <prvIsQueueEmpty>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d017      	beq.n	8003f38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	3324      	adds	r3, #36	; 0x24
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd9d 	bl	8004a50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f18:	f000 f8b8 	bl	800408c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f1c:	f000 fbd2 	bl	80046c4 <xTaskResumeAll>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d189      	bne.n	8003e3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xQueueReceive+0x1bc>)
 8003f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	e780      	b.n	8003e3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 f8a7 	bl	800408c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3e:	f000 fbc1 	bl	80046c4 <xTaskResumeAll>
 8003f42:	e77a      	b.n	8003e3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f46:	f000 f8a1 	bl	800408c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f4a:	f000 fbbb 	bl	80046c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f8ee 	bl	8004130 <prvIsQueueEmpty>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f43f af6f 	beq.w	8003e3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3730      	adds	r7, #48	; 0x30
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d14d      	bne.n	800402e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 ff8a 	bl	8004eb0 <xTaskPriorityDisinherit>
 8003f9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	e043      	b.n	800402e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d119      	bne.n	8003fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6898      	ldr	r0, [r3, #8]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	f001 ff42 	bl	8005e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d32b      	bcc.n	800402e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	e026      	b.n	800402e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68d8      	ldr	r0, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	f001 ff28 	bl	8005e40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d207      	bcs.n	800401c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	425b      	negs	r3, r3
 8004016:	441a      	add	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d105      	bne.n	800402e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3b01      	subs	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004036:	697b      	ldr	r3, [r7, #20]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d018      	beq.n	8004084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	441a      	add	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d303      	bcc.n	8004074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	461a      	mov	r2, r3
 800407e:	6838      	ldr	r0, [r7, #0]
 8004080:	f001 fede 	bl	8005e40 <memcpy>
	}
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004094:	f001 fbd2 	bl	800583c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800409e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040a0:	e011      	b.n	80040c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fd1e 	bl	8004af0 <xTaskRemoveFromEventList>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040ba:	f000 fdf5 	bl	8004ca8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	dce9      	bgt.n	80040a2 <prvUnlockQueue+0x16>
 80040ce:	e000      	b.n	80040d2 <prvUnlockQueue+0x46>
					break;
 80040d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040da:	f001 fbdf 	bl	800589c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040de:	f001 fbad 	bl	800583c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ea:	e011      	b.n	8004110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d012      	beq.n	800411a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3310      	adds	r3, #16
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fcf9 	bl	8004af0 <xTaskRemoveFromEventList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004104:	f000 fdd0 	bl	8004ca8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004108:	7bbb      	ldrb	r3, [r7, #14]
 800410a:	3b01      	subs	r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dce9      	bgt.n	80040ec <prvUnlockQueue+0x60>
 8004118:	e000      	b.n	800411c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800411a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	22ff      	movs	r2, #255	; 0xff
 8004120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004124:	f001 fbba 	bl	800589c <vPortExitCritical>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004138:	f001 fb80 	bl	800583c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e001      	b.n	800414e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800414e:	f001 fba5 	bl	800589c <vPortExitCritical>

	return xReturn;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004164:	f001 fb6a 	bl	800583c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	429a      	cmp	r2, r3
 8004172:	d102      	bne.n	800417a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e001      	b.n	800417e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800417e:	f001 fb8d 	bl	800589c <vPortExitCritical>

	return xReturn;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e014      	b.n	80041c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800419c:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <vQueueAddToRegistry+0x4c>)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041a8:	490b      	ldr	r1, [pc, #44]	; (80041d8 <vQueueAddToRegistry+0x4c>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <vQueueAddToRegistry+0x4c>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041be:	e006      	b.n	80041ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	d9e7      	bls.n	800419c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	20001a78 	.word	0x20001a78

080041dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041ec:	f001 fb26 	bl	800583c <vPortEnterCritical>
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fc:	d103      	bne.n	8004206 <vQueueWaitForMessageRestricted+0x2a>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800420c:	b25b      	sxtb	r3, r3
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004212:	d103      	bne.n	800421c <vQueueWaitForMessageRestricted+0x40>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	f001 fb3e 	bl	800589c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fc31 	bl	8004a98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff28 	bl	800408c <prvUnlockQueue>
	}
 800423c:	bf00      	nop
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	623b      	str	r3, [r7, #32]
}
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <xTaskCreateStatic+0x46>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	61fb      	str	r3, [r7, #28]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800428a:	235c      	movs	r3, #92	; 0x5c
 800428c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b5c      	cmp	r3, #92	; 0x5c
 8004292:	d00a      	beq.n	80042aa <xTaskCreateStatic+0x66>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	61bb      	str	r3, [r7, #24]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <xTaskCreateStatic+0xaa>
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01b      	beq.n	80042ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042c8:	2300      	movs	r3, #0
 80042ca:	9303      	str	r3, [sp, #12]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f850 	bl	8004386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e8:	f000 f8d4 	bl	8004494 <prvAddNewTaskToReadyList>
 80042ec:	e001      	b.n	80042f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042f2:	697b      	ldr	r3, [r7, #20]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af04      	add	r7, sp, #16
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fb93 	bl	8005a3c <pvPortMalloc>
 8004316:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800431e:	205c      	movs	r0, #92	; 0x5c
 8004320:	f001 fb8c 	bl	8005a3c <pvPortMalloc>
 8004324:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
 8004332:	e005      	b.n	8004340 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004334:	6978      	ldr	r0, [r7, #20]
 8004336:	f001 fc45 	bl	8005bc4 <vPortFree>
 800433a:	e001      	b.n	8004340 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d017      	beq.n	8004376 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	2300      	movs	r3, #0
 8004352:	9303      	str	r3, [sp, #12]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f80e 	bl	8004386 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800436a:	69f8      	ldr	r0, [r7, #28]
 800436c:	f000 f892 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004370:	2301      	movs	r3, #1
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e002      	b.n	800437c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800437a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800437c:	69bb      	ldr	r3, [r7, #24]
	}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b088      	sub	sp, #32
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	461a      	mov	r2, r3
 800439e:	21a5      	movs	r1, #165	; 0xa5
 80043a0:	f001 fd5c 	bl	8005e5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043ae:	3b01      	subs	r3, #1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f023 0307 	bic.w	r3, r3, #7
 80043bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <prvInitialiseNewTask+0x58>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	617b      	str	r3, [r7, #20]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e012      	b.n	800440a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	7819      	ldrb	r1, [r3, #0]
 80043ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	3334      	adds	r3, #52	; 0x34
 80043f4:	460a      	mov	r2, r1
 80043f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d9e9      	bls.n	80043e4 <prvInitialiseNewTask+0x5e>
 8004410:	e000      	b.n	8004414 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004412:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2b37      	cmp	r3, #55	; 0x37
 8004420:	d901      	bls.n	8004426 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004422:	2337      	movs	r3, #55	; 0x37
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	3304      	adds	r3, #4
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff f98c 	bl	800375a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f987 	bl	800375a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	69b8      	ldr	r0, [r7, #24]
 8004476:	f001 f8ef 	bl	8005658 <pxPortInitialiseStack>
 800447a:	4602      	mov	r2, r0
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f001 f9ce 	bl	800583c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a2a      	ldr	r2, [pc, #168]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 fc16 	bl	8004cf0 <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <prvAddNewTaskToReadyList+0xcc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <prvAddNewTaskToReadyList+0xd4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d903      	bls.n	8004508 <prvAddNewTaskToReadyList+0x74>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a18      	ldr	r2, [pc, #96]	; (8004568 <prvAddNewTaskToReadyList+0xd4>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <prvAddNewTaskToReadyList+0xd8>)
 8004516:	441a      	add	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f7ff f927 	bl	8003772 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004524:	f001 f9ba 	bl	800589c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvAddNewTaskToReadyList+0xc8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	429a      	cmp	r2, r3
 800453c:	d207      	bcs.n	800454e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <prvAddNewTaskToReadyList+0xdc>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000c24 	.word	0x20000c24
 800455c:	20000750 	.word	0x20000750
 8004560:	20000c30 	.word	0x20000c30
 8004564:	20000c40 	.word	0x20000c40
 8004568:	20000c2c 	.word	0x20000c2c
 800456c:	20000754 	.word	0x20000754
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <vTaskDelay+0x60>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <vTaskDelay+0x30>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60bb      	str	r3, [r7, #8]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045a4:	f000 f880 	bl	80046a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045a8:	2100      	movs	r1, #0
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fcee 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b0:	f000 f888 	bl	80046c4 <xTaskResumeAll>
 80045b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <vTaskDelay+0x64>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000c4c 	.word	0x20000c4c
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ea:	463a      	mov	r2, r7
 80045ec:	1d39      	adds	r1, r7, #4
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f860 	bl	80036b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	9202      	str	r2, [sp, #8]
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	2300      	movs	r3, #0
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	460a      	mov	r2, r1
 800460a:	4921      	ldr	r1, [pc, #132]	; (8004690 <vTaskStartScheduler+0xb4>)
 800460c:	4821      	ldr	r0, [pc, #132]	; (8004694 <vTaskStartScheduler+0xb8>)
 800460e:	f7ff fe19 	bl	8004244 <xTaskCreateStatic>
 8004612:	4603      	mov	r3, r0
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <vTaskStartScheduler+0xbc>)
 8004616:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004618:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <vTaskStartScheduler+0xbc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e001      	b.n	800462a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004630:	f000 fd00 	bl	8005034 <xTimerCreateTimerTask>
 8004634:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d116      	bne.n	800466a <vTaskStartScheduler+0x8e>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	613b      	str	r3, [r7, #16]
}
 800464e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004650:	4b12      	ldr	r3, [pc, #72]	; (800469c <vTaskStartScheduler+0xc0>)
 8004652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004656:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <vTaskStartScheduler+0xc4>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <vTaskStartScheduler+0xc8>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004664:	f001 f878 	bl	8005758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004668:	e00e      	b.n	8004688 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004670:	d10a      	bne.n	8004688 <vTaskStartScheduler+0xac>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60fb      	str	r3, [r7, #12]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <vTaskStartScheduler+0xaa>
}
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	08006730 	.word	0x08006730
 8004694:	08004cc1 	.word	0x08004cc1
 8004698:	20000c48 	.word	0x20000c48
 800469c:	20000c44 	.word	0x20000c44
 80046a0:	20000c30 	.word	0x20000c30
 80046a4:	20000c28 	.word	0x20000c28

080046a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	4a03      	ldr	r2, [pc, #12]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046b4:	6013      	str	r3, [r2, #0]
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000c4c 	.word	0x20000c4c

080046c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046d2:	4b42      	ldr	r3, [pc, #264]	; (80047dc <xTaskResumeAll+0x118>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046f0:	f001 f8a4 	bl	800583c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <xTaskResumeAll+0x118>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4a38      	ldr	r2, [pc, #224]	; (80047dc <xTaskResumeAll+0x118>)
 80046fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <xTaskResumeAll+0x118>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d162      	bne.n	80047cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <xTaskResumeAll+0x11c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d05e      	beq.n	80047cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800470e:	e02f      	b.n	8004770 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <xTaskResumeAll+0x120>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3318      	adds	r3, #24
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f883 	bl	8003828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f87e 	bl	8003828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <xTaskResumeAll+0x124>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d903      	bls.n	8004740 <xTaskResumeAll+0x7c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <xTaskResumeAll+0x124>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <xTaskResumeAll+0x128>)
 800474e:	441a      	add	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7ff f80b 	bl	8003772 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <xTaskResumeAll+0x12c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <xTaskResumeAll+0x130>)
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <xTaskResumeAll+0x120>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1cb      	bne.n	8004710 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800477e:	f000 fb55 	bl	8004e2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <xTaskResumeAll+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800478e:	f000 f845 	bl	800481c <xTaskIncrementTick>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <xTaskResumeAll+0x130>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f1      	bne.n	800478e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <xTaskResumeAll+0x134>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <xTaskResumeAll+0x130>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <xTaskResumeAll+0x138>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047cc:	f001 f866 	bl	800589c <vPortExitCritical>

	return xAlreadyYielded;
 80047d0:	68bb      	ldr	r3, [r7, #8]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000c4c 	.word	0x20000c4c
 80047e0:	20000c24 	.word	0x20000c24
 80047e4:	20000be4 	.word	0x20000be4
 80047e8:	20000c2c 	.word	0x20000c2c
 80047ec:	20000754 	.word	0x20000754
 80047f0:	20000750 	.word	0x20000750
 80047f4:	20000c38 	.word	0x20000c38
 80047f8:	20000c34 	.word	0x20000c34
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004806:	4b04      	ldr	r3, [pc, #16]	; (8004818 <xTaskGetTickCount+0x18>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800480c:	687b      	ldr	r3, [r7, #4]
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20000c28 	.word	0x20000c28

0800481c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004826:	4b51      	ldr	r3, [pc, #324]	; (800496c <xTaskIncrementTick+0x150>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 808e 	bne.w	800494c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <xTaskIncrementTick+0x154>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004838:	4a4d      	ldr	r2, [pc, #308]	; (8004970 <xTaskIncrementTick+0x154>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d120      	bne.n	8004886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <xTaskIncrementTick+0x158>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <xTaskIncrementTick+0x48>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	603b      	str	r3, [r7, #0]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xTaskIncrementTick+0x46>
 8004864:	4b43      	ldr	r3, [pc, #268]	; (8004974 <xTaskIncrementTick+0x158>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	4b43      	ldr	r3, [pc, #268]	; (8004978 <xTaskIncrementTick+0x15c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a41      	ldr	r2, [pc, #260]	; (8004974 <xTaskIncrementTick+0x158>)
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4a41      	ldr	r2, [pc, #260]	; (8004978 <xTaskIncrementTick+0x15c>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b40      	ldr	r3, [pc, #256]	; (800497c <xTaskIncrementTick+0x160>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a3f      	ldr	r2, [pc, #252]	; (800497c <xTaskIncrementTick+0x160>)
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	f000 fad3 	bl	8004e2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <xTaskIncrementTick+0x164>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d34e      	bcc.n	800492e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <xTaskIncrementTick+0x158>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xTaskIncrementTick+0x82>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xTaskIncrementTick+0x84>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a4:	4b36      	ldr	r3, [pc, #216]	; (8004980 <xTaskIncrementTick+0x164>)
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048aa:	601a      	str	r2, [r3, #0]
					break;
 80048ac:	e03f      	b.n	800492e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <xTaskIncrementTick+0x158>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d203      	bcs.n	80048ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048c6:	4a2e      	ldr	r2, [pc, #184]	; (8004980 <xTaskIncrementTick+0x164>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6013      	str	r3, [r2, #0]
						break;
 80048cc:	e02f      	b.n	800492e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe ffa8 	bl	8003828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3318      	adds	r3, #24
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe ff9f 	bl	8003828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <xTaskIncrementTick+0x168>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d903      	bls.n	80048fe <xTaskIncrementTick+0xe2>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <xTaskIncrementTick+0x168>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <xTaskIncrementTick+0x16c>)
 800490c:	441a      	add	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe ff2c 	bl	8003772 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <xTaskIncrementTick+0x170>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	429a      	cmp	r2, r3
 8004926:	d3b3      	bcc.n	8004890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492c:	e7b0      	b.n	8004890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <xTaskIncrementTick+0x170>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	4914      	ldr	r1, [pc, #80]	; (8004988 <xTaskIncrementTick+0x16c>)
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d907      	bls.n	8004956 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e004      	b.n	8004956 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <xTaskIncrementTick+0x174>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	4a0f      	ldr	r2, [pc, #60]	; (8004990 <xTaskIncrementTick+0x174>)
 8004954:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <xTaskIncrementTick+0x178>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004962:	697b      	ldr	r3, [r7, #20]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000c4c 	.word	0x20000c4c
 8004970:	20000c28 	.word	0x20000c28
 8004974:	20000bdc 	.word	0x20000bdc
 8004978:	20000be0 	.word	0x20000be0
 800497c:	20000c3c 	.word	0x20000c3c
 8004980:	20000c44 	.word	0x20000c44
 8004984:	20000c2c 	.word	0x20000c2c
 8004988:	20000754 	.word	0x20000754
 800498c:	20000750 	.word	0x20000750
 8004990:	20000c34 	.word	0x20000c34
 8004994:	20000c38 	.word	0x20000c38

08004998 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800499e:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <vTaskSwitchContext+0xa4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <vTaskSwitchContext+0xa8>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049ac:	e041      	b.n	8004a32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <vTaskSwitchContext+0xa8>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <vTaskSwitchContext+0xac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e010      	b.n	80049de <vTaskSwitchContext+0x46>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <vTaskSwitchContext+0x3e>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3b01      	subs	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	491a      	ldr	r1, [pc, #104]	; (8004a48 <vTaskSwitchContext+0xb0>)
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0e4      	beq.n	80049bc <vTaskSwitchContext+0x24>
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <vTaskSwitchContext+0xb0>)
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	3308      	adds	r3, #8
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d104      	bne.n	8004a22 <vTaskSwitchContext+0x8a>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <vTaskSwitchContext+0xb4>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4a05      	ldr	r2, [pc, #20]	; (8004a44 <vTaskSwitchContext+0xac>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6013      	str	r3, [r2, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	20000c4c 	.word	0x20000c4c
 8004a40:	20000c38 	.word	0x20000c38
 8004a44:	20000c2c 	.word	0x20000c2c
 8004a48:	20000754 	.word	0x20000754
 8004a4c:	20000750 	.word	0x20000750

08004a50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <vTaskPlaceOnEventList+0x44>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fe fe9a 	bl	80037b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a84:	2101      	movs	r1, #1
 8004a86:	6838      	ldr	r0, [r7, #0]
 8004a88:	f000 fa80 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000750 	.word	0x20000750

08004a98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	617b      	str	r3, [r7, #20]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <vTaskPlaceOnEventListRestricted+0x54>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3318      	adds	r3, #24
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fe fe52 	bl	8003772 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ad8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f000 fa55 	bl	8004f8c <prvAddCurrentTaskToDelayedList>
	}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000750 	.word	0x20000750

08004af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3318      	adds	r3, #24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe fe81 	bl	8003828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b26:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11d      	bne.n	8004b6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fe78 	bl	8003828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d903      	bls.n	8004b4c <xTaskRemoveFromEventList+0x5c>
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <xTaskRemoveFromEventList+0xb8>)
 8004b5a:	441a      	add	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7fe fe05 	bl	8003772 <vListInsertEnd>
 8004b68:	e005      	b.n	8004b76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	4619      	mov	r1, r3
 8004b70:	480e      	ldr	r0, [pc, #56]	; (8004bac <xTaskRemoveFromEventList+0xbc>)
 8004b72:	f7fe fdfe 	bl	8003772 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <xTaskRemoveFromEventList+0xc0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d905      	bls.n	8004b90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <xTaskRemoveFromEventList+0xc4>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e001      	b.n	8004b94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b94:	697b      	ldr	r3, [r7, #20]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000c4c 	.word	0x20000c4c
 8004ba4:	20000c2c 	.word	0x20000c2c
 8004ba8:	20000754 	.word	0x20000754
 8004bac:	20000be4 	.word	0x20000be4
 8004bb0:	20000750 	.word	0x20000750
 8004bb4:	20000c38 	.word	0x20000c38

08004bb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <vTaskInternalSetTimeOutState+0x24>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <vTaskInternalSetTimeOutState+0x28>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	605a      	str	r2, [r3, #4]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000c3c 	.word	0x20000c3c
 8004be0:	20000c28 	.word	0x20000c28

08004be4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	613b      	str	r3, [r7, #16]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c26:	f000 fe09 	bl	800583c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <xTaskCheckForTimeOut+0xbc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c42:	d102      	bne.n	8004c4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e023      	b.n	8004c92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <xTaskCheckForTimeOut+0xc0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d007      	beq.n	8004c66 <xTaskCheckForTimeOut+0x82>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e015      	b.n	8004c92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d20b      	bcs.n	8004c88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff9b 	bl	8004bb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e004      	b.n	8004c92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c92:	f000 fe03 	bl	800589c <vPortExitCritical>

	return xReturn;
 8004c96:	69fb      	ldr	r3, [r7, #28]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000c28 	.word	0x20000c28
 8004ca4:	20000c3c 	.word	0x20000c3c

08004ca8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <vTaskMissedYield+0x14>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000c38 	.word	0x20000c38

08004cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc8:	f000 f852 	bl	8004d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <prvIdleTask+0x28>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d9f9      	bls.n	8004cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <prvIdleTask+0x2c>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ce4:	e7f0      	b.n	8004cc8 <prvIdleTask+0x8>
 8004ce6:	bf00      	nop
 8004ce8:	20000754 	.word	0x20000754
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	e00c      	b.n	8004d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <prvInitialiseTaskLists+0x60>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fd06 	bl	800371c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3301      	adds	r3, #1
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b37      	cmp	r3, #55	; 0x37
 8004d1a:	d9ef      	bls.n	8004cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d1c:	480d      	ldr	r0, [pc, #52]	; (8004d54 <prvInitialiseTaskLists+0x64>)
 8004d1e:	f7fe fcfd 	bl	800371c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d22:	480d      	ldr	r0, [pc, #52]	; (8004d58 <prvInitialiseTaskLists+0x68>)
 8004d24:	f7fe fcfa 	bl	800371c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d28:	480c      	ldr	r0, [pc, #48]	; (8004d5c <prvInitialiseTaskLists+0x6c>)
 8004d2a:	f7fe fcf7 	bl	800371c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d2e:	480c      	ldr	r0, [pc, #48]	; (8004d60 <prvInitialiseTaskLists+0x70>)
 8004d30:	f7fe fcf4 	bl	800371c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d34:	480b      	ldr	r0, [pc, #44]	; (8004d64 <prvInitialiseTaskLists+0x74>)
 8004d36:	f7fe fcf1 	bl	800371c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvInitialiseTaskLists+0x78>)
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <prvInitialiseTaskLists+0x64>)
 8004d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <prvInitialiseTaskLists+0x7c>)
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <prvInitialiseTaskLists+0x68>)
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000754 	.word	0x20000754
 8004d54:	20000bb4 	.word	0x20000bb4
 8004d58:	20000bc8 	.word	0x20000bc8
 8004d5c:	20000be4 	.word	0x20000be4
 8004d60:	20000bf8 	.word	0x20000bf8
 8004d64:	20000c10 	.word	0x20000c10
 8004d68:	20000bdc 	.word	0x20000bdc
 8004d6c:	20000be0 	.word	0x20000be0

08004d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d76:	e019      	b.n	8004dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d78:	f000 fd60 	bl	800583c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <prvCheckTasksWaitingTermination+0x50>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fd4d 	bl	8003828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <prvCheckTasksWaitingTermination+0x54>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <prvCheckTasksWaitingTermination+0x54>)
 8004d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004da2:	f000 fd7b 	bl	800589c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f810 	bl	8004dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e1      	bne.n	8004d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000bf8 	.word	0x20000bf8
 8004dc4:	20000c24 	.word	0x20000c24
 8004dc8:	20000c0c 	.word	0x20000c0c

08004dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d108      	bne.n	8004df0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 feee 	bl	8005bc4 <vPortFree>
				vPortFree( pxTCB );
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 feeb 	bl	8005bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dee:	e018      	b.n	8004e22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d103      	bne.n	8004e02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fee2 	bl	8005bc4 <vPortFree>
	}
 8004e00:	e00f      	b.n	8004e22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d00a      	beq.n	8004e22 <prvDeleteTCB+0x56>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	60fb      	str	r3, [r7, #12]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <prvDeleteTCB+0x54>
	}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e32:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <prvResetNextTaskUnblockTime+0x40>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <prvResetNextTaskUnblockTime+0x14>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <prvResetNextTaskUnblockTime+0x16>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <prvResetNextTaskUnblockTime+0x44>)
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e4e:	e008      	b.n	8004e62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <prvResetNextTaskUnblockTime+0x40>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <prvResetNextTaskUnblockTime+0x44>)
 8004e60:	6013      	str	r3, [r2, #0]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	20000bdc 	.word	0x20000bdc
 8004e70:	20000c44 	.word	0x20000c44

08004e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <xTaskGetSchedulerState+0x34>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e82:	2301      	movs	r3, #1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e008      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <xTaskGetSchedulerState+0x38>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e90:	2302      	movs	r3, #2
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	e001      	b.n	8004e9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e9a:	687b      	ldr	r3, [r7, #4]
	}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000c30 	.word	0x20000c30
 8004eac:	20000c4c 	.word	0x20000c4c

08004eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d056      	beq.n	8004f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <xTaskPriorityDisinherit+0xd0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d00a      	beq.n	8004ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60bb      	str	r3, [r7, #8]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d02c      	beq.n	8004f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d128      	bne.n	8004f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fc7e 	bl	8003828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskPriorityDisinherit+0xd4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d903      	bls.n	8004f54 <xTaskPriorityDisinherit+0xa4>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <xTaskPriorityDisinherit+0xd4>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <xTaskPriorityDisinherit+0xd8>)
 8004f62:	441a      	add	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe fc01 	bl	8003772 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f74:	697b      	ldr	r3, [r7, #20]
	}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000750 	.word	0x20000750
 8004f84:	20000c2c 	.word	0x20000c2c
 8004f88:	20000754 	.word	0x20000754

08004f8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <prvAddCurrentTaskToDelayedList+0x90>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f9c:	4b20      	ldr	r3, [pc, #128]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fc40 	bl	8003828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fae:	d10a      	bne.n	8004fc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4819      	ldr	r0, [pc, #100]	; (8005024 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fc0:	f7fe fbd7 	bl	8003772 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fc4:	e026      	b.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fce:	4b14      	ldr	r3, [pc, #80]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d209      	bcs.n	8004ff2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fe fbe4 	bl	80037b8 <vListInsert>
}
 8004ff0:	e010      	b.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe fbda 	bl	80037b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d202      	bcs.n	8005014 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800500e:	4a08      	ldr	r2, [pc, #32]	; (8005030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6013      	str	r3, [r2, #0]
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000c28 	.word	0x20000c28
 8005020:	20000750 	.word	0x20000750
 8005024:	20000c10 	.word	0x20000c10
 8005028:	20000be0 	.word	0x20000be0
 800502c:	20000bdc 	.word	0x20000bdc
 8005030:	20000c44 	.word	0x20000c44

08005034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	; 0x28
 8005038:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800503e:	f000 facb 	bl	80055d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <xTimerCreateTimerTask+0x80>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d021      	beq.n	800508e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005052:	1d3a      	adds	r2, r7, #4
 8005054:	f107 0108 	add.w	r1, r7, #8
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fb43 	bl	80036e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	9202      	str	r2, [sp, #8]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	2302      	movs	r3, #2
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	460a      	mov	r2, r1
 8005074:	4910      	ldr	r1, [pc, #64]	; (80050b8 <xTimerCreateTimerTask+0x84>)
 8005076:	4811      	ldr	r0, [pc, #68]	; (80050bc <xTimerCreateTimerTask+0x88>)
 8005078:	f7ff f8e4 	bl	8004244 <xTaskCreateStatic>
 800507c:	4603      	mov	r3, r0
 800507e:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <xTimerCreateTimerTask+0x8c>)
 8005080:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <xTimerCreateTimerTask+0x8c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800508a:	2301      	movs	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	613b      	str	r3, [r7, #16]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000c80 	.word	0x20000c80
 80050b8:	08006738 	.word	0x08006738
 80050bc:	080051e1 	.word	0x080051e1
 80050c0:	20000c84 	.word	0x20000c84

080050c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <xTimerGenericCommand+0x98>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02a      	beq.n	8005150 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b05      	cmp	r3, #5
 800510a:	dc18      	bgt.n	800513e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800510c:	f7ff feb2 	bl	8004e74 <xTaskGetSchedulerState>
 8005110:	4603      	mov	r3, r0
 8005112:	2b02      	cmp	r3, #2
 8005114:	d109      	bne.n	800512a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <xTimerGenericCommand+0x98>)
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f107 0110 	add.w	r1, r7, #16
 800511e:	2300      	movs	r3, #0
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	f7fe fcad 	bl	8003a80 <xQueueGenericSend>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24
 8005128:	e012      	b.n	8005150 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <xTimerGenericCommand+0x98>)
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	f107 0110 	add.w	r1, r7, #16
 8005132:	2300      	movs	r3, #0
 8005134:	2200      	movs	r2, #0
 8005136:	f7fe fca3 	bl	8003a80 <xQueueGenericSend>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24
 800513c:	e008      	b.n	8005150 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <xTimerGenericCommand+0x98>)
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f107 0110 	add.w	r1, r7, #16
 8005146:	2300      	movs	r3, #0
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	f7fe fd97 	bl	8003c7c <xQueueGenericSendFromISR>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	; 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000c80 	.word	0x20000c80

08005160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800516a:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <prvProcessExpiredTimer+0x7c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fb55 	bl	8003828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d122      	bne.n	80051cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	18d1      	adds	r1, r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	6978      	ldr	r0, [r7, #20]
 8005194:	f000 f8c8 	bl	8005328 <prvInsertTimerInActiveList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800519e:	2300      	movs	r3, #0
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2300      	movs	r3, #0
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	2100      	movs	r1, #0
 80051a8:	6978      	ldr	r0, [r7, #20]
 80051aa:	f7ff ff8b 	bl	80050c4 <xTimerGenericCommand>
 80051ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	6978      	ldr	r0, [r7, #20]
 80051d2:	4798      	blx	r3
}
 80051d4:	bf00      	nop
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000c78 	.word	0x20000c78

080051e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f857 	bl	80052a0 <prvGetNextExpireTime>
 80051f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4619      	mov	r1, r3
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f803 	bl	8005204 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051fe:	f000 f8d5 	bl	80053ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005202:	e7f1      	b.n	80051e8 <prvTimerTask+0x8>

08005204 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800520e:	f7ff fa4b 	bl	80046a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005212:	f107 0308 	add.w	r3, r7, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f866 	bl	80052e8 <prvSampleTimeNow>
 800521c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d130      	bne.n	8005286 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <prvProcessTimerOrBlockTask+0x3c>
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	429a      	cmp	r2, r3
 8005230:	d806      	bhi.n	8005240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005232:	f7ff fa47 	bl	80046c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff91 	bl	8005160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800523e:	e024      	b.n	800528a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d008      	beq.n	8005258 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <prvProcessTimerOrBlockTask+0x90>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <prvProcessTimerOrBlockTask+0x94>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	f7fe ffb9 	bl	80041dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800526a:	f7ff fa2b 	bl	80046c4 <xTaskResumeAll>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <prvProcessTimerOrBlockTask+0x98>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
}
 8005284:	e001      	b.n	800528a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005286:	f7ff fa1d 	bl	80046c4 <xTaskResumeAll>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000c7c 	.word	0x20000c7c
 8005298:	20000c80 	.word	0x20000c80
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <prvGetNextExpireTime+0x44>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d105      	bne.n	80052d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <prvGetNextExpireTime+0x44>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e001      	b.n	80052d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000c78 	.word	0x20000c78

080052e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052f0:	f7ff fa86 	bl	8004800 <xTaskGetTickCount>
 80052f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <prvSampleTimeNow+0x3c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d205      	bcs.n	800530c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005300:	f000 f908 	bl	8005514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e002      	b.n	8005312 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005312:	4a04      	ldr	r2, [pc, #16]	; (8005324 <prvSampleTimeNow+0x3c>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000c88 	.word	0x20000c88

08005328 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d812      	bhi.n	8005374 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	1ad2      	subs	r2, r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e01b      	b.n	800539a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <prvInsertTimerInActiveList+0x7c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f7fe fa23 	bl	80037b8 <vListInsert>
 8005372:	e012      	b.n	800539a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d206      	bcs.n	800538a <prvInsertTimerInActiveList+0x62>
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e007      	b.n	800539a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <prvInsertTimerInActiveList+0x80>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7fe fa0f 	bl	80037b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000c7c 	.word	0x20000c7c
 80053a8:	20000c78 	.word	0x20000c78

080053ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	; 0x38
 80053b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053b2:	e09d      	b.n	80054f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da18      	bge.n	80053ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	3304      	adds	r3, #4
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61fb      	str	r3, [r7, #28]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e2:	6850      	ldr	r0, [r2, #4]
 80053e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e6:	6892      	ldr	r2, [r2, #8]
 80053e8:	4611      	mov	r1, r2
 80053ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	db7d      	blt.n	80054ee <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fa10 	bl	8003828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005408:	463b      	mov	r3, r7
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff6c 	bl	80052e8 <prvSampleTimeNow>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b09      	cmp	r3, #9
 8005416:	d86b      	bhi.n	80054f0 <prvProcessReceivedCommands+0x144>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <prvProcessReceivedCommands+0x74>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005449 	.word	0x08005449
 8005424:	08005449 	.word	0x08005449
 8005428:	08005449 	.word	0x08005449
 800542c:	080054f1 	.word	0x080054f1
 8005430:	080054a5 	.word	0x080054a5
 8005434:	080054dd 	.word	0x080054dd
 8005438:	08005449 	.word	0x08005449
 800543c:	08005449 	.word	0x08005449
 8005440:	080054f1 	.word	0x080054f1
 8005444:	080054a5 	.word	0x080054a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	18d1      	adds	r1, r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005456:	f7ff ff67 	bl	8005328 <prvInsertTimerInActiveList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d047      	beq.n	80054f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005466:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d13f      	bne.n	80054f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	441a      	add	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	2100      	movs	r1, #0
 8005480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005482:	f7ff fe1f 	bl	80050c4 <xTimerGenericCommand>
 8005486:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d130      	bne.n	80054f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	61bb      	str	r3, [r7, #24]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	617b      	str	r3, [r7, #20]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	18d1      	adds	r1, r2, r3
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d6:	f7ff ff27 	bl	8005328 <prvInsertTimerInActiveList>
					break;
 80054da:	e009      	b.n	80054f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80054e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e8:	f000 fb6c 	bl	8005bc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054ec:	e000      	b.n	80054f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <prvProcessReceivedCommands+0x164>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	1d39      	adds	r1, r7, #4
 80054f6:	2200      	movs	r2, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe fc57 	bl	8003dac <xQueueReceive>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af57 	bne.w	80053b4 <prvProcessReceivedCommands+0x8>
	}
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	3730      	adds	r7, #48	; 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000c80 	.word	0x20000c80

08005514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800551a:	e045      	b.n	80055a8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe f977 	bl	8003828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d12e      	bne.n	80055a8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d90e      	bls.n	800557a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fe f920 	bl	80037b8 <vListInsert>
 8005578:	e016      	b.n	80055a8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	2100      	movs	r1, #0
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff fd9d 	bl	80050c4 <xTimerGenericCommand>
 800558a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	603b      	str	r3, [r7, #0]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1b4      	bne.n	800551c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <prvSwitchTimerLists+0xc0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <prvSwitchTimerLists+0xbc>)
 80055be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <prvSwitchTimerLists+0xc0>)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6013      	str	r3, [r2, #0]
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000c78 	.word	0x20000c78
 80055d4:	20000c7c 	.word	0x20000c7c

080055d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055de:	f000 f92d 	bl	800583c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <prvCheckForValidListAndQueue+0x60>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d120      	bne.n	800562c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055ea:	4814      	ldr	r0, [pc, #80]	; (800563c <prvCheckForValidListAndQueue+0x64>)
 80055ec:	f7fe f896 	bl	800371c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055f0:	4813      	ldr	r0, [pc, #76]	; (8005640 <prvCheckForValidListAndQueue+0x68>)
 80055f2:	f7fe f893 	bl	800371c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <prvCheckForValidListAndQueue+0x6c>)
 80055f8:	4a10      	ldr	r2, [pc, #64]	; (800563c <prvCheckForValidListAndQueue+0x64>)
 80055fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <prvCheckForValidListAndQueue+0x70>)
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <prvCheckForValidListAndQueue+0x68>)
 8005600:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4b11      	ldr	r3, [pc, #68]	; (800564c <prvCheckForValidListAndQueue+0x74>)
 8005608:	4a11      	ldr	r2, [pc, #68]	; (8005650 <prvCheckForValidListAndQueue+0x78>)
 800560a:	2110      	movs	r1, #16
 800560c:	200a      	movs	r0, #10
 800560e:	f7fe f99d 	bl	800394c <xQueueGenericCreateStatic>
 8005612:	4603      	mov	r3, r0
 8005614:	4a08      	ldr	r2, [pc, #32]	; (8005638 <prvCheckForValidListAndQueue+0x60>)
 8005616:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <prvCheckForValidListAndQueue+0x60>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <prvCheckForValidListAndQueue+0x60>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	490b      	ldr	r1, [pc, #44]	; (8005654 <prvCheckForValidListAndQueue+0x7c>)
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fdb0 	bl	800418c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800562c:	f000 f936 	bl	800589c <vPortExitCritical>
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000c80 	.word	0x20000c80
 800563c:	20000c50 	.word	0x20000c50
 8005640:	20000c64 	.word	0x20000c64
 8005644:	20000c78 	.word	0x20000c78
 8005648:	20000c7c 	.word	0x20000c7c
 800564c:	20000d2c 	.word	0x20000d2c
 8005650:	20000c8c 	.word	0x20000c8c
 8005654:	08006740 	.word	0x08006740

08005658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b04      	subs	r3, #4
 8005668:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b04      	subs	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b04      	subs	r3, #4
 8005686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005688:	4a08      	ldr	r2, [pc, #32]	; (80056ac <pxPortInitialiseStack+0x54>)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b14      	subs	r3, #20
 8005692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3b20      	subs	r3, #32
 800569e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056a0:	68fb      	ldr	r3, [r7, #12]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	080056b1 	.word	0x080056b1

080056b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ba:	4b12      	ldr	r3, [pc, #72]	; (8005704 <prvTaskExitError+0x54>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c2:	d00a      	beq.n	80056da <prvTaskExitError+0x2a>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <prvTaskExitError+0x28>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
}
 80056ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056ee:	bf00      	nop
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0fc      	beq.n	80056f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c
	...

08005710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005710:	4b07      	ldr	r3, [pc, #28]	; (8005730 <pxCurrentTCBConst2>)
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	6808      	ldr	r0, [r1, #0]
 8005716:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800571a:	f380 8809 	msr	PSP, r0
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f380 8811 	msr	BASEPRI, r0
 800572a:	f04e 0e0d 	orr.w	lr, lr, #13
 800572e:	4770      	bx	lr

08005730 <pxCurrentTCBConst2>:
 8005730:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005738:	4806      	ldr	r0, [pc, #24]	; (8005754 <prvPortStartFirstTask+0x1c>)
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	6800      	ldr	r0, [r0, #0]
 800573e:	f380 8808 	msr	MSP, r0
 8005742:	b662      	cpsie	i
 8005744:	b661      	cpsie	f
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	df00      	svc	0
 8005750:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005752:	bf00      	nop
 8005754:	e000ed08 	.word	0xe000ed08

08005758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800575e:	4b32      	ldr	r3, [pc, #200]	; (8005828 <xPortStartScheduler+0xd0>)
 8005760:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22ff      	movs	r2, #255	; 0xff
 800576e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4b2a      	ldr	r3, [pc, #168]	; (800582c <xPortStartScheduler+0xd4>)
 8005784:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <xPortStartScheduler+0xd8>)
 8005788:	2207      	movs	r2, #7
 800578a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800578c:	e009      	b.n	80057a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800578e:	4b28      	ldr	r3, [pc, #160]	; (8005830 <xPortStartScheduler+0xd8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3b01      	subs	r3, #1
 8005794:	4a26      	ldr	r2, [pc, #152]	; (8005830 <xPortStartScheduler+0xd8>)
 8005796:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d0ef      	beq.n	800578e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <xPortStartScheduler+0xd8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1c3 0307 	rsb	r3, r3, #7
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d00a      	beq.n	80057d0 <xPortStartScheduler+0x78>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60bb      	str	r3, [r7, #8]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d0:	4b17      	ldr	r3, [pc, #92]	; (8005830 <xPortStartScheduler+0xd8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <xPortStartScheduler+0xd8>)
 80057d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <xPortStartScheduler+0xd8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <xPortStartScheduler+0xd8>)
 80057e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <xPortStartScheduler+0xdc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <xPortStartScheduler+0xdc>)
 80057f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057fa:	4b0e      	ldr	r3, [pc, #56]	; (8005834 <xPortStartScheduler+0xdc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a0d      	ldr	r2, [pc, #52]	; (8005834 <xPortStartScheduler+0xdc>)
 8005800:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005804:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005806:	f000 f8b9 	bl	800597c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <xPortStartScheduler+0xe0>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005810:	f7ff ff92 	bl	8005738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005814:	f7ff f8c0 	bl	8004998 <vTaskSwitchContext>
	prvTaskExitError();
 8005818:	f7ff ff4a 	bl	80056b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	e000e400 	.word	0xe000e400
 800582c:	20000d7c 	.word	0x20000d7c
 8005830:	20000d80 	.word	0x20000d80
 8005834:	e000ed20 	.word	0xe000ed20
 8005838:	2000000c 	.word	0x2000000c

0800583c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	607b      	str	r3, [r7, #4]
}
 8005854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <vPortEnterCritical+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3301      	adds	r3, #1
 800585c:	4a0d      	ldr	r2, [pc, #52]	; (8005894 <vPortEnterCritical+0x58>)
 800585e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <vPortEnterCritical+0x58>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10f      	bne.n	8005888 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <vPortEnterCritical+0x5c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <vPortEnterCritical+0x4c>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	603b      	str	r3, [r7, #0]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <vPortEnterCritical+0x4a>
	}
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <vPortExitCritical+0x4c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <vPortExitCritical+0x24>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	607b      	str	r3, [r7, #4]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <vPortExitCritical+0x4c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <vPortExitCritical+0x4c>)
 80058c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <vPortExitCritical+0x4c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <vPortExitCritical+0x42>
 80058d2:	2300      	movs	r3, #0
 80058d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f383 8811 	msr	BASEPRI, r3
}
 80058dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	2000000c 	.word	0x2000000c
 80058ec:	00000000 	.word	0x00000000

080058f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058f0:	f3ef 8009 	mrs	r0, PSP
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <pxCurrentTCBConst>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005900:	6010      	str	r0, [r2, #0]
 8005902:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005906:	f04f 0050 	mov.w	r0, #80	; 0x50
 800590a:	f380 8811 	msr	BASEPRI, r0
 800590e:	f7ff f843 	bl	8004998 <vTaskSwitchContext>
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8811 	msr	BASEPRI, r0
 800591a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005926:	f380 8809 	msr	PSP, r0
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	4770      	bx	lr

08005930 <pxCurrentTCBConst>:
 8005930:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	607b      	str	r3, [r7, #4]
}
 8005950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005952:	f7fe ff63 	bl	800481c <xTaskIncrementTick>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <SysTick_Handler+0x40>)
 800595e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f383 8811 	msr	BASEPRI, r3
}
 800596e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <vPortSetupTimerInterrupt+0x30>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <vPortSetupTimerInterrupt+0x34>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <vPortSetupTimerInterrupt+0x38>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <vPortSetupTimerInterrupt+0x3c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <vPortSetupTimerInterrupt+0x40>)
 800599a:	3b01      	subs	r3, #1
 800599c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <vPortSetupTimerInterrupt+0x30>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr
 80059ac:	e000e010 	.word	0xe000e010
 80059b0:	e000e018 	.word	0xe000e018
 80059b4:	20000000 	.word	0x20000000
 80059b8:	10624dd3 	.word	0x10624dd3
 80059bc:	e000e014 	.word	0xe000e014

080059c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059c6:	f3ef 8305 	mrs	r3, IPSR
 80059ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	d914      	bls.n	80059fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059d2:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <vPortValidateInterruptPriority+0x6c>)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059dc:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <vPortValidateInterruptPriority+0x70>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	7afa      	ldrb	r2, [r7, #11]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d20a      	bcs.n	80059fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	607b      	str	r3, [r7, #4]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <vPortValidateInterruptPriority+0x74>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <vPortValidateInterruptPriority+0x78>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d90a      	bls.n	8005a22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	603b      	str	r3, [r7, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <vPortValidateInterruptPriority+0x60>
	}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	e000e3f0 	.word	0xe000e3f0
 8005a30:	20000d7c 	.word	0x20000d7c
 8005a34:	e000ed0c 	.word	0xe000ed0c
 8005a38:	20000d80 	.word	0x20000d80

08005a3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a48:	f7fe fe2e 	bl	80046a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a4c:	4b58      	ldr	r3, [pc, #352]	; (8005bb0 <pvPortMalloc+0x174>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a54:	f000 f910 	bl	8005c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a58:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <pvPortMalloc+0x178>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 808e 	bne.w	8005b82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01d      	beq.n	8005aa8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4413      	add	r3, r2
 8005a72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d014      	beq.n	8005aa8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f023 0307 	bic.w	r3, r3, #7
 8005a84:	3308      	adds	r3, #8
 8005a86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <pvPortMalloc+0x6c>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	617b      	str	r3, [r7, #20]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d069      	beq.n	8005b82 <pvPortMalloc+0x146>
 8005aae:	4b42      	ldr	r3, [pc, #264]	; (8005bb8 <pvPortMalloc+0x17c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d864      	bhi.n	8005b82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ab8:	4b40      	ldr	r3, [pc, #256]	; (8005bbc <pvPortMalloc+0x180>)
 8005aba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005abc:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <pvPortMalloc+0x180>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac2:	e004      	b.n	8005ace <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d903      	bls.n	8005ae0 <pvPortMalloc+0xa4>
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f1      	bne.n	8005ac4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ae0:	4b33      	ldr	r3, [pc, #204]	; (8005bb0 <pvPortMalloc+0x174>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d04b      	beq.n	8005b82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2208      	movs	r2, #8
 8005af0:	4413      	add	r3, r2
 8005af2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	2308      	movs	r3, #8
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d91f      	bls.n	8005b4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <pvPortMalloc+0xf8>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	613b      	str	r3, [r7, #16]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b46:	69b8      	ldr	r0, [r7, #24]
 8005b48:	f000 f8f8 	bl	8005d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <pvPortMalloc+0x17c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <pvPortMalloc+0x17c>)
 8005b58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b5a:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <pvPortMalloc+0x17c>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <pvPortMalloc+0x184>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d203      	bcs.n	8005b6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <pvPortMalloc+0x17c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <pvPortMalloc+0x184>)
 8005b6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <pvPortMalloc+0x178>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b82:	f7fe fd9f 	bl	80046c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <pvPortMalloc+0x16a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <pvPortMalloc+0x168>
	return pvReturn;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	2000198c 	.word	0x2000198c
 8005bb4:	20001998 	.word	0x20001998
 8005bb8:	20001990 	.word	0x20001990
 8005bbc:	20001984 	.word	0x20001984
 8005bc0:	20001994 	.word	0x20001994

08005bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d048      	beq.n	8005c68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	425b      	negs	r3, r3
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <vPortFree+0xac>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vPortFree+0x44>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <vPortFree+0x62>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60bb      	str	r3, [r7, #8]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <vPortFree+0xac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d019      	beq.n	8005c68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortFree+0xac>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c4c:	f7fe fd2c 	bl	80046a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <vPortFree+0xb0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vPortFree+0xb0>)
 8005c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f000 f86c 	bl	8005d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c64:	f7fe fd2e 	bl	80046c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20001998 	.word	0x20001998
 8005c74:	20001990 	.word	0x20001990

08005c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <prvHeapInit+0xac>)
 8005c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3307      	adds	r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <prvHeapInit+0xac>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <prvHeapInit+0xb4>)
 8005cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <prvHeapInit+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <prvHeapInit+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <prvHeapInit+0xb4>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <prvHeapInit+0xb8>)
 8005d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <prvHeapInit+0xbc>)
 8005d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <prvHeapInit+0xc0>)
 8005d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000d84 	.word	0x20000d84
 8005d28:	20001984 	.word	0x20001984
 8005d2c:	2000198c 	.word	0x2000198c
 8005d30:	20001994 	.word	0x20001994
 8005d34:	20001990 	.word	0x20001990
 8005d38:	20001998 	.word	0x20001998

08005d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d44:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <prvInsertBlockIntoFreeList+0xa8>)
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e002      	b.n	8005d50 <prvInsertBlockIntoFreeList+0x14>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d8f7      	bhi.n	8005d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d108      	bne.n	8005d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d118      	bne.n	8005dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <prvInsertBlockIntoFreeList+0xac>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d00d      	beq.n	8005dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e008      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvInsertBlockIntoFreeList+0xac>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	20001984 	.word	0x20001984
 8005de8:	2000198c 	.word	0x2000198c

08005dec <__errno>:
 8005dec:	4b01      	ldr	r3, [pc, #4]	; (8005df4 <__errno+0x8>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000010 	.word	0x20000010

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	4d0c      	ldr	r5, [pc, #48]	; (8005e30 <__libc_init_array+0x38>)
 8005dfe:	4c0d      	ldr	r4, [pc, #52]	; (8005e34 <__libc_init_array+0x3c>)
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	f000 fc5c 	bl	80066c4 <_init>
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	4d0a      	ldr	r5, [pc, #40]	; (8005e38 <__libc_init_array+0x40>)
 8005e10:	4c0a      	ldr	r4, [pc, #40]	; (8005e3c <__libc_init_array+0x44>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	08006800 	.word	0x08006800
 8005e34:	08006800 	.word	0x08006800
 8005e38:	08006800 	.word	0x08006800
 8005e3c:	08006804 	.word	0x08006804

08005e40 <memcpy>:
 8005e40:	440a      	add	r2, r1
 8005e42:	4291      	cmp	r1, r2
 8005e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e48:	d100      	bne.n	8005e4c <memcpy+0xc>
 8005e4a:	4770      	bx	lr
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e52:	4291      	cmp	r1, r2
 8005e54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e58:	d1f9      	bne.n	8005e4e <memcpy+0xe>
 8005e5a:	bd10      	pop	{r4, pc}

08005e5c <memset>:
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4402      	add	r2, r0
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d100      	bne.n	8005e66 <memset+0xa>
 8005e64:	4770      	bx	lr
 8005e66:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6a:	e7f9      	b.n	8005e60 <memset+0x4>

08005e6c <siprintf>:
 8005e6c:	b40e      	push	{r1, r2, r3}
 8005e6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e72:	b500      	push	{lr}
 8005e74:	b09c      	sub	sp, #112	; 0x70
 8005e76:	ab1d      	add	r3, sp, #116	; 0x74
 8005e78:	9002      	str	r0, [sp, #8]
 8005e7a:	9006      	str	r0, [sp, #24]
 8005e7c:	9107      	str	r1, [sp, #28]
 8005e7e:	9104      	str	r1, [sp, #16]
 8005e80:	4808      	ldr	r0, [pc, #32]	; (8005ea4 <siprintf+0x38>)
 8005e82:	4909      	ldr	r1, [pc, #36]	; (8005ea8 <siprintf+0x3c>)
 8005e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	a902      	add	r1, sp, #8
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	f000 f868 	bl	8005f64 <_svfiprintf_r>
 8005e94:	2200      	movs	r2, #0
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	b01c      	add	sp, #112	; 0x70
 8005e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea0:	b003      	add	sp, #12
 8005ea2:	4770      	bx	lr
 8005ea4:	20000010 	.word	0x20000010
 8005ea8:	ffff0208 	.word	0xffff0208

08005eac <__ssputs_r>:
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	688e      	ldr	r6, [r1, #8]
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	429e      	cmp	r6, r3
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4690      	mov	r8, r2
 8005eba:	461f      	mov	r7, r3
 8005ebc:	d838      	bhi.n	8005f30 <__ssputs_r+0x84>
 8005ebe:	898a      	ldrh	r2, [r1, #12]
 8005ec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ec4:	d032      	beq.n	8005f2c <__ssputs_r+0x80>
 8005ec6:	6825      	ldr	r5, [r4, #0]
 8005ec8:	6909      	ldr	r1, [r1, #16]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	eba5 0901 	sub.w	r9, r5, r1
 8005ed0:	6965      	ldr	r5, [r4, #20]
 8005ed2:	444b      	add	r3, r9
 8005ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005edc:	106d      	asrs	r5, r5, #1
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	bf38      	it	cc
 8005ee2:	461d      	movcc	r5, r3
 8005ee4:	0553      	lsls	r3, r2, #21
 8005ee6:	d531      	bpl.n	8005f4c <__ssputs_r+0xa0>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f000 fb45 	bl	8006578 <_malloc_r>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	b950      	cbnz	r0, 8005f08 <__ssputs_r+0x5c>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef8:	f8ca 3000 	str.w	r3, [sl]
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f08:	464a      	mov	r2, r9
 8005f0a:	6921      	ldr	r1, [r4, #16]
 8005f0c:	f7ff ff98 	bl	8005e40 <memcpy>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	6126      	str	r6, [r4, #16]
 8005f1e:	444e      	add	r6, r9
 8005f20:	6026      	str	r6, [r4, #0]
 8005f22:	463e      	mov	r6, r7
 8005f24:	6165      	str	r5, [r4, #20]
 8005f26:	eba5 0509 	sub.w	r5, r5, r9
 8005f2a:	60a5      	str	r5, [r4, #8]
 8005f2c:	42be      	cmp	r6, r7
 8005f2e:	d900      	bls.n	8005f32 <__ssputs_r+0x86>
 8005f30:	463e      	mov	r6, r7
 8005f32:	4632      	mov	r2, r6
 8005f34:	4641      	mov	r1, r8
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	f000 fab8 	bl	80064ac <memmove>
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	4432      	add	r2, r6
 8005f44:	2000      	movs	r0, #0
 8005f46:	60a3      	str	r3, [r4, #8]
 8005f48:	6022      	str	r2, [r4, #0]
 8005f4a:	e7db      	b.n	8005f04 <__ssputs_r+0x58>
 8005f4c:	462a      	mov	r2, r5
 8005f4e:	f000 fb6d 	bl	800662c <_realloc_r>
 8005f52:	4606      	mov	r6, r0
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d1e1      	bne.n	8005f1c <__ssputs_r+0x70>
 8005f58:	4650      	mov	r0, sl
 8005f5a:	6921      	ldr	r1, [r4, #16]
 8005f5c:	f000 fac0 	bl	80064e0 <_free_r>
 8005f60:	e7c7      	b.n	8005ef2 <__ssputs_r+0x46>
	...

08005f64 <_svfiprintf_r>:
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	4698      	mov	r8, r3
 8005f6a:	898b      	ldrh	r3, [r1, #12]
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	460d      	mov	r5, r1
 8005f72:	4614      	mov	r4, r2
 8005f74:	b09d      	sub	sp, #116	; 0x74
 8005f76:	d50e      	bpl.n	8005f96 <_svfiprintf_r+0x32>
 8005f78:	690b      	ldr	r3, [r1, #16]
 8005f7a:	b963      	cbnz	r3, 8005f96 <_svfiprintf_r+0x32>
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	f000 fafb 	bl	8006578 <_malloc_r>
 8005f82:	6028      	str	r0, [r5, #0]
 8005f84:	6128      	str	r0, [r5, #16]
 8005f86:	b920      	cbnz	r0, 8005f92 <_svfiprintf_r+0x2e>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f90:	e0d1      	b.n	8006136 <_svfiprintf_r+0x1d2>
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	616b      	str	r3, [r5, #20]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9a:	2320      	movs	r3, #32
 8005f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fa0:	2330      	movs	r3, #48	; 0x30
 8005fa2:	f04f 0901 	mov.w	r9, #1
 8005fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005faa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006150 <_svfiprintf_r+0x1ec>
 8005fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	469a      	mov	sl, r3
 8005fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fba:	b10a      	cbz	r2, 8005fc0 <_svfiprintf_r+0x5c>
 8005fbc:	2a25      	cmp	r2, #37	; 0x25
 8005fbe:	d1f9      	bne.n	8005fb4 <_svfiprintf_r+0x50>
 8005fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc4:	d00b      	beq.n	8005fde <_svfiprintf_r+0x7a>
 8005fc6:	465b      	mov	r3, fp
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f7ff ff6d 	bl	8005eac <__ssputs_r>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	f000 80aa 	beq.w	800612c <_svfiprintf_r+0x1c8>
 8005fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fda:	445a      	add	r2, fp
 8005fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fde:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80a2 	beq.w	800612c <_svfiprintf_r+0x1c8>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff2:	f10a 0a01 	add.w	sl, sl, #1
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	9307      	str	r3, [sp, #28]
 8005ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8006000:	4654      	mov	r4, sl
 8006002:	2205      	movs	r2, #5
 8006004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006008:	4851      	ldr	r0, [pc, #324]	; (8006150 <_svfiprintf_r+0x1ec>)
 800600a:	f000 fa41 	bl	8006490 <memchr>
 800600e:	9a04      	ldr	r2, [sp, #16]
 8006010:	b9d8      	cbnz	r0, 800604a <_svfiprintf_r+0xe6>
 8006012:	06d0      	lsls	r0, r2, #27
 8006014:	bf44      	itt	mi
 8006016:	2320      	movmi	r3, #32
 8006018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800601c:	0711      	lsls	r1, r2, #28
 800601e:	bf44      	itt	mi
 8006020:	232b      	movmi	r3, #43	; 0x2b
 8006022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006026:	f89a 3000 	ldrb.w	r3, [sl]
 800602a:	2b2a      	cmp	r3, #42	; 0x2a
 800602c:	d015      	beq.n	800605a <_svfiprintf_r+0xf6>
 800602e:	4654      	mov	r4, sl
 8006030:	2000      	movs	r0, #0
 8006032:	f04f 0c0a 	mov.w	ip, #10
 8006036:	9a07      	ldr	r2, [sp, #28]
 8006038:	4621      	mov	r1, r4
 800603a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603e:	3b30      	subs	r3, #48	; 0x30
 8006040:	2b09      	cmp	r3, #9
 8006042:	d94e      	bls.n	80060e2 <_svfiprintf_r+0x17e>
 8006044:	b1b0      	cbz	r0, 8006074 <_svfiprintf_r+0x110>
 8006046:	9207      	str	r2, [sp, #28]
 8006048:	e014      	b.n	8006074 <_svfiprintf_r+0x110>
 800604a:	eba0 0308 	sub.w	r3, r0, r8
 800604e:	fa09 f303 	lsl.w	r3, r9, r3
 8006052:	4313      	orrs	r3, r2
 8006054:	46a2      	mov	sl, r4
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	e7d2      	b.n	8006000 <_svfiprintf_r+0x9c>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	1d19      	adds	r1, r3, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	9103      	str	r1, [sp, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	bfbb      	ittet	lt
 8006066:	425b      	neglt	r3, r3
 8006068:	f042 0202 	orrlt.w	r2, r2, #2
 800606c:	9307      	strge	r3, [sp, #28]
 800606e:	9307      	strlt	r3, [sp, #28]
 8006070:	bfb8      	it	lt
 8006072:	9204      	strlt	r2, [sp, #16]
 8006074:	7823      	ldrb	r3, [r4, #0]
 8006076:	2b2e      	cmp	r3, #46	; 0x2e
 8006078:	d10c      	bne.n	8006094 <_svfiprintf_r+0x130>
 800607a:	7863      	ldrb	r3, [r4, #1]
 800607c:	2b2a      	cmp	r3, #42	; 0x2a
 800607e:	d135      	bne.n	80060ec <_svfiprintf_r+0x188>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	3402      	adds	r4, #2
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfb8      	it	lt
 800608e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006160 <_svfiprintf_r+0x1fc>
 8006098:	2203      	movs	r2, #3
 800609a:	4650      	mov	r0, sl
 800609c:	7821      	ldrb	r1, [r4, #0]
 800609e:	f000 f9f7 	bl	8006490 <memchr>
 80060a2:	b140      	cbz	r0, 80060b6 <_svfiprintf_r+0x152>
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	eba0 000a 	sub.w	r0, r0, sl
 80060aa:	fa03 f000 	lsl.w	r0, r3, r0
 80060ae:	9b04      	ldr	r3, [sp, #16]
 80060b0:	3401      	adds	r4, #1
 80060b2:	4303      	orrs	r3, r0
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ba:	2206      	movs	r2, #6
 80060bc:	4825      	ldr	r0, [pc, #148]	; (8006154 <_svfiprintf_r+0x1f0>)
 80060be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060c2:	f000 f9e5 	bl	8006490 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d038      	beq.n	800613c <_svfiprintf_r+0x1d8>
 80060ca:	4b23      	ldr	r3, [pc, #140]	; (8006158 <_svfiprintf_r+0x1f4>)
 80060cc:	bb1b      	cbnz	r3, 8006116 <_svfiprintf_r+0x1b2>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	3307      	adds	r3, #7
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	3308      	adds	r3, #8
 80060d8:	9303      	str	r3, [sp, #12]
 80060da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060dc:	4433      	add	r3, r6
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	e767      	b.n	8005fb2 <_svfiprintf_r+0x4e>
 80060e2:	460c      	mov	r4, r1
 80060e4:	2001      	movs	r0, #1
 80060e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ea:	e7a5      	b.n	8006038 <_svfiprintf_r+0xd4>
 80060ec:	2300      	movs	r3, #0
 80060ee:	f04f 0c0a 	mov.w	ip, #10
 80060f2:	4619      	mov	r1, r3
 80060f4:	3401      	adds	r4, #1
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	4620      	mov	r0, r4
 80060fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fe:	3a30      	subs	r2, #48	; 0x30
 8006100:	2a09      	cmp	r2, #9
 8006102:	d903      	bls.n	800610c <_svfiprintf_r+0x1a8>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0c5      	beq.n	8006094 <_svfiprintf_r+0x130>
 8006108:	9105      	str	r1, [sp, #20]
 800610a:	e7c3      	b.n	8006094 <_svfiprintf_r+0x130>
 800610c:	4604      	mov	r4, r0
 800610e:	2301      	movs	r3, #1
 8006110:	fb0c 2101 	mla	r1, ip, r1, r2
 8006114:	e7f0      	b.n	80060f8 <_svfiprintf_r+0x194>
 8006116:	ab03      	add	r3, sp, #12
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	462a      	mov	r2, r5
 800611c:	4638      	mov	r0, r7
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <_svfiprintf_r+0x1f8>)
 8006120:	a904      	add	r1, sp, #16
 8006122:	f3af 8000 	nop.w
 8006126:	1c42      	adds	r2, r0, #1
 8006128:	4606      	mov	r6, r0
 800612a:	d1d6      	bne.n	80060da <_svfiprintf_r+0x176>
 800612c:	89ab      	ldrh	r3, [r5, #12]
 800612e:	065b      	lsls	r3, r3, #25
 8006130:	f53f af2c 	bmi.w	8005f8c <_svfiprintf_r+0x28>
 8006134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006136:	b01d      	add	sp, #116	; 0x74
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	ab03      	add	r3, sp, #12
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	462a      	mov	r2, r5
 8006142:	4638      	mov	r0, r7
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <_svfiprintf_r+0x1f8>)
 8006146:	a904      	add	r1, sp, #16
 8006148:	f000 f87c 	bl	8006244 <_printf_i>
 800614c:	e7eb      	b.n	8006126 <_svfiprintf_r+0x1c2>
 800614e:	bf00      	nop
 8006150:	080067cc 	.word	0x080067cc
 8006154:	080067d6 	.word	0x080067d6
 8006158:	00000000 	.word	0x00000000
 800615c:	08005ead 	.word	0x08005ead
 8006160:	080067d2 	.word	0x080067d2

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4616      	mov	r6, r2
 800616a:	4699      	mov	r9, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	4607      	mov	r7, r0
 8006172:	4293      	cmp	r3, r2
 8006174:	bfb8      	it	lt
 8006176:	4613      	movlt	r3, r2
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800617e:	460c      	mov	r4, r1
 8006180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006184:	b10a      	cbz	r2, 800618a <_printf_common+0x26>
 8006186:	3301      	adds	r3, #1
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	6833      	ldrmi	r3, [r6, #0]
 8006192:	3302      	addmi	r3, #2
 8006194:	6033      	strmi	r3, [r6, #0]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d106      	bne.n	80061ac <_printf_common+0x48>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	6832      	ldr	r2, [r6, #0]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dc28      	bgt.n	80061fe <_printf_common+0x9a>
 80061ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b0:	1e13      	subs	r3, r2, #0
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	bf18      	it	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	0692      	lsls	r2, r2, #26
 80061ba:	d42d      	bmi.n	8006218 <_printf_common+0xb4>
 80061bc:	4649      	mov	r1, r9
 80061be:	4638      	mov	r0, r7
 80061c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d020      	beq.n	800620c <_printf_common+0xa8>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	68e5      	ldr	r5, [r4, #12]
 80061ce:	f003 0306 	and.w	r3, r3, #6
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf18      	it	ne
 80061d6:	2500      	movne	r5, #0
 80061d8:	6832      	ldr	r2, [r6, #0]
 80061da:	f04f 0600 	mov.w	r6, #0
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	bf08      	it	eq
 80061e2:	1aad      	subeq	r5, r5, r2
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	bf08      	it	eq
 80061e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bfc4      	itt	gt
 80061f0:	1a9b      	subgt	r3, r3, r2
 80061f2:	18ed      	addgt	r5, r5, r3
 80061f4:	341a      	adds	r4, #26
 80061f6:	42b5      	cmp	r5, r6
 80061f8:	d11a      	bne.n	8006230 <_printf_common+0xcc>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e008      	b.n	8006210 <_printf_common+0xac>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4649      	mov	r1, r9
 8006204:	4638      	mov	r0, r7
 8006206:	47c0      	blx	r8
 8006208:	3001      	adds	r0, #1
 800620a:	d103      	bne.n	8006214 <_printf_common+0xb0>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	3501      	adds	r5, #1
 8006216:	e7c4      	b.n	80061a2 <_printf_common+0x3e>
 8006218:	2030      	movs	r0, #48	; 0x30
 800621a:	18e1      	adds	r1, r4, r3
 800621c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006226:	4422      	add	r2, r4
 8006228:	3302      	adds	r3, #2
 800622a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622e:	e7c5      	b.n	80061bc <_printf_common+0x58>
 8006230:	2301      	movs	r3, #1
 8006232:	4622      	mov	r2, r4
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d0e6      	beq.n	800620c <_printf_common+0xa8>
 800623e:	3601      	adds	r6, #1
 8006240:	e7d9      	b.n	80061f6 <_printf_common+0x92>
	...

08006244 <_printf_i>:
 8006244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	460c      	mov	r4, r1
 800624a:	7e27      	ldrb	r7, [r4, #24]
 800624c:	4691      	mov	r9, r2
 800624e:	2f78      	cmp	r7, #120	; 0x78
 8006250:	4680      	mov	r8, r0
 8006252:	469a      	mov	sl, r3
 8006254:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006256:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800625a:	d807      	bhi.n	800626c <_printf_i+0x28>
 800625c:	2f62      	cmp	r7, #98	; 0x62
 800625e:	d80a      	bhi.n	8006276 <_printf_i+0x32>
 8006260:	2f00      	cmp	r7, #0
 8006262:	f000 80d9 	beq.w	8006418 <_printf_i+0x1d4>
 8006266:	2f58      	cmp	r7, #88	; 0x58
 8006268:	f000 80a4 	beq.w	80063b4 <_printf_i+0x170>
 800626c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006274:	e03a      	b.n	80062ec <_printf_i+0xa8>
 8006276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800627a:	2b15      	cmp	r3, #21
 800627c:	d8f6      	bhi.n	800626c <_printf_i+0x28>
 800627e:	a001      	add	r0, pc, #4	; (adr r0, 8006284 <_printf_i+0x40>)
 8006280:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062f1 	.word	0x080062f1
 800628c:	0800626d 	.word	0x0800626d
 8006290:	0800626d 	.word	0x0800626d
 8006294:	0800626d 	.word	0x0800626d
 8006298:	0800626d 	.word	0x0800626d
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	0800626d 	.word	0x0800626d
 80062a4:	0800626d 	.word	0x0800626d
 80062a8:	0800626d 	.word	0x0800626d
 80062ac:	0800626d 	.word	0x0800626d
 80062b0:	080063ff 	.word	0x080063ff
 80062b4:	08006321 	.word	0x08006321
 80062b8:	080063e1 	.word	0x080063e1
 80062bc:	0800626d 	.word	0x0800626d
 80062c0:	0800626d 	.word	0x0800626d
 80062c4:	08006421 	.word	0x08006421
 80062c8:	0800626d 	.word	0x0800626d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800626d 	.word	0x0800626d
 80062d4:	0800626d 	.word	0x0800626d
 80062d8:	080063e9 	.word	0x080063e9
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	600a      	str	r2, [r1, #0]
 80062e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0a4      	b.n	800643a <_printf_i+0x1f6>
 80062f0:	6825      	ldr	r5, [r4, #0]
 80062f2:	6808      	ldr	r0, [r1, #0]
 80062f4:	062e      	lsls	r6, r5, #24
 80062f6:	f100 0304 	add.w	r3, r0, #4
 80062fa:	d50a      	bpl.n	8006312 <_printf_i+0xce>
 80062fc:	6805      	ldr	r5, [r0, #0]
 80062fe:	600b      	str	r3, [r1, #0]
 8006300:	2d00      	cmp	r5, #0
 8006302:	da03      	bge.n	800630c <_printf_i+0xc8>
 8006304:	232d      	movs	r3, #45	; 0x2d
 8006306:	426d      	negs	r5, r5
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	230a      	movs	r3, #10
 800630e:	485e      	ldr	r0, [pc, #376]	; (8006488 <_printf_i+0x244>)
 8006310:	e019      	b.n	8006346 <_printf_i+0x102>
 8006312:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006316:	6805      	ldr	r5, [r0, #0]
 8006318:	600b      	str	r3, [r1, #0]
 800631a:	bf18      	it	ne
 800631c:	b22d      	sxthne	r5, r5
 800631e:	e7ef      	b.n	8006300 <_printf_i+0xbc>
 8006320:	680b      	ldr	r3, [r1, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	1d18      	adds	r0, r3, #4
 8006326:	6008      	str	r0, [r1, #0]
 8006328:	0628      	lsls	r0, r5, #24
 800632a:	d501      	bpl.n	8006330 <_printf_i+0xec>
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	e002      	b.n	8006336 <_printf_i+0xf2>
 8006330:	0669      	lsls	r1, r5, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0xe8>
 8006334:	881d      	ldrh	r5, [r3, #0]
 8006336:	2f6f      	cmp	r7, #111	; 0x6f
 8006338:	bf0c      	ite	eq
 800633a:	2308      	moveq	r3, #8
 800633c:	230a      	movne	r3, #10
 800633e:	4852      	ldr	r0, [pc, #328]	; (8006488 <_printf_i+0x244>)
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006346:	6866      	ldr	r6, [r4, #4]
 8006348:	2e00      	cmp	r6, #0
 800634a:	bfa8      	it	ge
 800634c:	6821      	ldrge	r1, [r4, #0]
 800634e:	60a6      	str	r6, [r4, #8]
 8006350:	bfa4      	itt	ge
 8006352:	f021 0104 	bicge.w	r1, r1, #4
 8006356:	6021      	strge	r1, [r4, #0]
 8006358:	b90d      	cbnz	r5, 800635e <_printf_i+0x11a>
 800635a:	2e00      	cmp	r6, #0
 800635c:	d04d      	beq.n	80063fa <_printf_i+0x1b6>
 800635e:	4616      	mov	r6, r2
 8006360:	fbb5 f1f3 	udiv	r1, r5, r3
 8006364:	fb03 5711 	mls	r7, r3, r1, r5
 8006368:	5dc7      	ldrb	r7, [r0, r7]
 800636a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800636e:	462f      	mov	r7, r5
 8006370:	42bb      	cmp	r3, r7
 8006372:	460d      	mov	r5, r1
 8006374:	d9f4      	bls.n	8006360 <_printf_i+0x11c>
 8006376:	2b08      	cmp	r3, #8
 8006378:	d10b      	bne.n	8006392 <_printf_i+0x14e>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	07df      	lsls	r7, r3, #31
 800637e:	d508      	bpl.n	8006392 <_printf_i+0x14e>
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	6861      	ldr	r1, [r4, #4]
 8006384:	4299      	cmp	r1, r3
 8006386:	bfde      	ittt	le
 8006388:	2330      	movle	r3, #48	; 0x30
 800638a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800638e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006392:	1b92      	subs	r2, r2, r6
 8006394:	6122      	str	r2, [r4, #16]
 8006396:	464b      	mov	r3, r9
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f8cd a000 	str.w	sl, [sp]
 80063a0:	aa03      	add	r2, sp, #12
 80063a2:	f7ff fedf 	bl	8006164 <_printf_common>
 80063a6:	3001      	adds	r0, #1
 80063a8:	d14c      	bne.n	8006444 <_printf_i+0x200>
 80063aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ae:	b004      	add	sp, #16
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	4834      	ldr	r0, [pc, #208]	; (8006488 <_printf_i+0x244>)
 80063b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063ba:	680e      	ldr	r6, [r1, #0]
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f856 5b04 	ldr.w	r5, [r6], #4
 80063c2:	061f      	lsls	r7, r3, #24
 80063c4:	600e      	str	r6, [r1, #0]
 80063c6:	d514      	bpl.n	80063f2 <_printf_i+0x1ae>
 80063c8:	07d9      	lsls	r1, r3, #31
 80063ca:	bf44      	itt	mi
 80063cc:	f043 0320 	orrmi.w	r3, r3, #32
 80063d0:	6023      	strmi	r3, [r4, #0]
 80063d2:	b91d      	cbnz	r5, 80063dc <_printf_i+0x198>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	f023 0320 	bic.w	r3, r3, #32
 80063da:	6023      	str	r3, [r4, #0]
 80063dc:	2310      	movs	r3, #16
 80063de:	e7af      	b.n	8006340 <_printf_i+0xfc>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	f043 0320 	orr.w	r3, r3, #32
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	2378      	movs	r3, #120	; 0x78
 80063ea:	4828      	ldr	r0, [pc, #160]	; (800648c <_printf_i+0x248>)
 80063ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063f0:	e7e3      	b.n	80063ba <_printf_i+0x176>
 80063f2:	065e      	lsls	r6, r3, #25
 80063f4:	bf48      	it	mi
 80063f6:	b2ad      	uxthmi	r5, r5
 80063f8:	e7e6      	b.n	80063c8 <_printf_i+0x184>
 80063fa:	4616      	mov	r6, r2
 80063fc:	e7bb      	b.n	8006376 <_printf_i+0x132>
 80063fe:	680b      	ldr	r3, [r1, #0]
 8006400:	6826      	ldr	r6, [r4, #0]
 8006402:	1d1d      	adds	r5, r3, #4
 8006404:	6960      	ldr	r0, [r4, #20]
 8006406:	600d      	str	r5, [r1, #0]
 8006408:	0635      	lsls	r5, r6, #24
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	d501      	bpl.n	8006412 <_printf_i+0x1ce>
 800640e:	6018      	str	r0, [r3, #0]
 8006410:	e002      	b.n	8006418 <_printf_i+0x1d4>
 8006412:	0671      	lsls	r1, r6, #25
 8006414:	d5fb      	bpl.n	800640e <_printf_i+0x1ca>
 8006416:	8018      	strh	r0, [r3, #0]
 8006418:	2300      	movs	r3, #0
 800641a:	4616      	mov	r6, r2
 800641c:	6123      	str	r3, [r4, #16]
 800641e:	e7ba      	b.n	8006396 <_printf_i+0x152>
 8006420:	680b      	ldr	r3, [r1, #0]
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	600a      	str	r2, [r1, #0]
 8006426:	681e      	ldr	r6, [r3, #0]
 8006428:	2100      	movs	r1, #0
 800642a:	4630      	mov	r0, r6
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	f000 f82f 	bl	8006490 <memchr>
 8006432:	b108      	cbz	r0, 8006438 <_printf_i+0x1f4>
 8006434:	1b80      	subs	r0, r0, r6
 8006436:	6060      	str	r0, [r4, #4]
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	6123      	str	r3, [r4, #16]
 800643c:	2300      	movs	r3, #0
 800643e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006442:	e7a8      	b.n	8006396 <_printf_i+0x152>
 8006444:	4632      	mov	r2, r6
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	47d0      	blx	sl
 800644e:	3001      	adds	r0, #1
 8006450:	d0ab      	beq.n	80063aa <_printf_i+0x166>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	079b      	lsls	r3, r3, #30
 8006456:	d413      	bmi.n	8006480 <_printf_i+0x23c>
 8006458:	68e0      	ldr	r0, [r4, #12]
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	4298      	cmp	r0, r3
 800645e:	bfb8      	it	lt
 8006460:	4618      	movlt	r0, r3
 8006462:	e7a4      	b.n	80063ae <_printf_i+0x16a>
 8006464:	2301      	movs	r3, #1
 8006466:	4632      	mov	r2, r6
 8006468:	4649      	mov	r1, r9
 800646a:	4640      	mov	r0, r8
 800646c:	47d0      	blx	sl
 800646e:	3001      	adds	r0, #1
 8006470:	d09b      	beq.n	80063aa <_printf_i+0x166>
 8006472:	3501      	adds	r5, #1
 8006474:	68e3      	ldr	r3, [r4, #12]
 8006476:	9903      	ldr	r1, [sp, #12]
 8006478:	1a5b      	subs	r3, r3, r1
 800647a:	42ab      	cmp	r3, r5
 800647c:	dcf2      	bgt.n	8006464 <_printf_i+0x220>
 800647e:	e7eb      	b.n	8006458 <_printf_i+0x214>
 8006480:	2500      	movs	r5, #0
 8006482:	f104 0619 	add.w	r6, r4, #25
 8006486:	e7f5      	b.n	8006474 <_printf_i+0x230>
 8006488:	080067dd 	.word	0x080067dd
 800648c:	080067ee 	.word	0x080067ee

08006490 <memchr>:
 8006490:	4603      	mov	r3, r0
 8006492:	b510      	push	{r4, lr}
 8006494:	b2c9      	uxtb	r1, r1
 8006496:	4402      	add	r2, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	d101      	bne.n	80064a2 <memchr+0x12>
 800649e:	2000      	movs	r0, #0
 80064a0:	e003      	b.n	80064aa <memchr+0x1a>
 80064a2:	7804      	ldrb	r4, [r0, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	428c      	cmp	r4, r1
 80064a8:	d1f6      	bne.n	8006498 <memchr+0x8>
 80064aa:	bd10      	pop	{r4, pc}

080064ac <memmove>:
 80064ac:	4288      	cmp	r0, r1
 80064ae:	b510      	push	{r4, lr}
 80064b0:	eb01 0402 	add.w	r4, r1, r2
 80064b4:	d902      	bls.n	80064bc <memmove+0x10>
 80064b6:	4284      	cmp	r4, r0
 80064b8:	4623      	mov	r3, r4
 80064ba:	d807      	bhi.n	80064cc <memmove+0x20>
 80064bc:	1e43      	subs	r3, r0, #1
 80064be:	42a1      	cmp	r1, r4
 80064c0:	d008      	beq.n	80064d4 <memmove+0x28>
 80064c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ca:	e7f8      	b.n	80064be <memmove+0x12>
 80064cc:	4601      	mov	r1, r0
 80064ce:	4402      	add	r2, r0
 80064d0:	428a      	cmp	r2, r1
 80064d2:	d100      	bne.n	80064d6 <memmove+0x2a>
 80064d4:	bd10      	pop	{r4, pc}
 80064d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064de:	e7f7      	b.n	80064d0 <memmove+0x24>

080064e0 <_free_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4605      	mov	r5, r0
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d043      	beq.n	8006570 <_free_r+0x90>
 80064e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ec:	1f0c      	subs	r4, r1, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bfb8      	it	lt
 80064f2:	18e4      	addlt	r4, r4, r3
 80064f4:	f000 f8d0 	bl	8006698 <__malloc_lock>
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <_free_r+0x94>)
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	4610      	mov	r0, r2
 80064fe:	b933      	cbnz	r3, 800650e <_free_r+0x2e>
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	6014      	str	r4, [r2, #0]
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650a:	f000 b8cb 	b.w	80066a4 <__malloc_unlock>
 800650e:	42a3      	cmp	r3, r4
 8006510:	d90a      	bls.n	8006528 <_free_r+0x48>
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	1862      	adds	r2, r4, r1
 8006516:	4293      	cmp	r3, r2
 8006518:	bf01      	itttt	eq
 800651a:	681a      	ldreq	r2, [r3, #0]
 800651c:	685b      	ldreq	r3, [r3, #4]
 800651e:	1852      	addeq	r2, r2, r1
 8006520:	6022      	streq	r2, [r4, #0]
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	6004      	str	r4, [r0, #0]
 8006526:	e7ed      	b.n	8006504 <_free_r+0x24>
 8006528:	461a      	mov	r2, r3
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	b10b      	cbz	r3, 8006532 <_free_r+0x52>
 800652e:	42a3      	cmp	r3, r4
 8006530:	d9fa      	bls.n	8006528 <_free_r+0x48>
 8006532:	6811      	ldr	r1, [r2, #0]
 8006534:	1850      	adds	r0, r2, r1
 8006536:	42a0      	cmp	r0, r4
 8006538:	d10b      	bne.n	8006552 <_free_r+0x72>
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	4401      	add	r1, r0
 800653e:	1850      	adds	r0, r2, r1
 8006540:	4283      	cmp	r3, r0
 8006542:	6011      	str	r1, [r2, #0]
 8006544:	d1de      	bne.n	8006504 <_free_r+0x24>
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4401      	add	r1, r0
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	6053      	str	r3, [r2, #4]
 8006550:	e7d8      	b.n	8006504 <_free_r+0x24>
 8006552:	d902      	bls.n	800655a <_free_r+0x7a>
 8006554:	230c      	movs	r3, #12
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	e7d4      	b.n	8006504 <_free_r+0x24>
 800655a:	6820      	ldr	r0, [r4, #0]
 800655c:	1821      	adds	r1, r4, r0
 800655e:	428b      	cmp	r3, r1
 8006560:	bf01      	itttt	eq
 8006562:	6819      	ldreq	r1, [r3, #0]
 8006564:	685b      	ldreq	r3, [r3, #4]
 8006566:	1809      	addeq	r1, r1, r0
 8006568:	6021      	streq	r1, [r4, #0]
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	6054      	str	r4, [r2, #4]
 800656e:	e7c9      	b.n	8006504 <_free_r+0x24>
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop
 8006574:	2000199c 	.word	0x2000199c

08006578 <_malloc_r>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	1ccd      	adds	r5, r1, #3
 800657c:	f025 0503 	bic.w	r5, r5, #3
 8006580:	3508      	adds	r5, #8
 8006582:	2d0c      	cmp	r5, #12
 8006584:	bf38      	it	cc
 8006586:	250c      	movcc	r5, #12
 8006588:	2d00      	cmp	r5, #0
 800658a:	4606      	mov	r6, r0
 800658c:	db01      	blt.n	8006592 <_malloc_r+0x1a>
 800658e:	42a9      	cmp	r1, r5
 8006590:	d903      	bls.n	800659a <_malloc_r+0x22>
 8006592:	230c      	movs	r3, #12
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	2000      	movs	r0, #0
 8006598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800659a:	f000 f87d 	bl	8006698 <__malloc_lock>
 800659e:	4921      	ldr	r1, [pc, #132]	; (8006624 <_malloc_r+0xac>)
 80065a0:	680a      	ldr	r2, [r1, #0]
 80065a2:	4614      	mov	r4, r2
 80065a4:	b99c      	cbnz	r4, 80065ce <_malloc_r+0x56>
 80065a6:	4f20      	ldr	r7, [pc, #128]	; (8006628 <_malloc_r+0xb0>)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	b923      	cbnz	r3, 80065b6 <_malloc_r+0x3e>
 80065ac:	4621      	mov	r1, r4
 80065ae:	4630      	mov	r0, r6
 80065b0:	f000 f862 	bl	8006678 <_sbrk_r>
 80065b4:	6038      	str	r0, [r7, #0]
 80065b6:	4629      	mov	r1, r5
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f85d 	bl	8006678 <_sbrk_r>
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	d123      	bne.n	800660a <_malloc_r+0x92>
 80065c2:	230c      	movs	r3, #12
 80065c4:	4630      	mov	r0, r6
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	f000 f86c 	bl	80066a4 <__malloc_unlock>
 80065cc:	e7e3      	b.n	8006596 <_malloc_r+0x1e>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	1b5b      	subs	r3, r3, r5
 80065d2:	d417      	bmi.n	8006604 <_malloc_r+0x8c>
 80065d4:	2b0b      	cmp	r3, #11
 80065d6:	d903      	bls.n	80065e0 <_malloc_r+0x68>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	441c      	add	r4, r3
 80065dc:	6025      	str	r5, [r4, #0]
 80065de:	e004      	b.n	80065ea <_malloc_r+0x72>
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	42a2      	cmp	r2, r4
 80065e4:	bf0c      	ite	eq
 80065e6:	600b      	streq	r3, [r1, #0]
 80065e8:	6053      	strne	r3, [r2, #4]
 80065ea:	4630      	mov	r0, r6
 80065ec:	f000 f85a 	bl	80066a4 <__malloc_unlock>
 80065f0:	f104 000b 	add.w	r0, r4, #11
 80065f4:	1d23      	adds	r3, r4, #4
 80065f6:	f020 0007 	bic.w	r0, r0, #7
 80065fa:	1ac2      	subs	r2, r0, r3
 80065fc:	d0cc      	beq.n	8006598 <_malloc_r+0x20>
 80065fe:	1a1b      	subs	r3, r3, r0
 8006600:	50a3      	str	r3, [r4, r2]
 8006602:	e7c9      	b.n	8006598 <_malloc_r+0x20>
 8006604:	4622      	mov	r2, r4
 8006606:	6864      	ldr	r4, [r4, #4]
 8006608:	e7cc      	b.n	80065a4 <_malloc_r+0x2c>
 800660a:	1cc4      	adds	r4, r0, #3
 800660c:	f024 0403 	bic.w	r4, r4, #3
 8006610:	42a0      	cmp	r0, r4
 8006612:	d0e3      	beq.n	80065dc <_malloc_r+0x64>
 8006614:	1a21      	subs	r1, r4, r0
 8006616:	4630      	mov	r0, r6
 8006618:	f000 f82e 	bl	8006678 <_sbrk_r>
 800661c:	3001      	adds	r0, #1
 800661e:	d1dd      	bne.n	80065dc <_malloc_r+0x64>
 8006620:	e7cf      	b.n	80065c2 <_malloc_r+0x4a>
 8006622:	bf00      	nop
 8006624:	2000199c 	.word	0x2000199c
 8006628:	200019a0 	.word	0x200019a0

0800662c <_realloc_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	4607      	mov	r7, r0
 8006630:	4614      	mov	r4, r2
 8006632:	460e      	mov	r6, r1
 8006634:	b921      	cbnz	r1, 8006640 <_realloc_r+0x14>
 8006636:	4611      	mov	r1, r2
 8006638:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800663c:	f7ff bf9c 	b.w	8006578 <_malloc_r>
 8006640:	b922      	cbnz	r2, 800664c <_realloc_r+0x20>
 8006642:	f7ff ff4d 	bl	80064e0 <_free_r>
 8006646:	4625      	mov	r5, r4
 8006648:	4628      	mov	r0, r5
 800664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800664c:	f000 f830 	bl	80066b0 <_malloc_usable_size_r>
 8006650:	42a0      	cmp	r0, r4
 8006652:	d20f      	bcs.n	8006674 <_realloc_r+0x48>
 8006654:	4621      	mov	r1, r4
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ff8e 	bl	8006578 <_malloc_r>
 800665c:	4605      	mov	r5, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d0f2      	beq.n	8006648 <_realloc_r+0x1c>
 8006662:	4631      	mov	r1, r6
 8006664:	4622      	mov	r2, r4
 8006666:	f7ff fbeb 	bl	8005e40 <memcpy>
 800666a:	4631      	mov	r1, r6
 800666c:	4638      	mov	r0, r7
 800666e:	f7ff ff37 	bl	80064e0 <_free_r>
 8006672:	e7e9      	b.n	8006648 <_realloc_r+0x1c>
 8006674:	4635      	mov	r5, r6
 8006676:	e7e7      	b.n	8006648 <_realloc_r+0x1c>

08006678 <_sbrk_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	2300      	movs	r3, #0
 800667c:	4d05      	ldr	r5, [pc, #20]	; (8006694 <_sbrk_r+0x1c>)
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fa fb50 	bl	8000d28 <_sbrk>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_sbrk_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_sbrk_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20001ab8 	.word	0x20001ab8

08006698 <__malloc_lock>:
 8006698:	4801      	ldr	r0, [pc, #4]	; (80066a0 <__malloc_lock+0x8>)
 800669a:	f000 b811 	b.w	80066c0 <__retarget_lock_acquire_recursive>
 800669e:	bf00      	nop
 80066a0:	20001ac0 	.word	0x20001ac0

080066a4 <__malloc_unlock>:
 80066a4:	4801      	ldr	r0, [pc, #4]	; (80066ac <__malloc_unlock+0x8>)
 80066a6:	f000 b80c 	b.w	80066c2 <__retarget_lock_release_recursive>
 80066aa:	bf00      	nop
 80066ac:	20001ac0 	.word	0x20001ac0

080066b0 <_malloc_usable_size_r>:
 80066b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b4:	1f18      	subs	r0, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfbc      	itt	lt
 80066ba:	580b      	ldrlt	r3, [r1, r0]
 80066bc:	18c0      	addlt	r0, r0, r3
 80066be:	4770      	bx	lr

080066c0 <__retarget_lock_acquire_recursive>:
 80066c0:	4770      	bx	lr

080066c2 <__retarget_lock_release_recursive>:
 80066c2:	4770      	bx	lr

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
